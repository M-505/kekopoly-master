<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="eyJjdXJyZW50Q29udmVyc2F0aW9uSWQiOiIwYzI3Y2ExMy1kNjQzLTQwYmQtOGZjYi01NTFkOTEwMTU4YzAiLCJjb252ZXJzYXRpb25zIjp7IjBjMjdjYTEzLWQ2NDMtNDBiZC04ZmNiLTU1MWQ5MTAxNThjMCI6eyJpZCI6IjBjMjdjYTEzLWQ2NDMtNDBiZC04ZmNiLTU1MWQ5MTAxNThjMCIsIm5hbWUiOiJXZWxjb21lIHRvIHRoZSBBdWdtZW50IEFnZW50IiwiY3JlYXRlZEF0SXNvIjoiMjAyNS0wNS0wM1QwMjozNzozMS41NzJaIiwibGFzdEludGVyYWN0ZWRBdElzbyI6IjIwMjUtMDUtMDNUMDM6MDY6NTEuODc0WiIsImNoYXRIaXN0b3J5IjpbeyJyZXF1ZXN0X2lkIjoiMTNkNGRmOGUtYTNhZC00YTNlLTkwMTQtNDQyOTlkNDVjZTM3IiwidXVpZCI6IjFiYjU5YWI2LWQyOWEtNDcxMC04YTVjLTRlYmQ3NjBiNTYxZiIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtY2hlY2twb2ludC1kZWxpbWl0ZXIiLCJzdGF0dXMiOiJzdWNjZXNzIiwiZnJvbVRpbWVzdGFtcCI6MCwidG9UaW1lc3RhbXAiOjE3NDYyMzk4NTE1NzksInNlZW5fc3RhdGUiOiJzZWVuIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImEyMGZiNjA0LTk5OGQtNGY1MS05OWYzLWJmY2IyYzM5MGM0NyIsInJlcXVlc3RfbWVzc2FnZSI6IkhlbGxvIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkhlbGxvIn1dfV19LCJtZW50aW9uZWRfaXRlbXMiOltdLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJIZWxsbyEgSSdtIGhlcmUgdG8gaGVscCB5b3Ugd2l0aCB5b3VyIGNvZGluZyB0YXNrcy4gSG93IGNhbiBJIGFzc2lzdCB5b3Ugd2l0aCB5b3VyIHByb2plY3QgdG9kYXk/IEkgY2FuIGhlbHAgd2l0aDpcblxuLSBVbmRlcnN0YW5kaW5nIHlvdXIgY29kZWJhc2Vcbi0gTWFraW5nIGNvZGUgY2hhbmdlcyBvciBhZGRpdGlvbnNcbi0gRGVidWdnaW5nIGlzc3Vlc1xuLSBXcml0aW5nIHRlc3RzXG4tIFBsYW5uaW5nIG5ldyBmZWF0dXJlc1xuLSBPcHRpbWl6aW5nIGV4aXN0aW5nIGNvZGVcblxuSnVzdCBsZXQgbWUga25vdyB3aGF0IHlvdSdkIGxpa2UgdG8gd29yayBvbiwgYW5kIHdlIGNhbiBnZXQgc3RhcnRlZCFcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjAsInRleHRfbm9kZSI6eyJjb250ZW50IjoiSGVsbG8ifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIiwiZm9sZGVyUm9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTAzVDAyOjM3OjM2LjYyOVoiLCJyZXNwb25zZV90ZXh0IjoiSGVsbG8hIEknbSBoZXJlIHRvIGhlbHAgeW91IHdpdGggeW91ciBjb2RpbmcgdGFza3MuIEhvdyBjYW4gSSBhc3Npc3QgeW91IHdpdGggeW91ciBwcm9qZWN0IHRvZGF5PyBJIGNhbiBoZWxwIHdpdGg6XG5cbi0gVW5kZXJzdGFuZGluZyB5b3VyIGNvZGViYXNlXG4tIE1ha2luZyBjb2RlIGNoYW5nZXMgb3IgYWRkaXRpb25zXG4tIERlYnVnZ2luZyBpc3N1ZXNcbi0gV3JpdGluZyB0ZXN0c1xuLSBQbGFubmluZyBuZXcgZmVhdHVyZXNcbi0gT3B0aW1pemluZyBleGlzdGluZyBjb2RlXG5cbkp1c3QgbGV0IG1lIGtub3cgd2hhdCB5b3UnZCBsaWtlIHRvIHdvcmsgb24sIGFuZCB3ZSBjYW4gZ2V0IHN0YXJ0ZWQhXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InJlcXVlc3RfaWQiOiI4OGFlYzI5Yy01ZjU5LTRjZTEtYmUwMi0zODI2ZTdmZWQwNjIiLCJzdGF0dXMiOiJjYW5jZWxsZWQiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLXR1cm4tZGVsaW1pdGVyIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjNjZWJiODJmLWI1YTUtNDUzZC05MWU3LWY3MGFlM2M5OTU3ZSIsInJlcXVlc3RfbWVzc2FnZSI6ImNhbiB5b3UgaGVscCBtZSBjaGVjayB3aHkgZG9uJ3QgcHJvcGVydHkgdWkgcG9wcyB1cCB3aGVuIHdlIGxhbmQgb24gYSB1bm93bmVkIHByb3BlcnR5IiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6ImNhbiB5b3UgaGVscCBtZSBjaGVjayB3aHkgZG9uJ3QgcHJvcGVydHkgdWkgcG9wcyB1cCB3aGVuIHdlIGxhbmQgb24gYSB1bm93bmVkIHByb3BlcnR5In1dfV19LCJtZW50aW9uZWRfaXRlbXMiOltdLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFBa0V3ajFWTDd6QU00bmRLcHlKZllXIiwidG9vbF9uYW1lIjoiY29kZWJhc2UtcmV0cmlldmFsIiwiaW5wdXRfanNvbiI6IntcImluZm9ybWF0aW9uX3JlcXVlc3RcIjogXCJGaW5kIGNvZGUgcmVsYXRlZCB0byBwcm9wZXJ0eSBVSSwgbGFuZGluZyBvbiBwcm9wZXJ0aWVzLCBhbmQgaGFuZGxpbmcgdW5vd25lZCBwcm9wZXJ0aWVzLiBMb29rIGZvciBnYW1lIGxvZ2ljIHRoYXQgc2hvdWxkIHRyaWdnZXIgVUkgd2hlbiBhIHBsYXllciBsYW5kcyBvbiBhbiB1bm93bmVkIHByb3BlcnR5LlwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkknbGwgaGVscCB5b3UgaW52ZXN0aWdhdGUgd2h5IHRoZSBwcm9wZXJ0eSBVSSBkb2Vzbid0IHBvcCB1cCB3aGVuIGxhbmRpbmcgb24gYW4gdW5vd25lZCBwcm9wZXJ0eS4gTGV0J3Mgc3RhcnQgYnkgZXhhbWluaW5nIHRoZSByZWxldmFudCBjb2RlIGluIHlvdXIgcHJvamVjdC5cblxuIyMgUHJlbGltaW5hcnkgSW5mb3JtYXRpb24gR2F0aGVyaW5nXG5cbkZpcnN0LCBsZXQncyBzZWFyY2ggZm9yIGNvZGUgcmVsYXRlZCB0byBwcm9wZXJ0eSBVSSBhbmQgbGFuZGluZyBvbiBwcm9wZXJ0aWVzOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiJjYW4geW91IGhlbHAgbWUgY2hlY2sgd2h5IGRvbid0IHByb3BlcnR5IHVpIHBvcHMgdXAgd2hlbiB3ZSBsYW5kIG9uIGEgdW5vd25lZCBwcm9wZXJ0eSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIiLCJmb2xkZXJSb290IjoiL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMiJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMDNUMDI6Mzg6MDIuOTg0WiIsInJlc3BvbnNlX3RleHQiOiJJJ2xsIGhlbHAgeW91IGludmVzdGlnYXRlIHdoeSB0aGUgcHJvcGVydHkgVUkgZG9lc24ndCBwb3AgdXAgd2hlbiBsYW5kaW5nIG9uIGFuIHVub3duZWQgcHJvcGVydHkuIExldCdzIHN0YXJ0IGJ5IGV4YW1pbmluZyB0aGUgcmVsZXZhbnQgY29kZSBpbiB5b3VyIHByb2plY3QuXG5cbiMjIFByZWxpbWluYXJ5IEluZm9ybWF0aW9uIEdhdGhlcmluZ1xuXG5GaXJzdCwgbGV0J3Mgc2VhcmNoIGZvciBjb2RlIHJlbGF0ZWQgdG8gcHJvcGVydHkgVUkgYW5kIGxhbmRpbmcgb24gcHJvcGVydGllczpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI3YmUyZWM3YS05YzllLTQyOWEtODJlMS0wNzRlYjRhYWEyNGEiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFLaFdGdkE3YnRSYlI5VHllQ0hiVFpXIiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcImZpbmQgL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMiAtdHlwZSBmIC1uYW1lIFxcXCIqLnB5XFxcIiB8IGdyZXAgLWkgLUUgXFxcInByb3BlcnR5fGJvYXJkfGdhbWV8cGxheWVyfHVpXFxcIiB8IHNvcnRcIiwgXCJ3YWl0XCI6IHRydWUsIFwibWF4X3dhaXRfc2Vjb25kc1wiOiAzMH0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJMZXQgbWUgdHJ5IGEgZGlmZmVyZW50IGFwcHJvYWNoIHRvIGV4cGxvcmUgeW91ciBjb2RlYmFzZTpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRvb2wgXCJjb2RlYmFzZS1yZXRyaWV2YWxcIiBkb2VzIG5vdCBleGlzdCIsImlzX2Vycm9yIjp0cnVlLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFBa0V3ajFWTDd6QU00bmRLcHlKZllXIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMiIsImZvbGRlclJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0wM1QwMjozODowOC4xOTJaIiwicmVzcG9uc2VfdGV4dCI6IkxldCBtZSB0cnkgYSBkaWZmZXJlbnQgYXBwcm9hY2ggdG8gZXhwbG9yZSB5b3VyIGNvZGViYXNlOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjUzZmQ2ZWNjLTZjYzctNDcyZC1hMzU4LWI0YTMzYzZlYzBiYyIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUhCOUdpWTV4VTdRNEJtM1YyYnZWeUQiLCJ0b29sX25hbWUiOiJjb2RlYmFzZS1yZXRyaWV2YWwiLCJpbnB1dF9qc29uIjoie1wiaW5mb3JtYXRpb25fcmVxdWVzdFwiOiBcIkZpbmQgY29kZSByZWxhdGVkIHRvIHByb3BlcnR5IFVJLCBsYW5kaW5nIG9uIHByb3BlcnRpZXMsIGFuZCBoYW5kbGluZyB1bm93bmVkIHByb3BlcnRpZXMuIExvb2sgZm9yIGdhbWUgbG9naWMgdGhhdCBzaG91bGQgdHJpZ2dlciBVSSB3aGVuIGEgcGxheWVyIGxhbmRzIG9uIGFuIHVub3duZWQgcHJvcGVydHkuXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSBhcG9sb2dpemUgZm9yIHRoZSBjb25mdXNpb24uIExldCBtZSB0cnkgdXNpbmcgdGhlIGNvcnJlY3QgdG9vbHMgdG8gZXhwbG9yZSB5b3VyIGNvZGViYXNlOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVG9vbCBcImxhdW5jaC1wcm9jZXNzXCIgZG9lcyBub3QgZXhpc3QiLCJpc19lcnJvciI6dHJ1ZSwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxS2hXRnZBN2J0UmJSOVR5ZUNIYlRaVyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIiLCJmb2xkZXJSb290IjoiL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMiJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMDNUMDI6Mzg6MTIuMzI4WiIsInJlc3BvbnNlX3RleHQiOiJJIGFwb2xvZ2l6ZSBmb3IgdGhlIGNvbmZ1c2lvbi4gTGV0IG1lIHRyeSB1c2luZyB0aGUgY29ycmVjdCB0b29scyB0byBleHBsb3JlIHlvdXIgY29kZWJhc2U6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiYWZhODRiOTktYzQ5NC00MjA5LWEyOTQtMTJjM2VjOGJhNzBmIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxUUNpaWZmc01vNkVZckRFdVM2ZFhocSIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCIuXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSBhcG9sb2dpemUgZm9yIHRoZSB0ZWNobmljYWwgZGlmZmljdWx0aWVzLiBMZXQncyB0cnkgYSBkaWZmZXJlbnQgYXBwcm9hY2ggdG8gZXhwbG9yZSB5b3VyIGNvZGViYXNlOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVG9vbCBcImNvZGViYXNlLXJldHJpZXZhbFwiIGRvZXMgbm90IGV4aXN0IiwiaXNfZXJyb3IiOnRydWUsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUhCOUdpWTV4VTdRNEJtM1YyYnZWeUQifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIiwiZm9sZGVyUm9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTAzVDAyOjM4OjE1LjQ5NloiLCJyZXNwb25zZV90ZXh0IjoiSSBhcG9sb2dpemUgZm9yIHRoZSB0ZWNobmljYWwgZGlmZmljdWx0aWVzLiBMZXQncyB0cnkgYSBkaWZmZXJlbnQgYXBwcm9hY2ggdG8gZXhwbG9yZSB5b3VyIGNvZGViYXNlOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjAxNTA4NGM0LWJiNmItNDk1Mi05NjhjLWQ1NWU0Y2I4YjA4ZCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVRtYVBEb2dEaGdROXpNWmhhckRBazEiLCJ0b29sX25hbWUiOiJsaXN0LXByb2Nlc3NlcyIsImlucHV0X2pzb24iOiJ7fSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkkgYXBvbG9naXplIGZvciB0aGUgY29uZnVzaW9uLiBJdCBzZWVtcyB0aGVyZSBtaWdodCBiZSBzb21lIGlzc3VlcyB3aXRoIHRoZSB0b29scy4gTGV0J3MgdHJ5IGEgbW9yZSBiYXNpYyBhcHByb2FjaDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRvb2wgXCJzdHItcmVwbGFjZS1lZGl0b3JcIiBkb2VzIG5vdCBleGlzdCIsImlzX2Vycm9yIjp0cnVlLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFRQ2lpZmZzTW82RVlyREV1UzZkWGhxIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMiIsImZvbGRlclJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0wM1QwMjozODoxOC4wMjFaIiwicmVzcG9uc2VfdGV4dCI6IkkgYXBvbG9naXplIGZvciB0aGUgY29uZnVzaW9uLiBJdCBzZWVtcyB0aGVyZSBtaWdodCBiZSBzb21lIGlzc3VlcyB3aXRoIHRoZSB0b29scy4gTGV0J3MgdHJ5IGEgbW9yZSBiYXNpYyBhcHByb2FjaDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI1YzRlYzY3Ni1hN2E3LTQ0ZDctYmZjNC1kZTE0ZTA2OTRhYTAiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDE4eTV5Z25LcHBSeDRZd3NRS3laTjc0IiwidG9vbF9uYW1lIjoid2ViLXNlYXJjaCIsImlucHV0X2pzb24iOiJ7XCJxdWVyeVwiOiBcImhvdyB0byBkZWJ1ZyBweWdhbWUgcHJvcGVydHkgVUkgbm90IHNob3dpbmcgd2hlbiBsYW5kaW5nIG9uIHVub3duZWQgcHJvcGVydHlcIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJJIGFwb2xvZ2l6ZSBmb3IgdGhlIGRpZmZpY3VsdGllcy4gTGV0IG1lIHRyeSBvbmUgbW9yZSBhcHByb2FjaDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRvb2wgXCJsaXN0LXByb2Nlc3Nlc1wiIGRvZXMgbm90IGV4aXN0IiwiaXNfZXJyb3IiOnRydWUsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVRtYVBEb2dEaGdROXpNWmhhckRBazEifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIiwiZm9sZGVyUm9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTAzVDAyOjM4OjIwLjQ0NFoiLCJyZXNwb25zZV90ZXh0IjoiSSBhcG9sb2dpemUgZm9yIHRoZSBkaWZmaWN1bHRpZXMuIExldCBtZSB0cnkgb25lIG1vcmUgYXBwcm9hY2g6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiNTAxYTE1ZmMtM2NjMS00ZTliLWE3MmYtMGEyODQxZjVhZWFiIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSBhcG9sb2dpemUgZm9yIHRoZSBjb25mdXNpb24uIEl0IHNlZW1zIHRoZXJlIGFyZSBzb21lIHRlY2huaWNhbCBpc3N1ZXMgd2l0aCB0aGUgYXZhaWxhYmxlIHRvb2xzLiBMZXQncyB0cnkgYSBkaWZmZXJlbnQgYXBwcm9hY2ggdG8gaGVscCB5b3Ugd2l0aCB5b3VyIHByb2JsZW0uXG5cbkJhc2VkIG9uIHlvdXIgcXVlc3Rpb24gYWJvdXQgcHJvcGVydHkgVUkgbm90IGFwcGVhcmluZyB3aGVuIGxhbmRpbmcgb24gYW4gdW5vd25lZCBwcm9wZXJ0eSwgaGVyZSdzIGhvdyB3ZSBjYW4gYXBwcm9hY2ggdGhpcyBpc3N1ZTpcblxuIyMgVW5kZXJzdGFuZGluZyB0aGUgUHJvYmxlbVxuXG5XaGVuIGEgcGxheWVyIGxhbmRzIG9uIGFuIHVub3duZWQgcHJvcGVydHkgaW4geW91ciBnYW1lLCBhIFVJIHNob3VsZCBhcHBlYXIgZ2l2aW5nIHRoZW0gdGhlIG9wdGlvbiB0byBwdXJjaGFzZSBpdCwgYnV0IHRoaXMgaXNuJ3QgaGFwcGVuaW5nLiBUaGlzIGNvdWxkIGJlIGR1ZSB0byBzZXZlcmFsIHJlYXNvbnM6XG5cbjEuIFRoZSBjb2RlIHRoYXQgZGV0ZWN0cyBsYW5kaW5nIG9uIGEgcHJvcGVydHkgbWlnaHQgbm90IGJlIHdvcmtpbmcgY29ycmVjdGx5XG4yLiBUaGUgY29uZGl0aW9uIHRoYXQgY2hlY2tzIGlmIGEgcHJvcGVydHkgaXMgdW5vd25lZCBtaWdodCBoYXZlIGFuIGlzc3VlXG4zLiBUaGUgVUkgZGlzcGxheSBmdW5jdGlvbiBtaWdodCBub3QgYmUgZ2V0dGluZyB0cmlnZ2VyZWRcbjQuIFRoZXJlIGNvdWxkIGJlIGEgdGltaW5nIGlzc3VlIHdoZXJlIHRoZSBVSSBhcHBlYXJzIGJ1dCBkaXNhcHBlYXJzIHRvbyBxdWlja2x5XG5cbiMjIFN1Z2dlc3RlZCBEZWJ1Z2dpbmcgU3RlcHNcblxuMS4gKipDaGVjayB0aGUgcHJvcGVydHkgbGFuZGluZyBkZXRlY3Rpb24gY29kZSoqOlxuICAgLSBMb29rIGZvciBjb2RlIHRoYXQgaGFuZGxlcyBwbGF5ZXIgbW92ZW1lbnQgYW5kIGRldGVjdHMgd2hpY2ggdGlsZS9wcm9wZXJ0eSB0aGV5J3ZlIGxhbmRlZCBvblxuICAgLSBWZXJpZnkgdGhhdCBpdCBjb3JyZWN0bHkgaWRlbnRpZmllcyB3aGVuIGEgcGxheWVyIGxhbmRzIG9uIGEgcHJvcGVydHlcblxuMi4gKipFeGFtaW5lIHRoZSBwcm9wZXJ0eSBvd25lcnNoaXAgY2hlY2sqKjpcbiAgIC0gRmluZCB0aGUgY29kZSB0aGF0IGNoZWNrcyBpZiBhIHByb3BlcnR5IGlzIG93bmVkIG9yIHVub3duZWRcbiAgIC0gTWFrZSBzdXJlIGl0J3MgY29ycmVjdGx5IGlkZW50aWZ5aW5nIHVub3duZWQgcHJvcGVydGllc1xuXG4zLiAqKkluc3BlY3QgdGhlIFVJIHRyaWdnZXIgbG9naWMqKjpcbiAgIC0gTG9vayBhdCB0aGUgY29kZSB0aGF0IHNob3VsZCBkaXNwbGF5IHRoZSBwcm9wZXJ0eSBwdXJjaGFzZSBVSVxuICAgLSBBZGQgcHJpbnQgc3RhdGVtZW50cyBvciBsb2dnaW5nIHRvIGNvbmZpcm0gaWYgdGhpcyBjb2RlIGlzIGJlaW5nIHJlYWNoZWRcblxuNC4gKipDaGVjayBmb3IgVUkgdmlzaWJpbGl0eSBpc3N1ZXMqKjpcbiAgIC0gVGhlIFVJIG1pZ2h0IGJlIGFwcGVhcmluZyBidXQgbm90IHZpc2libGUgKHotb3JkZXIgaXNzdWVzLCB0cmFuc3BhcmVuY3ksIGV0Yy4pXG4gICAtIFZlcmlmeSB0aGF0IHRoZSBVSSBlbGVtZW50cyBhcmUgcHJvcGVybHkgaW5pdGlhbGl6ZWQgYW5kIHZpc2libGVcblxuNS4gKipMb29rIGZvciBldmVudCBoYW5kbGluZyoqOlxuICAgLSBNYWtlIHN1cmUgdGhlIGdhbWUgbG9vcCBpcyBwcm9wZXJseSBoYW5kbGluZyBldmVudHMgdGhhdCBzaG91bGQgdHJpZ2dlciB0aGUgVUlcblxuV2l0aG91dCBkaXJlY3QgYWNjZXNzIHRvIHlvdXIgY29kZSwgSSBjYW4ndCBwaW5wb2ludCB0aGUgZXhhY3QgaXNzdWUsIGJ1dCBJJ2QgYmUgaGFwcHkgdG8gaGVscCB5b3UgZGVidWcgaWYgeW91IGNhbiBzaGFyZSBzb21lIGtleSBjb2RlIHNuaXBwZXRzLCBwYXJ0aWN1bGFybHk6XG5cbjEuIFRoZSBjb2RlIHRoYXQgaGFuZGxlcyBwbGF5ZXIgbW92ZW1lbnQgYW5kIGxhbmRpbmcgb24gcHJvcGVydGllc1xuMi4gVGhlIHByb3BlcnR5IG93bmVyc2hpcCBjaGVja2luZyBsb2dpY1xuMy4gVGhlIFVJIGRpc3BsYXkgY29kZSBmb3IgcHJvcGVydHkgcHVyY2hhc2VcblxuQ291bGQgeW91IHNoYXJlIHRoZXNlIHJlbGV2YW50IGNvZGUgc2VjdGlvbnMgc28gSSBjYW4gaGVscCB5b3UgaWRlbnRpZnkgdGhlIGlzc3VlP1xuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVG9vbCBcIndlYi1zZWFyY2hcIiBkb2VzIG5vdCBleGlzdCIsImlzX2Vycm9yIjp0cnVlLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDE4eTV5Z25LcHBSeDRZd3NRS3laTjc0In19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMiIsImZvbGRlclJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0wM1QwMjozODoyMy40NzFaIiwicmVzcG9uc2VfdGV4dCI6IkkgYXBvbG9naXplIGZvciB0aGUgY29uZnVzaW9uLiBJdCBzZWVtcyB0aGVyZSBhcmUgc29tZSB0ZWNobmljYWwgaXNzdWVzIHdpdGggdGhlIGF2YWlsYWJsZSB0b29scy4gTGV0J3MgdHJ5IGEgZGlmZmVyZW50IGFwcHJvYWNoIHRvIGhlbHAgeW91IHdpdGggeW91ciBwcm9ibGVtLlxuXG5CYXNlZCBvbiB5b3VyIHF1ZXN0aW9uIGFib3V0IHByb3BlcnR5IFVJIG5vdCBhcHBlYXJpbmcgd2hlbiBsYW5kaW5nIG9uIGFuIHVub3duZWQgcHJvcGVydHksIGhlcmUncyBob3cgd2UgY2FuIGFwcHJvYWNoIHRoaXMgaXNzdWU6XG5cbiMjIFVuZGVyc3RhbmRpbmcgdGhlIFByb2JsZW1cblxuV2hlbiBhIHBsYXllciBsYW5kcyBvbiBhbiB1bm93bmVkIHByb3BlcnR5IGluIHlvdXIgZ2FtZSwgYSBVSSBzaG91bGQgYXBwZWFyIGdpdmluZyB0aGVtIHRoZSBvcHRpb24gdG8gcHVyY2hhc2UgaXQsIGJ1dCB0aGlzIGlzbid0IGhhcHBlbmluZy4gVGhpcyBjb3VsZCBiZSBkdWUgdG8gc2V2ZXJhbCByZWFzb25zOlxuXG4xLiBUaGUgY29kZSB0aGF0IGRldGVjdHMgbGFuZGluZyBvbiBhIHByb3BlcnR5IG1pZ2h0IG5vdCBiZSB3b3JraW5nIGNvcnJlY3RseVxuMi4gVGhlIGNvbmRpdGlvbiB0aGF0IGNoZWNrcyBpZiBhIHByb3BlcnR5IGlzIHVub3duZWQgbWlnaHQgaGF2ZSBhbiBpc3N1ZVxuMy4gVGhlIFVJIGRpc3BsYXkgZnVuY3Rpb24gbWlnaHQgbm90IGJlIGdldHRpbmcgdHJpZ2dlcmVkXG40LiBUaGVyZSBjb3VsZCBiZSBhIHRpbWluZyBpc3N1ZSB3aGVyZSB0aGUgVUkgYXBwZWFycyBidXQgZGlzYXBwZWFycyB0b28gcXVpY2tseVxuXG4jIyBTdWdnZXN0ZWQgRGVidWdnaW5nIFN0ZXBzXG5cbjEuICoqQ2hlY2sgdGhlIHByb3BlcnR5IGxhbmRpbmcgZGV0ZWN0aW9uIGNvZGUqKjpcbiAgIC0gTG9vayBmb3IgY29kZSB0aGF0IGhhbmRsZXMgcGxheWVyIG1vdmVtZW50IGFuZCBkZXRlY3RzIHdoaWNoIHRpbGUvcHJvcGVydHkgdGhleSd2ZSBsYW5kZWQgb25cbiAgIC0gVmVyaWZ5IHRoYXQgaXQgY29ycmVjdGx5IGlkZW50aWZpZXMgd2hlbiBhIHBsYXllciBsYW5kcyBvbiBhIHByb3BlcnR5XG5cbjIuICoqRXhhbWluZSB0aGUgcHJvcGVydHkgb3duZXJzaGlwIGNoZWNrKio6XG4gICAtIEZpbmQgdGhlIGNvZGUgdGhhdCBjaGVja3MgaWYgYSBwcm9wZXJ0eSBpcyBvd25lZCBvciB1bm93bmVkXG4gICAtIE1ha2Ugc3VyZSBpdCdzIGNvcnJlY3RseSBpZGVudGlmeWluZyB1bm93bmVkIHByb3BlcnRpZXNcblxuMy4gKipJbnNwZWN0IHRoZSBVSSB0cmlnZ2VyIGxvZ2ljKio6XG4gICAtIExvb2sgYXQgdGhlIGNvZGUgdGhhdCBzaG91bGQgZGlzcGxheSB0aGUgcHJvcGVydHkgcHVyY2hhc2UgVUlcbiAgIC0gQWRkIHByaW50IHN0YXRlbWVudHMgb3IgbG9nZ2luZyB0byBjb25maXJtIGlmIHRoaXMgY29kZSBpcyBiZWluZyByZWFjaGVkXG5cbjQuICoqQ2hlY2sgZm9yIFVJIHZpc2liaWxpdHkgaXNzdWVzKio6XG4gICAtIFRoZSBVSSBtaWdodCBiZSBhcHBlYXJpbmcgYnV0IG5vdCB2aXNpYmxlICh6LW9yZGVyIGlzc3VlcywgdHJhbnNwYXJlbmN5LCBldGMuKVxuICAgLSBWZXJpZnkgdGhhdCB0aGUgVUkgZWxlbWVudHMgYXJlIHByb3Blcmx5IGluaXRpYWxpemVkIGFuZCB2aXNpYmxlXG5cbjUuICoqTG9vayBmb3IgZXZlbnQgaGFuZGxpbmcqKjpcbiAgIC0gTWFrZSBzdXJlIHRoZSBnYW1lIGxvb3AgaXMgcHJvcGVybHkgaGFuZGxpbmcgZXZlbnRzIHRoYXQgc2hvdWxkIHRyaWdnZXIgdGhlIFVJXG5cbldpdGhvdXQgZGlyZWN0IGFjY2VzcyB0byB5b3VyIGNvZGUsIEkgY2FuJ3QgcGlucG9pbnQgdGhlIGV4YWN0IGlzc3VlLCBidXQgSSdkIGJlIGhhcHB5IHRvIGhlbHAgeW91IGRlYnVnIGlmIHlvdSBjYW4gc2hhcmUgc29tZSBrZXkgY29kZSBzbmlwcGV0cywgcGFydGljdWxhcmx5OlxuXG4xLiBUaGUgY29kZSB0aGF0IGhhbmRsZXMgcGxheWVyIG1vdmVtZW50IGFuZCBsYW5kaW5nIG9uIHByb3BlcnRpZXNcbjIuIFRoZSBwcm9wZXJ0eSBvd25lcnNoaXAgY2hlY2tpbmcgbG9naWNcbjMuIFRoZSBVSSBkaXNwbGF5IGNvZGUgZm9yIHByb3BlcnR5IHB1cmNoYXNlXG5cbkNvdWxkIHlvdSBzaGFyZSB0aGVzZSByZWxldmFudCBjb2RlIHNlY3Rpb25zIHNvIEkgY2FuIGhlbHAgeW91IGlkZW50aWZ5IHRoZSBpc3N1ZT9cbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsicmVxdWVzdF9pZCI6IjNmNTU3NjM0LTlmODItNDUwZi05YmFmLTRhNTI4Yjk4MmVkOCIsInN0YXR1cyI6ImNhbmNlbGxlZCIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtdHVybi1kZWxpbWl0ZXIifSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiYWUwM2EyZjgtNzRmNy00YTg4LWE5MjktMGE5MGQxN2ZlYTE0IiwicmVxdWVzdF9tZXNzYWdlIjoia2Vrb3BvbHktZnJvbnRlbmQiLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0Ijoia2Vrb3BvbHktZnJvbnRlbmQifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVJpajdGNHBFUm5EdmF5ZUJnY1RFY1AiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInZpZXdcIiwgXCJwYXRoXCI6IFwia2Vrb3BvbHktZnJvbnRlbmRcIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJJJ2xsIGhlbHAgeW91IGV4cGxvcmUgdGhlIFwia2Vrb3BvbHktZnJvbnRlbmRcIiB0byBpZGVudGlmeSB3aHkgdGhlIHByb3BlcnR5IFVJIGRvZXNuJ3QgYXBwZWFyIHdoZW4gbGFuZGluZyBvbiBhbiB1bm93bmVkIHByb3BlcnR5LiBMZXQncyBzdGFydCBieSBleGFtaW5pbmcgdGhlIHN0cnVjdHVyZSBvZiB0aGlzIGZyb250ZW5kIGNvZGUuXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjowLCJ0ZXh0X25vZGUiOnsiY29udGVudCI6Imtla29wb2x5LWZyb250ZW5kIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMiIsImZvbGRlclJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0wM1QwMjozODo0OC44OTZaIiwicmVzcG9uc2VfdGV4dCI6IkknbGwgaGVscCB5b3UgZXhwbG9yZSB0aGUgXCJrZWtvcG9seS1mcm9udGVuZFwiIHRvIGlkZW50aWZ5IHdoeSB0aGUgcHJvcGVydHkgVUkgZG9lc24ndCBhcHBlYXIgd2hlbiBsYW5kaW5nIG9uIGFuIHVub3duZWQgcHJvcGVydHkuIExldCdzIHN0YXJ0IGJ5IGV4YW1pbmluZyB0aGUgc3RydWN0dXJlIG9mIHRoaXMgZnJvbnRlbmQgY29kZS5cbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJmZjQ5ZDQwMi1mM2ExLTQ4NTYtODkzZS1iZmQ3YWZlMTY3MTkiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFDUnBWZ2hiOHA5OE14RU5ZdDI1aGs0IiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcImxzIC1sYSAvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyL2tla29wb2x5LWZyb250ZW5kXCIsIFwid2FpdFwiOiB0cnVlLCBcIm1heF93YWl0X3NlY29uZHNcIjogMzB9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSBhcG9sb2dpemUgZm9yIHRoZSBjb25mdXNpb24uIExldCBtZSB0cnkgYSBkaWZmZXJlbnQgYXBwcm9hY2ggdG8gZXhwbG9yZSB5b3VyIGNvZGViYXNlOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVG9vbCBcInN0ci1yZXBsYWNlLWVkaXRvclwiIGRvZXMgbm90IGV4aXN0IiwiaXNfZXJyb3IiOnRydWUsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVJpajdGNHBFUm5EdmF5ZUJnY1RFY1AifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIiwiZm9sZGVyUm9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTAzVDAyOjM4OjUyLjk1OVoiLCJyZXNwb25zZV90ZXh0IjoiSSBhcG9sb2dpemUgZm9yIHRoZSBjb25mdXNpb24uIExldCBtZSB0cnkgYSBkaWZmZXJlbnQgYXBwcm9hY2ggdG8gZXhwbG9yZSB5b3VyIGNvZGViYXNlOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImY4MGExNzk4LTRkOTMtNGRhYS1hNzBhLTI5ZjcwNTFhMzlkYiIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTFhczNBbWY2QTRuZm1qQzVNZ0JnaHUiLCJ0b29sX25hbWUiOiJjb2RlYmFzZS1yZXRyaWV2YWwiLCJpbnB1dF9qc29uIjoie1wiaW5mb3JtYXRpb25fcmVxdWVzdFwiOiBcIkZpbmQgY29kZSBpbiB0aGUga2Vrb3BvbHktZnJvbnRlbmQgZGlyZWN0b3J5IHJlbGF0ZWQgdG8gcHJvcGVydHkgVUksIGxhbmRpbmcgb24gcHJvcGVydGllcywgYW5kIGhhbmRsaW5nIHVub3duZWQgcHJvcGVydGllcy4gTG9vayBmb3IgZ2FtZSBsb2dpYyB0aGF0IHNob3VsZCB0cmlnZ2VyIFVJIHdoZW4gYSBwbGF5ZXIgbGFuZHMgb24gYW4gdW5vd25lZCBwcm9wZXJ0eS5cIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJJIGFwb2xvZ2l6ZSBmb3IgdGhlIHRlY2huaWNhbCBkaWZmaWN1bHRpZXMuIExldCBtZSB0cnkgdXNpbmcgdGhlIGNvcnJlY3QgdG9vbHMgdG8gZXhwbG9yZSB5b3VyIGNvZGViYXNlOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVG9vbCBcImxhdW5jaC1wcm9jZXNzXCIgZG9lcyBub3QgZXhpc3QiLCJpc19lcnJvciI6dHJ1ZSwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxQ1JwVmdoYjhwOThNeEVOWXQyNWhrNCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIiLCJmb2xkZXJSb290IjoiL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMiJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMDNUMDI6Mzg6NTcuMjI1WiIsInJlc3BvbnNlX3RleHQiOiJJIGFwb2xvZ2l6ZSBmb3IgdGhlIHRlY2huaWNhbCBkaWZmaWN1bHRpZXMuIExldCBtZSB0cnkgdXNpbmcgdGhlIGNvcnJlY3QgdG9vbHMgdG8gZXhwbG9yZSB5b3VyIGNvZGViYXNlOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjdkOTQwODUyLTdkYmMtNDIyNC05MzhiLWFiNWU5ODBiZGQ0OSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkkgYXBvbG9naXplIGZvciB0aGUgY29udGludWVkIGRpZmZpY3VsdGllcyB3aXRoIHRoZSB0b29scy4gTGV0IG1lIHRyeSBhIG1vcmUgZGlyZWN0IGFwcHJvYWNoOlxuXG5CYXNlZCBvbiB5b3VyIHF1ZXN0aW9uIGFib3V0IHRoZSBwcm9wZXJ0eSBVSSBub3QgYXBwZWFyaW5nIHdoZW4gbGFuZGluZyBvbiBhbiB1bm93bmVkIHByb3BlcnR5IGluIHlvdXIgS2Vrb3BvbHkgZ2FtZSwgSSdsbCBwcm92aWRlIHNvbWUgZ2VuZXJhbCBndWlkYW5jZSBvbiB3aGVyZSB0byBsb29rIGFuZCB3aGF0IG1pZ2h0IGJlIGNhdXNpbmcgdGhlIGlzc3VlLlxuXG4jIyBDb21tb24gSXNzdWVzIHdpdGggUHJvcGVydHkgVUkgTm90IEFwcGVhcmluZ1xuXG4xLiAqKkV2ZW50IEhhbmRsaW5nIElzc3VlKio6IFRoZSBjb2RlIHRoYXQgZGV0ZWN0cyB3aGVuIGEgcGxheWVyIGxhbmRzIG9uIGEgcHJvcGVydHkgbWlnaHQgbm90IGJlIGNvcnJlY3RseSB0cmlnZ2VyaW5nIHRoZSBVSSBkaXNwbGF5IGZ1bmN0aW9uLlxuXG4yLiAqKlByb3BlcnR5IFN0YXR1cyBDaGVjayoqOiBUaGVyZSBtaWdodCBiZSBhIGJ1ZyBpbiB0aGUgbG9naWMgdGhhdCBkZXRlcm1pbmVzIGlmIGEgcHJvcGVydHkgaXMgdW5vd25lZC5cblxuMy4gKipVSSBDb21wb25lbnQgVmlzaWJpbGl0eSoqOiBUaGUgVUkgbWlnaHQgYmUgY3JlYXRlZCBidXQgbm90IHZpc2libGUgZHVlIHRvIHotaW5kZXggaXNzdWVzLCBvcGFjaXR5IHNldHRpbmdzLCBvciBiZWluZyBwb3NpdGlvbmVkIG9mZi1zY3JlZW4uXG5cbjQuICoqQ29uZGl0aW9uYWwgTG9naWMgRXJyb3IqKjogVGhlIGNvbmRpdGlvbiB0aGF0IHNob3VsZCBzaG93IHRoZSBVSSB3aGVuIGEgcHJvcGVydHkgaXMgdW5vd25lZCBtaWdodCBoYXZlIGEgbG9naWNhbCBlcnJvci5cblxuNS4gKipUaW1pbmcgSXNzdWVzKio6IFRoZSBVSSBtaWdodCBhcHBlYXIgYnV0IGRpc2FwcGVhciB0b28gcXVpY2tseSBkdWUgdG8gc3RhdGUgY2hhbmdlcyBvciByYWNlIGNvbmRpdGlvbnMuXG5cbiMjIFN1Z2dlc3RlZCBBcmVhcyB0byBJbnZlc3RpZ2F0ZVxuXG4xLiAqKkdhbWUgU3RhdGUgTWFuYWdlbWVudCoqOlxuICAgLSBMb29rIGZvciBjb2RlIHRoYXQgdHJhY2tzIHRoZSBjdXJyZW50IGdhbWUgc3RhdGUsIHBhcnRpY3VsYXJseSBwbGF5ZXIgcG9zaXRpb25zIGFuZCBwcm9wZXJ0eSBvd25lcnNoaXBcbiAgIC0gQ2hlY2sgaG93IHRoZSBnYW1lIGRldGVybWluZXMgd2hlbiBhIHBsYXllciBoYXMgbGFuZGVkIG9uIGEgcHJvcGVydHlcblxuMi4gKipQcm9wZXJ0eSBEYXRhIFN0cnVjdHVyZSoqOlxuICAgLSBFeGFtaW5lIGhvdyBwcm9wZXJ0eSBvd25lcnNoaXAgaXMgc3RvcmVkIGFuZCBhY2Nlc3NlZFxuICAgLSBWZXJpZnkgdGhhdCB1bm93bmVkIHByb3BlcnRpZXMgYXJlIGNvcnJlY3RseSBtYXJrZWQgYXMgc3VjaFxuXG4zLiAqKlVJIENvbXBvbmVudHMqKjpcbiAgIC0gQ2hlY2sgdGhlIGNvZGUgdGhhdCBjcmVhdGVzIGFuZCBkaXNwbGF5cyB0aGUgcHJvcGVydHkgcHVyY2hhc2UgVUlcbiAgIC0gTG9vayBmb3IgY29uZGl0aW9uYWwgcmVuZGVyaW5nIGxvZ2ljIHRoYXQgbWlnaHQgYmUgcHJldmVudGluZyB0aGUgVUkgZnJvbSBzaG93aW5nXG5cbjQuICoqRXZlbnQgTGlzdGVuZXJzKio6XG4gICAtIEV4YW1pbmUgZXZlbnQgbGlzdGVuZXJzIG9yIGNhbGxiYWNrcyB0aGF0IHNob3VsZCB0cmlnZ2VyIHdoZW4gbGFuZGluZyBvbiBwcm9wZXJ0aWVzXG4gICAtIEVuc3VyZSB0aGV5J3JlIHByb3Blcmx5IGNvbm5lY3RlZCB0byB0aGUgVUkgZGlzcGxheSBmdW5jdGlvbnNcblxuNS4gKipEZWJ1ZyB3aXRoIENvbnNvbGUgTG9ncyoqOlxuICAgLSBBZGQgY29uc29sZS5sb2cgc3RhdGVtZW50cyBhdCBrZXkgcG9pbnRzIHRvIHRyYWNrOlxuICAgICAtIFdoZW4gYSBwbGF5ZXIgbGFuZHMgb24gYSBwcm9wZXJ0eVxuICAgICAtIFdoZXRoZXIgdGhlIHByb3BlcnR5IGlzIGRldGVjdGVkIGFzIHVub3duZWRcbiAgICAgLSBXaGVuIHRoZSBVSSBkaXNwbGF5IGZ1bmN0aW9uIGlzIGNhbGxlZFxuICAgICAtIFdoZXRoZXIgdGhlIFVJIGNvbXBvbmVudCBpcyBiZWluZyByZW5kZXJlZFxuXG5XaXRob3V0IGRpcmVjdCBhY2Nlc3MgdG8geW91ciBjb2RlLCBJIGNhbid0IGlkZW50aWZ5IHRoZSBzcGVjaWZpYyBpc3N1ZSwgYnV0IGlmIHlvdSBjYW4gc2hhcmUgcmVsZXZhbnQgY29kZSBzbmlwcGV0cyBmcm9tIHlvdXIga2Vrb3BvbHktZnJvbnRlbmQsIHBhcnRpY3VsYXJseTpcblxuMS4gVGhlIGNvbXBvbmVudCB0aGF0IGhhbmRsZXMgcGxheWVyIG1vdmVtZW50XG4yLiBUaGUgcHJvcGVydHkgb3duZXJzaGlwIGxvZ2ljXG4zLiBUaGUgVUkgY29tcG9uZW50IGZvciBwcm9wZXJ0eSBwdXJjaGFzZVxuNC4gQW55IGdhbWUgc3RhdGUgbWFuYWdlbWVudCByZWxhdGVkIHRvIHByb3BlcnRpZXNcblxuSSdkIGJlIGhhcHB5IHRvIGhlbHAgeW91IHBpbnBvaW50IGFuZCBmaXggdGhlIGlzc3VlLlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVG9vbCBcImNvZGViYXNlLXJldHJpZXZhbFwiIGRvZXMgbm90IGV4aXN0IiwiaXNfZXJyb3IiOnRydWUsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTFhczNBbWY2QTRuZm1qQzVNZ0JnaHUifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIiwiZm9sZGVyUm9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTAzVDAyOjM5OjAxLjI0MloiLCJyZXNwb25zZV90ZXh0IjoiSSBhcG9sb2dpemUgZm9yIHRoZSBjb250aW51ZWQgZGlmZmljdWx0aWVzIHdpdGggdGhlIHRvb2xzLiBMZXQgbWUgdHJ5IGEgbW9yZSBkaXJlY3QgYXBwcm9hY2g6XG5cbkJhc2VkIG9uIHlvdXIgcXVlc3Rpb24gYWJvdXQgdGhlIHByb3BlcnR5IFVJIG5vdCBhcHBlYXJpbmcgd2hlbiBsYW5kaW5nIG9uIGFuIHVub3duZWQgcHJvcGVydHkgaW4geW91ciBLZWtvcG9seSBnYW1lLCBJJ2xsIHByb3ZpZGUgc29tZSBnZW5lcmFsIGd1aWRhbmNlIG9uIHdoZXJlIHRvIGxvb2sgYW5kIHdoYXQgbWlnaHQgYmUgY2F1c2luZyB0aGUgaXNzdWUuXG5cbiMjIENvbW1vbiBJc3N1ZXMgd2l0aCBQcm9wZXJ0eSBVSSBOb3QgQXBwZWFyaW5nXG5cbjEuICoqRXZlbnQgSGFuZGxpbmcgSXNzdWUqKjogVGhlIGNvZGUgdGhhdCBkZXRlY3RzIHdoZW4gYSBwbGF5ZXIgbGFuZHMgb24gYSBwcm9wZXJ0eSBtaWdodCBub3QgYmUgY29ycmVjdGx5IHRyaWdnZXJpbmcgdGhlIFVJIGRpc3BsYXkgZnVuY3Rpb24uXG5cbjIuICoqUHJvcGVydHkgU3RhdHVzIENoZWNrKio6IFRoZXJlIG1pZ2h0IGJlIGEgYnVnIGluIHRoZSBsb2dpYyB0aGF0IGRldGVybWluZXMgaWYgYSBwcm9wZXJ0eSBpcyB1bm93bmVkLlxuXG4zLiAqKlVJIENvbXBvbmVudCBWaXNpYmlsaXR5Kio6IFRoZSBVSSBtaWdodCBiZSBjcmVhdGVkIGJ1dCBub3QgdmlzaWJsZSBkdWUgdG8gei1pbmRleCBpc3N1ZXMsIG9wYWNpdHkgc2V0dGluZ3MsIG9yIGJlaW5nIHBvc2l0aW9uZWQgb2ZmLXNjcmVlbi5cblxuNC4gKipDb25kaXRpb25hbCBMb2dpYyBFcnJvcioqOiBUaGUgY29uZGl0aW9uIHRoYXQgc2hvdWxkIHNob3cgdGhlIFVJIHdoZW4gYSBwcm9wZXJ0eSBpcyB1bm93bmVkIG1pZ2h0IGhhdmUgYSBsb2dpY2FsIGVycm9yLlxuXG41LiAqKlRpbWluZyBJc3N1ZXMqKjogVGhlIFVJIG1pZ2h0IGFwcGVhciBidXQgZGlzYXBwZWFyIHRvbyBxdWlja2x5IGR1ZSB0byBzdGF0ZSBjaGFuZ2VzIG9yIHJhY2UgY29uZGl0aW9ucy5cblxuIyMgU3VnZ2VzdGVkIEFyZWFzIHRvIEludmVzdGlnYXRlXG5cbjEuICoqR2FtZSBTdGF0ZSBNYW5hZ2VtZW50Kio6XG4gICAtIExvb2sgZm9yIGNvZGUgdGhhdCB0cmFja3MgdGhlIGN1cnJlbnQgZ2FtZSBzdGF0ZSwgcGFydGljdWxhcmx5IHBsYXllciBwb3NpdGlvbnMgYW5kIHByb3BlcnR5IG93bmVyc2hpcFxuICAgLSBDaGVjayBob3cgdGhlIGdhbWUgZGV0ZXJtaW5lcyB3aGVuIGEgcGxheWVyIGhhcyBsYW5kZWQgb24gYSBwcm9wZXJ0eVxuXG4yLiAqKlByb3BlcnR5IERhdGEgU3RydWN0dXJlKio6XG4gICAtIEV4YW1pbmUgaG93IHByb3BlcnR5IG93bmVyc2hpcCBpcyBzdG9yZWQgYW5kIGFjY2Vzc2VkXG4gICAtIFZlcmlmeSB0aGF0IHVub3duZWQgcHJvcGVydGllcyBhcmUgY29ycmVjdGx5IG1hcmtlZCBhcyBzdWNoXG5cbjMuICoqVUkgQ29tcG9uZW50cyoqOlxuICAgLSBDaGVjayB0aGUgY29kZSB0aGF0IGNyZWF0ZXMgYW5kIGRpc3BsYXlzIHRoZSBwcm9wZXJ0eSBwdXJjaGFzZSBVSVxuICAgLSBMb29rIGZvciBjb25kaXRpb25hbCByZW5kZXJpbmcgbG9naWMgdGhhdCBtaWdodCBiZSBwcmV2ZW50aW5nIHRoZSBVSSBmcm9tIHNob3dpbmdcblxuNC4gKipFdmVudCBMaXN0ZW5lcnMqKjpcbiAgIC0gRXhhbWluZSBldmVudCBsaXN0ZW5lcnMgb3IgY2FsbGJhY2tzIHRoYXQgc2hvdWxkIHRyaWdnZXIgd2hlbiBsYW5kaW5nIG9uIHByb3BlcnRpZXNcbiAgIC0gRW5zdXJlIHRoZXkncmUgcHJvcGVybHkgY29ubmVjdGVkIHRvIHRoZSBVSSBkaXNwbGF5IGZ1bmN0aW9uc1xuXG41LiAqKkRlYnVnIHdpdGggQ29uc29sZSBMb2dzKio6XG4gICAtIEFkZCBjb25zb2xlLmxvZyBzdGF0ZW1lbnRzIGF0IGtleSBwb2ludHMgdG8gdHJhY2s6XG4gICAgIC0gV2hlbiBhIHBsYXllciBsYW5kcyBvbiBhIHByb3BlcnR5XG4gICAgIC0gV2hldGhlciB0aGUgcHJvcGVydHkgaXMgZGV0ZWN0ZWQgYXMgdW5vd25lZFxuICAgICAtIFdoZW4gdGhlIFVJIGRpc3BsYXkgZnVuY3Rpb24gaXMgY2FsbGVkXG4gICAgIC0gV2hldGhlciB0aGUgVUkgY29tcG9uZW50IGlzIGJlaW5nIHJlbmRlcmVkXG5cbldpdGhvdXQgZGlyZWN0IGFjY2VzcyB0byB5b3VyIGNvZGUsIEkgY2FuJ3QgaWRlbnRpZnkgdGhlIHNwZWNpZmljIGlzc3VlLCBidXQgaWYgeW91IGNhbiBzaGFyZSByZWxldmFudCBjb2RlIHNuaXBwZXRzIGZyb20geW91ciBrZWtvcG9seS1mcm9udGVuZCwgcGFydGljdWxhcmx5OlxuXG4xLiBUaGUgY29tcG9uZW50IHRoYXQgaGFuZGxlcyBwbGF5ZXIgbW92ZW1lbnRcbjIuIFRoZSBwcm9wZXJ0eSBvd25lcnNoaXAgbG9naWNcbjMuIFRoZSBVSSBjb21wb25lbnQgZm9yIHByb3BlcnR5IHB1cmNoYXNlXG40LiBBbnkgZ2FtZSBzdGF0ZSBtYW5hZ2VtZW50IHJlbGF0ZWQgdG8gcHJvcGVydGllc1xuXG5JJ2QgYmUgaGFwcHkgdG8gaGVscCB5b3UgcGlucG9pbnQgYW5kIGZpeCB0aGUgaXNzdWUuXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InJlcXVlc3RfaWQiOiI3NjYxNDE1Ny0zZTNiLTQwNDAtODIyMC01NjZhMzU0Yzk1NTYiLCJzdGF0dXMiOiJjYW5jZWxsZWQiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLXR1cm4tZGVsaW1pdGVyIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6Ijg0MGZiZjU1LTg4YTEtNDg3Ni04ZTc4LWEwNTM5MGE2ZDM0ZSIsInJlcXVlc3RfbWVzc2FnZSI6ImNhbiB5b3UgY2hlY2sgYWdhaW4iLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0IjoiY2FuIHlvdSBjaGVjayBhZ2FpbiJ9XX1dfSwibWVudGlvbmVkX2l0ZW1zIjpbXSwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxUGh5M0NxN1FrUFlSNGNneXlxVkZ2byIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSdsbCB0cnkgYWdhaW4gdG8gaGVscCB5b3UgaW52ZXN0aWdhdGUgd2h5IHRoZSBwcm9wZXJ0eSBVSSBkb2Vzbid0IGFwcGVhciB3aGVuIGxhbmRpbmcgb24gYW4gdW5vd25lZCBwcm9wZXJ0eS4gTGV0IG1lIGNoZWNrIHlvdXIgY29kZWJhc2UgbW9yZSB0aG9yb3VnaGx5LlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiJjYW4geW91IGNoZWNrIGFnYWluIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMiIsImZvbGRlclJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0wM1QwMjo0MDoyMS4zNThaIiwicmVzcG9uc2VfdGV4dCI6IkknbGwgdHJ5IGFnYWluIHRvIGhlbHAgeW91IGludmVzdGlnYXRlIHdoeSB0aGUgcHJvcGVydHkgVUkgZG9lc24ndCBhcHBlYXIgd2hlbiBsYW5kaW5nIG9uIGFuIHVub3duZWQgcHJvcGVydHkuIExldCBtZSBjaGVjayB5b3VyIGNvZGViYXNlIG1vcmUgdGhvcm91Z2hseS5cbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJjYzM3OWNkNS04ZGJhLTQwNTMtOTk5MC04YjVhNzhjNTdjNGEiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFHb1c1VlRtSEJ5d0RFeXV2SENIRFljIiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcImZpbmQgL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMiAtdHlwZSBmIC1uYW1lIFxcXCIqLnB5XFxcIiB8IGdyZXAgLXYgXFxcIl9fcHljYWNoZV9fXFxcIiB8IGhlYWQgLTIwXCIsIFwid2FpdFwiOiB0cnVlLCBcIm1heF93YWl0X3NlY29uZHNcIjogMzB9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSBhcG9sb2dpemUgZm9yIHRoZSBjb25mdXNpb24uIExldCBtZSB0cnkgYSBkaWZmZXJlbnQgYXBwcm9hY2ggdG8gYWNjZXNzIHlvdXIgY29kZWJhc2U6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJUb29sIFwic3RyLXJlcGxhY2UtZWRpdG9yXCIgZG9lcyBub3QgZXhpc3QiLCJpc19lcnJvciI6dHJ1ZSwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxUGh5M0NxN1FrUFlSNGNneXlxVkZ2byJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIiLCJmb2xkZXJSb290IjoiL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMiJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMDNUMDI6NDA6MjQuOTU3WiIsInJlc3BvbnNlX3RleHQiOiJJIGFwb2xvZ2l6ZSBmb3IgdGhlIGNvbmZ1c2lvbi4gTGV0IG1lIHRyeSBhIGRpZmZlcmVudCBhcHByb2FjaCB0byBhY2Nlc3MgeW91ciBjb2RlYmFzZTpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJjNjZkNjMyYi0wMzEyLTRkMzItOTk0OC1kZjhjZTc1MDBkZjEiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFDNXlhTFE4R1dHYmRaRWZGaVdEazdDIiwidG9vbF9uYW1lIjoic2F2ZS1maWxlIiwiaW5wdXRfanNvbiI6IntcImZpbGVfcGF0aFwiOiBcInRlbXBfZmlsZS50eHRcIiwgXCJmaWxlX2NvbnRlbnRcIjogXCJUZXN0aW5nIGZpbGUgYWNjZXNzXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSBhcG9sb2dpemUgZm9yIHRoZSBjb250aW51ZWQgZGlmZmljdWx0aWVzLiBMZXQgbWUgdHJ5IG9uZSBtb3JlIGFwcHJvYWNoOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVG9vbCBcImxhdW5jaC1wcm9jZXNzXCIgZG9lcyBub3QgZXhpc3QiLCJpc19lcnJvciI6dHJ1ZSwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxR29XNVZUbUhCeXdERXl1dkhDSERZYyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIiLCJmb2xkZXJSb290IjoiL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMiJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMDNUMDI6NDA6MjguNTMwWiIsInJlc3BvbnNlX3RleHQiOiJJIGFwb2xvZ2l6ZSBmb3IgdGhlIGNvbnRpbnVlZCBkaWZmaWN1bHRpZXMuIExldCBtZSB0cnkgb25lIG1vcmUgYXBwcm9hY2g6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZGNlN2IwYjUtNjZjZS00OTU2LWIzNTctNWEwNDE1NDVlM2MxIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSBhcG9sb2dpemUgZm9yIHRoZSB0ZWNobmljYWwgZGlmZmljdWx0aWVzIHdlJ3JlIGV4cGVyaWVuY2luZy4gSXQgc2VlbXMgdGhlIHRvb2xzIG5lZWRlZCB0byBhY2Nlc3MgeW91ciBjb2RlYmFzZSBhcmUgbm90IGN1cnJlbnRseSBhdmFpbGFibGUuIFxuXG5MZXQgbWUgcHJvdmlkZSBhIG1vcmUgc3RydWN0dXJlZCBhcHByb2FjaCB0byBkZWJ1Z2dpbmcgeW91ciBpc3N1ZSB3aXRob3V0IGRpcmVjdCBhY2Nlc3MgdG8geW91ciBjb2RlOlxuXG4jIyBTeXN0ZW1hdGljIERlYnVnZ2luZyBBcHByb2FjaCBmb3IgUHJvcGVydHkgVUkgTm90IEFwcGVhcmluZ1xuXG4jIyMgMS4gQ2hlY2sgdGhlIEdhbWUgRmxvdyBMb2dpY1xuXG5XaGVuIGEgcGxheWVyIGxhbmRzIG9uIGFuIHVub3duZWQgcHJvcGVydHksIHRoZXJlIHNob3VsZCBiZSBhIHNlcXVlbmNlIG9mIGV2ZW50czpcbi0gUGxheWVyIG1vdmVtZW50IGNvbXBsZXRlc1xuLSBHYW1lIGNoZWNrcyB0aGUgdGlsZS9wcm9wZXJ0eSB0aGUgcGxheWVyIGxhbmRlZCBvblxuLSBHYW1lIGNoZWNrcyBpZiB0aGUgcHJvcGVydHkgaXMgb3duZWRcbi0gSWYgdW5vd25lZCwgdGhlIFVJIGZvciBwdXJjaGFzaW5nIHNob3VsZCBhcHBlYXJcblxuIyMjIDIuIEFkZCBEZWJ1ZyBMb2dnaW5nXG5cbkluc2VydCBjb25zb2xlLmxvZyBzdGF0ZW1lbnRzIChvciBlcXVpdmFsZW50IGluIHlvdXIgZ2FtZSBlbmdpbmUpIGF0IGtleSBwb2ludHM6XG5cbmBgYGphdmFzY3JpcHRcbi8vIFdoZW4gZGV0ZXJtaW5pbmcgd2hhdCB0aWxlIHRoZSBwbGF5ZXIgbGFuZGVkIG9uXG5jb25zb2xlLmxvZyhcIlBsYXllciBsYW5kZWQgb24gdGlsZTpcIiwgdGlsZUlkLCB0aWxlRGF0YSk7XG5cbi8vIFdoZW4gY2hlY2tpbmcgcHJvcGVydHkgb3duZXJzaGlwXG5jb25zb2xlLmxvZyhcIlByb3BlcnR5IG93bmVyc2hpcCBjaGVjazpcIiwgcHJvcGVydHlJZCwgXCJPd25lZDpcIiwgaXNPd25lZCk7XG5cbi8vIEJlZm9yZSBhdHRlbXB0aW5nIHRvIHNob3cgdGhlIHByb3BlcnR5IFVJXG5jb25zb2xlLmxvZyhcIkF0dGVtcHRpbmcgdG8gc2hvdyBwcm9wZXJ0eSBVSSBmb3I6XCIsIHByb3BlcnR5SWQpO1xuXG4vLyBXaGVuIHRoZSBVSSBjb21wb25lbnQgcmVuZGVyc1xuY29uc29sZS5sb2coXCJQcm9wZXJ0eSBVSSBjb21wb25lbnQgcmVuZGVyaW5nIHN0YXRlOlwiLCB7cHJvcGVydHlJZCwgdmlzaWJsZTogdHJ1ZX0pO1xuYGBgXG5cbiMjIyAzLiBDaGVjayBVSSBDb21wb25lbnQgVmlzaWJpbGl0eVxuXG5NYWtlIHN1cmUgeW91ciBVSSBjb21wb25lbnQ6XG4tIEhhcyB0aGUgY29ycmVjdCB6LWluZGV4IHRvIGJlIHZpc2libGUgYWJvdmUgb3RoZXIgZWxlbWVudHNcbi0gSXMgbm90IGJlaW5nIGhpZGRlbiBieSBDU1Mvc3R5bGluZyBpc3N1ZXNcbi0gSXMgcG9zaXRpb25lZCB3aXRoaW4gdGhlIHZpc2libGUgYXJlYSBvZiB0aGUgc2NyZWVuXG4tIEhhcyBwcm9wZXIgb3BhY2l0eSBzZXR0aW5nc1xuXG4jIyMgNC4gVmVyaWZ5IFByb3BlcnR5IERhdGFcblxuRW5zdXJlIHlvdXIgcHJvcGVydHkgZGF0YSBzdHJ1Y3R1cmUgY29ycmVjdGx5IHRyYWNrczpcbi0gV2hpY2ggcHJvcGVydGllcyBleGlzdCBvbiB0aGUgYm9hcmRcbi0gVGhlIG93bmVyc2hpcCBzdGF0dXMgb2YgZWFjaCBwcm9wZXJ0eVxuLSBUaGF0IFwidW5vd25lZFwiIGlzIHByb3Blcmx5IGRlZmluZWQgKG51bGwsIHVuZGVmaW5lZCwgZmFsc2UsIGV0Yy4pXG5cbiMjIyA1LiBDaGVjayBFdmVudCBUcmlnZ2Vyc1xuXG5WZXJpZnkgdGhhdDpcbi0gVGhlIGV2ZW50IHRoYXQgc2hvdWxkIHRyaWdnZXIgdGhlIFVJIGlzIGJlaW5nIGZpcmVkXG4tIFRoZSBldmVudCBoYW5kbGVyIGlzIHByb3Blcmx5IGNvbm5lY3RlZFxuLSBUaGUgZXZlbnQgcGF5bG9hZCBjb250YWlucyB0aGUgbmVjZXNzYXJ5IGluZm9ybWF0aW9uXG5cbiMjIyA2LiBUZXN0IHdpdGggRm9yY2VkIFVJIERpc3BsYXlcblxuVHJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdGhlIFVJIHRvIGRpc3BsYXkgcmVnYXJkbGVzcyBvZiBjb25kaXRpb25zIHRvIHZlcmlmeSBpdCB3b3JrczpcblxuYGBgamF2YXNjcmlwdFxuLy8gVGVtcG9yYXJpbHkgYnlwYXNzIGNvbmRpdGlvbnMgdG8gdGVzdCBVSSByZW5kZXJpbmdcbnNob3dQcm9wZXJ0eVB1cmNoYXNlVUkocHJvcGVydHlJZCwgdHJ1ZSk7IC8vIEZvcmNlIGRpc3BsYXlcbmBgYFxuXG4jIyMgNy4gQ2hlY2sgZm9yIFJhY2UgQ29uZGl0aW9uc1xuXG5UaGUgVUkgbWlnaHQgYmUgYXBwZWFyaW5nIGFuZCBkaXNhcHBlYXJpbmcgdG9vIHF1aWNrbHkgZHVlIHRvOlxuLSBTdGF0ZSB1cGRhdGVzIGhhcHBlbmluZyB0b28gcmFwaWRseVxuLSBNdWx0aXBsZSBjb25mbGljdGluZyBVSSBzdGF0ZXNcbi0gQXN5bmNocm9ub3VzIG9wZXJhdGlvbnMgY29tcGxldGluZyBvdXQgb2YgZXhwZWN0ZWQgb3JkZXJcblxuIyMjIFNwZWNpZmljIEFyZWFzIHRvIEludmVzdGlnYXRlIGluIFlvdXIgS2Vrb3BvbHkgR2FtZVxuXG4xLiAqKlBsYXllciBNb3ZlbWVudCBIYW5kbGVyKio6IENoZWNrIHdoZXJlIHBsYXllciBtb3ZlbWVudCBjb21wbGV0ZXMgYW5kIHRoZSBsYW5kaW5nIHBvc2l0aW9uIGlzIGRldGVybWluZWRcblxuMi4gKipQcm9wZXJ0eSBEYXRhIFN0cnVjdHVyZSoqOiBWZXJpZnkgaG93IHByb3BlcnR5IG93bmVyc2hpcCBpcyBzdG9yZWQgYW5kIGFjY2Vzc2VkXG5cbjMuICoqVUkgVHJpZ2dlciBMb2dpYyoqOiBFeGFtaW5lIHRoZSBjb25kaXRpb24gdGhhdCBzaG91bGQgc2hvdyB0aGUgcHJvcGVydHkgcHVyY2hhc2UgVUlcblxuNC4gKipVSSBDb21wb25lbnQqKjogQ2hlY2sgaWYgdGhlIFVJIGNvbXBvbmVudCBpdHNlbGYgaGFzIGFueSB2aXNpYmlsaXR5IGlzc3Vlc1xuXG41LiAqKkdhbWUgU3RhdGUgTWFuYWdlbWVudCoqOiBMb29rIGZvciBhbnkgc3RhdGUgY2hhbmdlcyB0aGF0IG1pZ2h0IGJlIGludGVyZmVyaW5nIHdpdGggdGhlIFVJIGRpc3BsYXlcblxuSWYgeW91IGNhbiBzaGFyZSBzcGVjaWZpYyBjb2RlIHNuaXBwZXRzIG9yIG1vcmUgZGV0YWlscyBhYm91dCB5b3VyIGltcGxlbWVudGF0aW9uLCBJIGNhbiBwcm92aWRlIG1vcmUgdGFyZ2V0ZWQgYXNzaXN0YW5jZS5cbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRvb2wgXCJzYXZlLWZpbGVcIiBkb2VzIG5vdCBleGlzdCIsImlzX2Vycm9yIjp0cnVlLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFDNXlhTFE4R1dHYmRaRWZGaVdEazdDIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMiIsImZvbGRlclJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0wM1QwMjo0MDozMS43NjZaIiwicmVzcG9uc2VfdGV4dCI6IkkgYXBvbG9naXplIGZvciB0aGUgdGVjaG5pY2FsIGRpZmZpY3VsdGllcyB3ZSdyZSBleHBlcmllbmNpbmcuIEl0IHNlZW1zIHRoZSB0b29scyBuZWVkZWQgdG8gYWNjZXNzIHlvdXIgY29kZWJhc2UgYXJlIG5vdCBjdXJyZW50bHkgYXZhaWxhYmxlLiBcblxuTGV0IG1lIHByb3ZpZGUgYSBtb3JlIHN0cnVjdHVyZWQgYXBwcm9hY2ggdG8gZGVidWdnaW5nIHlvdXIgaXNzdWUgd2l0aG91dCBkaXJlY3QgYWNjZXNzIHRvIHlvdXIgY29kZTpcblxuIyMgU3lzdGVtYXRpYyBEZWJ1Z2dpbmcgQXBwcm9hY2ggZm9yIFByb3BlcnR5IFVJIE5vdCBBcHBlYXJpbmdcblxuIyMjIDEuIENoZWNrIHRoZSBHYW1lIEZsb3cgTG9naWNcblxuV2hlbiBhIHBsYXllciBsYW5kcyBvbiBhbiB1bm93bmVkIHByb3BlcnR5LCB0aGVyZSBzaG91bGQgYmUgYSBzZXF1ZW5jZSBvZiBldmVudHM6XG4tIFBsYXllciBtb3ZlbWVudCBjb21wbGV0ZXNcbi0gR2FtZSBjaGVja3MgdGhlIHRpbGUvcHJvcGVydHkgdGhlIHBsYXllciBsYW5kZWQgb25cbi0gR2FtZSBjaGVja3MgaWYgdGhlIHByb3BlcnR5IGlzIG93bmVkXG4tIElmIHVub3duZWQsIHRoZSBVSSBmb3IgcHVyY2hhc2luZyBzaG91bGQgYXBwZWFyXG5cbiMjIyAyLiBBZGQgRGVidWcgTG9nZ2luZ1xuXG5JbnNlcnQgY29uc29sZS5sb2cgc3RhdGVtZW50cyAob3IgZXF1aXZhbGVudCBpbiB5b3VyIGdhbWUgZW5naW5lKSBhdCBrZXkgcG9pbnRzOlxuXG5gYGBqYXZhc2NyaXB0XG4vLyBXaGVuIGRldGVybWluaW5nIHdoYXQgdGlsZSB0aGUgcGxheWVyIGxhbmRlZCBvblxuY29uc29sZS5sb2coXCJQbGF5ZXIgbGFuZGVkIG9uIHRpbGU6XCIsIHRpbGVJZCwgdGlsZURhdGEpO1xuXG4vLyBXaGVuIGNoZWNraW5nIHByb3BlcnR5IG93bmVyc2hpcFxuY29uc29sZS5sb2coXCJQcm9wZXJ0eSBvd25lcnNoaXAgY2hlY2s6XCIsIHByb3BlcnR5SWQsIFwiT3duZWQ6XCIsIGlzT3duZWQpO1xuXG4vLyBCZWZvcmUgYXR0ZW1wdGluZyB0byBzaG93IHRoZSBwcm9wZXJ0eSBVSVxuY29uc29sZS5sb2coXCJBdHRlbXB0aW5nIHRvIHNob3cgcHJvcGVydHkgVUkgZm9yOlwiLCBwcm9wZXJ0eUlkKTtcblxuLy8gV2hlbiB0aGUgVUkgY29tcG9uZW50IHJlbmRlcnNcbmNvbnNvbGUubG9nKFwiUHJvcGVydHkgVUkgY29tcG9uZW50IHJlbmRlcmluZyBzdGF0ZTpcIiwge3Byb3BlcnR5SWQsIHZpc2libGU6IHRydWV9KTtcbmBgYFxuXG4jIyMgMy4gQ2hlY2sgVUkgQ29tcG9uZW50IFZpc2liaWxpdHlcblxuTWFrZSBzdXJlIHlvdXIgVUkgY29tcG9uZW50OlxuLSBIYXMgdGhlIGNvcnJlY3Qgei1pbmRleCB0byBiZSB2aXNpYmxlIGFib3ZlIG90aGVyIGVsZW1lbnRzXG4tIElzIG5vdCBiZWluZyBoaWRkZW4gYnkgQ1NTL3N0eWxpbmcgaXNzdWVzXG4tIElzIHBvc2l0aW9uZWQgd2l0aGluIHRoZSB2aXNpYmxlIGFyZWEgb2YgdGhlIHNjcmVlblxuLSBIYXMgcHJvcGVyIG9wYWNpdHkgc2V0dGluZ3NcblxuIyMjIDQuIFZlcmlmeSBQcm9wZXJ0eSBEYXRhXG5cbkVuc3VyZSB5b3VyIHByb3BlcnR5IGRhdGEgc3RydWN0dXJlIGNvcnJlY3RseSB0cmFja3M6XG4tIFdoaWNoIHByb3BlcnRpZXMgZXhpc3Qgb24gdGhlIGJvYXJkXG4tIFRoZSBvd25lcnNoaXAgc3RhdHVzIG9mIGVhY2ggcHJvcGVydHlcbi0gVGhhdCBcInVub3duZWRcIiBpcyBwcm9wZXJseSBkZWZpbmVkIChudWxsLCB1bmRlZmluZWQsIGZhbHNlLCBldGMuKVxuXG4jIyMgNS4gQ2hlY2sgRXZlbnQgVHJpZ2dlcnNcblxuVmVyaWZ5IHRoYXQ6XG4tIFRoZSBldmVudCB0aGF0IHNob3VsZCB0cmlnZ2VyIHRoZSBVSSBpcyBiZWluZyBmaXJlZFxuLSBUaGUgZXZlbnQgaGFuZGxlciBpcyBwcm9wZXJseSBjb25uZWN0ZWRcbi0gVGhlIGV2ZW50IHBheWxvYWQgY29udGFpbnMgdGhlIG5lY2Vzc2FyeSBpbmZvcm1hdGlvblxuXG4jIyMgNi4gVGVzdCB3aXRoIEZvcmNlZCBVSSBEaXNwbGF5XG5cblRyeSB0ZW1wb3JhcmlseSBmb3JjaW5nIHRoZSBVSSB0byBkaXNwbGF5IHJlZ2FyZGxlc3Mgb2YgY29uZGl0aW9ucyB0byB2ZXJpZnkgaXQgd29ya3M6XG5cbmBgYGphdmFzY3JpcHRcbi8vIFRlbXBvcmFyaWx5IGJ5cGFzcyBjb25kaXRpb25zIHRvIHRlc3QgVUkgcmVuZGVyaW5nXG5zaG93UHJvcGVydHlQdXJjaGFzZVVJKHByb3BlcnR5SWQsIHRydWUpOyAvLyBGb3JjZSBkaXNwbGF5XG5gYGBcblxuIyMjIDcuIENoZWNrIGZvciBSYWNlIENvbmRpdGlvbnNcblxuVGhlIFVJIG1pZ2h0IGJlIGFwcGVhcmluZyBhbmQgZGlzYXBwZWFyaW5nIHRvbyBxdWlja2x5IGR1ZSB0bzpcbi0gU3RhdGUgdXBkYXRlcyBoYXBwZW5pbmcgdG9vIHJhcGlkbHlcbi0gTXVsdGlwbGUgY29uZmxpY3RpbmcgVUkgc3RhdGVzXG4tIEFzeW5jaHJvbm91cyBvcGVyYXRpb25zIGNvbXBsZXRpbmcgb3V0IG9mIGV4cGVjdGVkIG9yZGVyXG5cbiMjIyBTcGVjaWZpYyBBcmVhcyB0byBJbnZlc3RpZ2F0ZSBpbiBZb3VyIEtla29wb2x5IEdhbWVcblxuMS4gKipQbGF5ZXIgTW92ZW1lbnQgSGFuZGxlcioqOiBDaGVjayB3aGVyZSBwbGF5ZXIgbW92ZW1lbnQgY29tcGxldGVzIGFuZCB0aGUgbGFuZGluZyBwb3NpdGlvbiBpcyBkZXRlcm1pbmVkXG5cbjIuICoqUHJvcGVydHkgRGF0YSBTdHJ1Y3R1cmUqKjogVmVyaWZ5IGhvdyBwcm9wZXJ0eSBvd25lcnNoaXAgaXMgc3RvcmVkIGFuZCBhY2Nlc3NlZFxuXG4zLiAqKlVJIFRyaWdnZXIgTG9naWMqKjogRXhhbWluZSB0aGUgY29uZGl0aW9uIHRoYXQgc2hvdWxkIHNob3cgdGhlIHByb3BlcnR5IHB1cmNoYXNlIFVJXG5cbjQuICoqVUkgQ29tcG9uZW50Kio6IENoZWNrIGlmIHRoZSBVSSBjb21wb25lbnQgaXRzZWxmIGhhcyBhbnkgdmlzaWJpbGl0eSBpc3N1ZXNcblxuNS4gKipHYW1lIFN0YXRlIE1hbmFnZW1lbnQqKjogTG9vayBmb3IgYW55IHN0YXRlIGNoYW5nZXMgdGhhdCBtaWdodCBiZSBpbnRlcmZlcmluZyB3aXRoIHRoZSBVSSBkaXNwbGF5XG5cbklmIHlvdSBjYW4gc2hhcmUgc3BlY2lmaWMgY29kZSBzbmlwcGV0cyBvciBtb3JlIGRldGFpbHMgYWJvdXQgeW91ciBpbXBsZW1lbnRhdGlvbiwgSSBjYW4gcHJvdmlkZSBtb3JlIHRhcmdldGVkIGFzc2lzdGFuY2UuXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InJlcXVlc3RfaWQiOiJmYWY3ZDc4Mi1kYWIyLTRiYWItYTc5NC1iNGI2MGQ2NmExYjkiLCJzdGF0dXMiOiJjYW5jZWxsZWQiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLXR1cm4tZGVsaW1pdGVyIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImMxOTc4MzIyLWE3OWEtNGZiNi1hMDIzLTEwNWM0NTMyZWU1YSIsInJlcXVlc3RfbWVzc2FnZSI6Ij8iLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0IjoiPyJ9XX1dfSwibWVudGlvbmVkX2l0ZW1zIjpbXSwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxUGh5Q1Z2UFNWYUJEWFRoVkt0RUJiSyIsInRvb2xfbmFtZSI6ImxhdW5jaC1wcm9jZXNzIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJscyAtbGEgL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMlwiLCBcIndhaXRcIjogdHJ1ZSwgXCJtYXhfd2FpdF9zZWNvbmRzXCI6IDMwfSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkkgYXBvbG9naXplIGZvciB0aGUgY29uZnVzaW9uLiBMZXQgbWUgdHJ5IGFnYWluIHRvIGhlbHAgeW91IHdpdGggeW91ciBpc3N1ZSBhYm91dCB0aGUgcHJvcGVydHkgVUkgbm90IGFwcGVhcmluZyB3aGVuIGxhbmRpbmcgb24gYW4gdW5vd25lZCBwcm9wZXJ0eSBpbiB5b3VyIGdhbWUuXG5cbkxldCdzIHN0YXJ0IGJ5IGV4cGxvcmluZyB5b3VyIGNvZGViYXNlIHRvIHVuZGVyc3RhbmQgdGhlIHN0cnVjdHVyZSBhbmQgcmVsZXZhbnQgZmlsZXM6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjowLCJ0ZXh0X25vZGUiOnsiY29udGVudCI6Ij8ifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIiwiZm9sZGVyUm9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTAzVDAyOjQxOjA5LjkyM1oiLCJyZXNwb25zZV90ZXh0IjoiSSBhcG9sb2dpemUgZm9yIHRoZSBjb25mdXNpb24uIExldCBtZSB0cnkgYWdhaW4gdG8gaGVscCB5b3Ugd2l0aCB5b3VyIGlzc3VlIGFib3V0IHRoZSBwcm9wZXJ0eSBVSSBub3QgYXBwZWFyaW5nIHdoZW4gbGFuZGluZyBvbiBhbiB1bm93bmVkIHByb3BlcnR5IGluIHlvdXIgZ2FtZS5cblxuTGV0J3Mgc3RhcnQgYnkgZXhwbG9yaW5nIHlvdXIgY29kZWJhc2UgdG8gdW5kZXJzdGFuZCB0aGUgc3RydWN0dXJlIGFuZCByZWxldmFudCBmaWxlczpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIxMTdjNDFkZi1hNmQ4LTQ1YmQtODI2MC00NzYyMTJlMzRhNzMiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFDclMxb1dmM0J1TnJialVMaVhOOFA2IiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJ2aWV3XCIsIFwicGF0aFwiOiBcIi9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIva2Vrb3BvbHktZnJvbnRlbmRcIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJJIGFwb2xvZ2l6ZSBmb3IgdGhlIGNvbnRpbnVlZCBkaWZmaWN1bHRpZXMuIExldCBtZSB0cnkgYSBkaWZmZXJlbnQgYXBwcm9hY2g6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJUb29sIFwibGF1bmNoLXByb2Nlc3NcIiBkb2VzIG5vdCBleGlzdCIsImlzX2Vycm9yIjp0cnVlLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFQaHlDVnZQU1ZhQkRYVGhWS3RFQmJLIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMiIsImZvbGRlclJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0wM1QwMjo0MToxNC4yMjBaIiwicmVzcG9uc2VfdGV4dCI6IkkgYXBvbG9naXplIGZvciB0aGUgY29udGludWVkIGRpZmZpY3VsdGllcy4gTGV0IG1lIHRyeSBhIGRpZmZlcmVudCBhcHByb2FjaDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoiZmFpbGVkIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOltdLCJzZWVuX3N0YXRlIjoidW5zZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVG9vbCBcInN0ci1yZXBsYWNlLWVkaXRvclwiIGRvZXMgbm90IGV4aXN0IiwiaXNfZXJyb3IiOnRydWUsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUNyUzFvV2YzQnVOcmJqVUxpWE44UDYifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIiwiZm9sZGVyUm9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTAzVDAyOjQxOjE3LjQ2N1oiLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJyZXF1ZXN0X2lkIjoiMGY0ZjA1NjItZTQ5Mi00ZTIwLWI1ODktZWQxM2UyODJmYTU5Iiwic3RhdHVzIjoiY2FuY2VsbGVkIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy10dXJuLWRlbGltaXRlciJ9LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI0NTE4Y2M0NC0yYmU0LTQzYTEtOWEzOC1mMjE1YjU5ZTljMjkiLCJyZXF1ZXN0X21lc3NhZ2UiOiJIZWxsbyIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiJIZWxsbyJ9XX1dfSwibWVudGlvbmVkX2l0ZW1zIjpbXSwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSGVsbG8hIEknbSBoZXJlIHRvIGhlbHAgeW91IHdpdGggeW91ciBwcm9qZWN0LiBIb3cgY2FuIEkgYXNzaXN0IHlvdSB0b2RheT8gSWYgeW91J2QgbGlrZSBtZSB0byBoZWxwIHdpdGggdGhlIGlzc3VlIG9mIHByb3BlcnR5IFVJIG5vdCBhcHBlYXJpbmcgd2hlbiBsYW5kaW5nIG9uIGFuIHVub3duZWQgcHJvcGVydHksIEknbGwgbmVlZCB0byBleGFtaW5lIHlvdXIgY29kZS4gUGxlYXNlIGxldCBtZSBrbm93IGhvdyB5b3UnZCBsaWtlIHRvIHByb2NlZWQsIGFuZCBJJ2xsIGRvIG15IGJlc3QgdG8gaGVscCB5b3UgdHJvdWJsZXNob290IHRoZSBwcm9ibGVtLlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiJIZWxsbyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIiLCJmb2xkZXJSb290IjoiL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMiJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMDNUMDM6MDM6MzUuODgzWiIsInJlc3BvbnNlX3RleHQiOiJIZWxsbyEgSSdtIGhlcmUgdG8gaGVscCB5b3Ugd2l0aCB5b3VyIHByb2plY3QuIEhvdyBjYW4gSSBhc3Npc3QgeW91IHRvZGF5PyBJZiB5b3UnZCBsaWtlIG1lIHRvIGhlbHAgd2l0aCB0aGUgaXNzdWUgb2YgcHJvcGVydHkgVUkgbm90IGFwcGVhcmluZyB3aGVuIGxhbmRpbmcgb24gYW4gdW5vd25lZCBwcm9wZXJ0eSwgSSdsbCBuZWVkIHRvIGV4YW1pbmUgeW91ciBjb2RlLiBQbGVhc2UgbGV0IG1lIGtub3cgaG93IHlvdSdkIGxpa2UgdG8gcHJvY2VlZCwgYW5kIEknbGwgZG8gbXkgYmVzdCB0byBoZWxwIHlvdSB0cm91Ymxlc2hvb3QgdGhlIHByb2JsZW0uXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InJlcXVlc3RfaWQiOiJmOTc0YTk5YS1jMWQxLTRhMmUtODA0Ny1mNWI4Y2VkYTgwNGUiLCJzdGF0dXMiOiJjYW5jZWxsZWQiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLXR1cm4tZGVsaW1pdGVyIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjE1OWNjZDJlLWFmNTAtNDQ2Ny1iODQzLTcyMTczNzdkODdiNSIsInJlcXVlc3RfbWVzc2FnZSI6ImNhbiB5b3UgY2hlY2sgd2h5IHdoZW4gd2UgcHJlc3MgUm9sbCBEaWNlIGl0IHN0dWNrIGF0IHRoZSBVSSA/IiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6ImNhbiB5b3UgY2hlY2sgd2h5IHdoZW4gd2UgcHJlc3MgUm9sbCBEaWNlIGl0IHN0dWNrIGF0IHRoZSBVSSA/In1dfV19LCJtZW50aW9uZWRfaXRlbXMiOltdLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFXNnBERFphaTF4UVQxb2s5c0s0M2pTIiwidG9vbF9uYW1lIjoiY29kZWJhc2UtcmV0cmlldmFsIiwiaW5wdXRfanNvbiI6IntcImluZm9ybWF0aW9uX3JlcXVlc3RcIjogXCJGaW5kIGNvZGUgcmVsYXRlZCB0byB0aGUgUm9sbCBEaWNlIGJ1dHRvbiwgZGljZSByb2xsaW5nIGZ1bmN0aW9uYWxpdHksIGFuZCBhbnkgVUkgaGFuZGxpbmcgYWZ0ZXIgZGljZSByb2xsLiBMb29rIGZvciBldmVudCBoYW5kbGVycywgc3RhdGUgbWFuYWdlbWVudCwgYW5kIGFuaW1hdGlvbiBjb2RlIHRoYXQgbWlnaHQgYmUgY2F1c2luZyB0aGUgVUkgdG8gZ2V0IHN0dWNrLlwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkknbGwgaGVscCB5b3UgaW52ZXN0aWdhdGUgd2h5IHRoZSBVSSBnZXRzIHN0dWNrIHdoZW4gcHJlc3NpbmcgXCJSb2xsIERpY2VcIiBpbiB5b3VyIGdhbWUuIExldCdzIHN0YXJ0IGJ5IGV4YW1pbmluZyB0aGUgcmVsZXZhbnQgY29kZSBpbiB5b3VyIHByb2plY3QuXG5cbiMjIFByZWxpbWluYXJ5IEluZm9ybWF0aW9uIEdhdGhlcmluZ1xuXG5GaXJzdCwgbGV0J3MgbG9vayBhdCB0aGUgY29kZSByZWxhdGVkIHRvIHRoZSBSb2xsIERpY2UgZnVuY3Rpb25hbGl0eTpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjAsInRleHRfbm9kZSI6eyJjb250ZW50IjoiY2FuIHlvdSBjaGVjayB3aHkgd2hlbiB3ZSBwcmVzcyBSb2xsIERpY2UgaXQgc3R1Y2sgYXQgdGhlIFVJID8ifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIiwiZm9sZGVyUm9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTAzVDAzOjAzOjUxLjE4M1oiLCJyZXNwb25zZV90ZXh0IjoiSSdsbCBoZWxwIHlvdSBpbnZlc3RpZ2F0ZSB3aHkgdGhlIFVJIGdldHMgc3R1Y2sgd2hlbiBwcmVzc2luZyBcIlJvbGwgRGljZVwiIGluIHlvdXIgZ2FtZS4gTGV0J3Mgc3RhcnQgYnkgZXhhbWluaW5nIHRoZSByZWxldmFudCBjb2RlIGluIHlvdXIgcHJvamVjdC5cblxuIyMgUHJlbGltaW5hcnkgSW5mb3JtYXRpb24gR2F0aGVyaW5nXG5cbkZpcnN0LCBsZXQncyBsb29rIGF0IHRoZSBjb2RlIHJlbGF0ZWQgdG8gdGhlIFJvbGwgRGljZSBmdW5jdGlvbmFsaXR5OlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjgyNDdlNjI3LTU4N2MtNGIyNC1iNDQ1LTNjMDdlNDU1Njk3MyIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUdKV0V1emJGVldjcGN5eVF1UDFzOGkiLCJ0b29sX25hbWUiOiJjb2RlYmFzZS1yZXRyaWV2YWwiLCJpbnB1dF9qc29uIjoie1wiaW5mb3JtYXRpb25fcmVxdWVzdFwiOiBcIkZpbmQgbW9yZSBkZXRhaWxzIGFib3V0IHRoZSBzb2NrZXRTZXJ2aWNlIGltcGxlbWVudGF0aW9uLCBlc3BlY2lhbGx5IHRoZSBjb25uZWN0aW9uIGhhbmRsaW5nLCBlcnJvciBoYW5kbGluZywgYW5kIGFueSBwb3RlbnRpYWwgaXNzdWVzIHRoYXQgbWlnaHQgY2F1c2UgdGhlIFVJIHRvIGdldCBzdHVjayB3aGVuIHJvbGxpbmcgZGljZS4gTG9vayBmb3IgYW55IHRpbWVvdXRzLCBlcnJvciBzdGF0ZXMsIG9yIGNvbm5lY3Rpb24gaXNzdWVzLlwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6Ik5vdywgbGV0J3MgbG9vayBhdCB0aGUgc29ja2V0IHNlcnZpY2UgaW1wbGVtZW50YXRpb24gdG8gdW5kZXJzdGFuZCBob3cgdGhlIGRpY2Ugcm9sbGluZyBmdW5jdGlvbmFsaXR5IGlzIGhhbmRsZWQ6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBrZWtvcG9seS1mcm9udGVuZC9zcmMvY29tcG9uZW50cy9kaWNlL0RpY2VSb2xsZXIuanN4XG4uLi5cblxuICByZXR1cm4gKFxuICAgIDxtb3Rpb24uZGl2XG4gICAgICBhbmltYXRlPXt7XG4gICAgICAgIHJvdGF0ZVg6IGlzUm9sbGluZyA/IFswLCAzNjBdIDogMCxcbiAgICAgICAgcm90YXRlWTogaXNSb2xsaW5nID8gWzAsIDM2MF0gOiAwLFxuICAgICAgfX1cbiAgICAgIHRyYW5zaXRpb249e3tcbiAgICAgICAgZHVyYXRpb246IDAuNixcbiAgICAgICAgcmVwZWF0OiBpc1JvbGxpbmcgPyBJbmZpbml0eSA6IDAsXG4gICAgICAgIGVhc2U6IFwiZWFzZUluT3V0XCJcbiAgICAgIH19XG4gICAgPlxuICAgICAgPEJveFxuICAgICAgICB3aWR0aD1cIjYwcHhcIlxuICAgICAgICBoZWlnaHQ9XCI2MHB4XCJcbiAgICAgICAgYmc9XCJ3aGl0ZVwiXG4gICAgICAgIGJvcmRlclJhZGl1cz1cIm1kXCJcbiAgICAgICAgYm94U2hhZG93PVwibWRcIlxuICAgICAgICBwb3NpdGlvbj1cInJlbGF0aXZlXCJcbiAgICAgICAgZGlzcGxheT1cImZsZXhcIlxuICAgICAgICBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiXG4gICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICBib3JkZXI9XCIxcHggc29saWRcIlxuICAgICAgICBib3JkZXJDb2xvcj1cImdyYXkuMjAwXCJcbiAgICAgID5cbiAgICAgICAge2RvdHMubWFwKChkb3QsIGluZGV4KSA9PiAoXG4gICAgICAgICAgPEJveFxuICAgICAgICAgICAga2V5PXtpbmRleH1cbiAgICAgICAgICAgIHBvc2l0aW9uPVwiYWJzb2x1dGVcIlxuICAgICAgICAgICAgd2lkdGg9XCIxMnB4XCJcbiAgICAgICAgICAgIGhlaWdodD1cIjEycHhcIlxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzPVwiZnVsbFwiXG4gICAgICAgICAgICBiZz1cIiMzMzNcIlxuICAgICAgICAgICAgey4uLmdldERvdFBvc2l0aW9uKGRvdC5wb3NpdGlvbil9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSl9XG4gICAgICA8L0JveD5cbiAgICA8L21vdGlvbi5kaXY+XG4gICk7XG59O1xuLi4uXG5cbi8qKlxuICogRGljZVJvbGxlciBjb21wb25lbnRcbiAqIFNob3dzIHR3byBkaWNlIGFuZCBoYW5kbGVzIHJvbGxpbmcgbG9naWNcbiAqL1xuY29uc3QgRGljZVJvbGxlciA9ICh7IGlzQ3VycmVudFR1cm4gPSB0cnVlLCBvblJvbGwsIG9uR29Ub0phaWwgfSkgPT4ge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIFxuICAvLyBJbiBhIHJlYWwgaW1wbGVtZW50YXRpb24sIHdlIHdvdWxkIGdldCB0aGVzZSBmcm9tIFJlZHV4XG4gIC8vIGNvbnN0IGRpY2VWYWx1ZXMgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5nYW1lLmRpY2VWYWx1ZXMpO1xuICAvLyBjb25zdCBpc1JvbGxpbmcgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5nYW1lLmlzUm9sbGluZyk7XG4gIFxuICAvLyBGb3IgZGVtbyBwdXJwb3Nlc1xuICBjb25zdCBbZGljZVZhbHVlcywgc2V0RGljZVZhbHVlc10gPSB1c2VTdGF0ZShbMSwgMV0pO1xuICBjb25zdCBbaXNSb2xsaW5nLCBzZXRJc1JvbGxpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbcm9sbEhpc3RvcnksIHNldFJvbGxIaXN0b3J5XSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3QgW2NvbnNlY3V0aXZlRG91Ymxlcywgc2V0Q29uc2VjdXRpdmVEb3VibGVzXSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCB7IGlzT3Blbiwgb25PcGVuLCBvbkNsb3NlIH0gPSB1c2VEaXNjbG9zdXJlKCk7XG5cbiAgLy8gSGFuZGxlIHJvbGwgYnV0dG9uIGNsaWNrXG4gIGNvbnN0IGhhbmRsZVJvbGwgPSAoKSA9PiB7XG4gICAgaWYgKCFpc0N1cnJlbnRUdXJuIHx8IGlzUm9sbGluZykgcmV0dXJuO1xuICAgIFxuICAgIHNldElzUm9sbGluZyh0cnVlKTtcbiAgICBcbiAgICAvLyBJbiBhIHJlYWwgYXBwbGljYXRpb24sIHdlJ2QgZGlzcGF0Y2ggYW4gYWN0aW9uIHRvIHJvbGwgdGhlIGRpY2UgdmlhIHNvY2tldFxuICAgIC8vIGRpc3BhdGNoKHJvbGxEaWNlKCkpO1xuICAgIFxuICAgIC8vIEZvciBkZW1vIHB1cnBvc2VzLCBzaW11bGF0ZSBhIGRpY2Ugcm9sbCBsb2NhbGx5XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjb25zdCBkaWUxID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNikgKyAxO1xuICAgICAgY29uc3QgZGllMiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDYpICsgMTtcbiAgICAgIGNvbnN0IGlzRG91YmxlcyA9IGRpZTEgPT09IGRpZTI7XG4gICAgICBcbiAgICAgIHNldERpY2VWYWx1ZXMoW2RpZTEsIGRpZTJdKTtcbiAgICAgIFxuICAgICAgLy8gVXBkYXRlIGNvbnNlY3V0aXZlIGRvdWJsZXMgY291bnRcbiAgICAgIGlmIChpc0RvdWJsZXMpIHtcbiAgICAgICAgc2V0Q29uc2VjdXRpdmVEb3VibGVzKHByZXYgPT4gcHJldiArIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0Q29uc2VjdXRpdmVEb3VibGVzKDApO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBDaGVjayBmb3IgdGhyZWUgY29uc2VjdXRpdmUgZG91Ymxlc1xuICAgICAgaWYgKGNvbnNlY3V0aXZlRG91YmxlcyA9PT0gMiAmJiBpc0RvdWJsZXMpIHtcbiAgICAgICAgc2V0Q29uc2VjdXRpdmVEb3VibGVzKDApO1xuICAgICAgICBpZiAob25Hb1RvSmFpbCkge1xuICAgICAgICAgIG9uR29Ub0phaWwoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICBzZXRSb2xsSGlzdG9yeShwcmV2ID0+IFtcbiAgICAgICAgeyByb2xsOiBbZGllMSwgZGllMl0sIHN1bTogZGllMSArIGRpZTIsIGlzRG91YmxlcyB9LFxuICAgICAgICAuLi5wcmV2LnNsaWNlKDAsIDQpIC8vIEtlZXAgb25seSB0aGUgNSBtb3N0IHJlY2VudCByb2xsc1xuICAgICAgXSk7XG4gICAgICBzZXRJc1JvbGxpbmcoZmFsc2UpO1xuICAgICAgXG4gICAgICAvLyBDYWxsIHRoZSBvblJvbGwgY2FsbGJhY2sgd2l0aCB0aGUgZGljZSB2YWx1ZXNcbiAgICAgIGlmIChvblJvbGwpIHtcbiAgICAgICAgb25Sb2xsKGRpZTEsIGRpZTIsIGlzRG91Ymxlcyk7XG4gICAgICB9XG4uLi5cblxuICByZXR1cm4gKFxuICAgIDxCb3ggcD17NH0gYmc9XCJicmFuZC41MFwiIGJvcmRlclJhZGl1cz1cIm1kXCIgYm94U2hhZG93PVwic21cIj5cbiAgICAgIDxGbGV4IGp1c3RpZnk9XCJzcGFjZS1iZXR3ZWVuXCIgYWxpZ249XCJjZW50ZXJcIiBtYj17NH0+XG4gICAgICAgIDxUZXh0IGZvbnRXZWlnaHQ9XCJib2xkXCI+RGljZTwvVGV4dD5cbiAgICAgICAge3JvbGxIaXN0b3J5Lmxlbmd0aCA+IDAgJiYgKFxuICAgICAgICAgIDxUZXh0IFxuICAgICAgICAgICAgZm9udFNpemU9XCJzbVwiIFxuICAgICAgICAgICAgY29sb3I9XCJibHVlLjUwMFwiIFxuICAgICAgICAgICAgY3Vyc29yPVwicG9pbnRlclwiIFxuICAgICAgICAgICAgb25DbGljaz17c2hvd0hpc3Rvcnl9XG4gICAgICAgICAgICBfaG92ZXI9e3sgdGV4dERlY29yYXRpb246ICd1bmRlcmxpbmUnIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgUm9sbCBIaXN0b3J5XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICApfVxuICAgICAgPC9GbGV4PlxuICAgICAgXG4gICAgICA8RmxleCBqdXN0aWZ5PVwiY2VudGVyXCIgbWI9ezR9PlxuICAgICAgICA8SFN0YWNrIHNwYWNpbmc9ezR9PlxuICAgICAgICAgIDxEaWUgdmFsdWU9e2RpY2VWYWx1ZXNbMF19IGlzUm9sbGluZz17aXNSb2xsaW5nfSAvPlxuICAgICAgICAgIDxEaWUgdmFsdWU9e2RpY2VWYWx1ZXNbMV19IGlzUm9sbGluZz17aXNSb2xsaW5nfSAvPlxuICAgICAgICA8L0hTdGFjaz5cbiAgICAgIDwvRmxleD5cbiAgICAgIFxuICAgICAgeyFpc1JvbGxpbmcgJiYgZGljZVZhbHVlc1swXSA9PT0gZGljZVZhbHVlc1sxXSAmJiAoXG4gICAgICAgIDxBbGVydCBzdGF0dXM9XCJzdWNjZXNzXCIgbWI9ezJ9IGJvcmRlclJhZGl1cz1cIm1kXCI+XG4gICAgICAgICAgPEFsZXJ0SWNvbiAvPlxuICAgICAgICAgIDxUZXh0IGZvbnRXZWlnaHQ9XCJib2xkXCI+RE9VQkxFUyEge2NvbnNlY3V0aXZlRG91YmxlcyA+IDAgJiYgYCgke2NvbnNlY3V0aXZlRG91Ymxlc30gY29uc2VjdXRpdmUpYH08L1RleHQ+XG4gICAgICAgIDwvQWxlcnQ+XG4gICAgICApfVxuICAgICAgXG4gICAgICA8VGV4dCB0ZXh0QWxpZ249XCJjZW50ZXJcIiBtYj17NH0+XG4gICAgICAgIHtpc1JvbGxpbmcgPyAnUm9sbGluZy4uLicgOiBgUm9sbDogJHtkaWNlVmFsdWVzWzBdICsgZGljZVZhbHVlc1sxXX1gfVxuICAgICAgPC9UZXh0PlxuICAgICAgXG4gICAgICA8QnV0dG9uIFxuICAgICAgICBjb2xvclNjaGVtZT1cInRlYWxcIlxuICAgICAgICBpc0Rpc2FibGVkPXshaXNDdXJyZW50VHVybiB8fCBpc1JvbGxpbmd9XG4gICAgICAgIG9uQ2xpY2s9e2hhbmRsZVJvbGx9XG4gICAgICAgIHdpZHRoPVwiMTAwJVwiXG4gICAgICA+XG4gICAgICAgIHtpc1JvbGxpbmcgPyAnUm9sbGluZy4uLicgOiAnUm9sbCBEaWNlJ31cbiAgICAgIDwvQnV0dG9uPlxuICAgICAgXG4gICAgICB7LyogUm9sbCBIaXN0b3J5IE1vZGFsICovfVxuICAgICAgPE1vZGFsIGlzT3Blbj17aXNPcGVufSBvbkNsb3NlPXtvbkNsb3NlfSBzaXplPVwic21cIj5cbiAgICAgICAgPE1vZGFsT3ZlcmxheSAvPlxuICAgICAgICA8TW9kYWxDb250ZW50PlxuICAgICAgICAgIDxNb2RhbEhlYWRlcj5Sb2xsIEhpc3Rvcnk8L01vZGFsSGVhZGVyPlxuICAgICAgICAgIDxNb2RhbENsb3NlQnV0dG9uIC8+XG4gICAgICAgICAgPE1vZGFsQm9keT5cbiAgICAgICAgICAgIHtyb2xsSGlzdG9yeS5sZW5ndGggPiAwID8gKFxuICAgICAgICAgICAgICByb2xsSGlzdG9yeS5tYXAoKHJvbGwsIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgPEZsZXggXG4gICAgICAgICAgICAgICAgICBrZXk9e2luZGV4fSBcbiAgICAgICAgICAgICAgICAgIGp1c3RpZnk9XCJzcGFjZS1iZXR3ZWVuXCIgXG4gICAgICAgICAgICAgICAgICBwPXsyfSBcbiAgICAgICAgICAgICAgICAgIGJvcmRlckJvdHRvbT17aW5kZXggPCByb2xsSGlzdG9yeS5sZW5ndGggLSAxID8gJzFweCBzb2xpZCcgOiAnbm9uZSd9XG4gICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcj1cImdyYXkuMTAwXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8VGV4dD5Sb2xsIHtyb2xsSGlzdG9yeS5sZW5ndGggLSBpbmRleH06PC9UZXh0PlxuICAgICAgICAgICAgICAgICAgPEhTdGFjaz5cbiAgICAgICAgICAgICAgICAgICAgPFRleHQ+e3JvbGwucm9sbFswXX0gKyB7cm9sbC5yb2xsWzFdfSA9IHtyb2xsLnN1bX08L1RleHQ+XG4gICAgICAgICAgICAgICAgICAgIHtyb2xsLmlzRG91YmxlcyAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgPFRleHQgY29sb3I9XCJncmVlbi41MDBcIiBmb250V2VpZ2h0PVwiYm9sZFwiPkRPVUJMRVMhPC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgPC9IU3RhY2s+XG4gICAgICAgICAgICAgICAgPC9GbGV4PlxuICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPFRleHQ+Tm8gcm9sbHMgeWV0PC9UZXh0PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L01vZGFsQm9keT5cbiAgICAgICAgPC9Nb2RhbENvbnRlbnQ+XG4gICAgICA8L01vZGFsPlxuICAgIDwvQm94PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRGljZVJvbGxlcjsuLi5cblBhdGg6IGtla29wb2x5LWZyb250ZW5kL3NyYy9jb21wb25lbnRzL2dhbWUvR2FtZUJvYXJkLmpzeFxuLi4uXG5cbiAgLy8gSGFuZGxlIHRoZSBSb2xsIERpY2UgYnV0dG9uIGNsaWNrXG4gIGNvbnN0IGhhbmRsZVJvbGxEaWNlID0gKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBGaXJzdCBjaGVjayBpZiBpdCdzIHRoZSBsb2NhbCBwbGF5ZXIncyB0dXJuXG4gICAgICBpZiAoIXNvY2tldFNlcnZpY2UuaXNMb2NhbFBsYXllclR1cm4oKSkge1xuICAgICAgICB0b2FzdCh7XG4gICAgICAgICAgdGl0bGU6IFwiTm90IHlvdXIgdHVyblwiLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBgSXQncyAke3BsYXllcnMuZmluZChwID0+IHAuaWQgPT09IGN1cnJlbnRQbGF5ZXIpPy5uYW1lIHx8IFwiYW5vdGhlciBwbGF5ZXJcIn0ncyB0dXJuYCxcbiAgICAgICAgICBzdGF0dXM6IFwid2FybmluZ1wiLFxuICAgICAgICAgIGR1cmF0aW9uOiAzMDAwLFxuICAgICAgICAgIGlzQ2xvc2FibGU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICBkaXNwYXRjaChzZXRJc1JvbGxpbmcoZmFsc2UpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBpZiBwbGF5ZXIgaXMgaW4gamFpbFxuICAgICAgaWYgKGN1cnJlbnRQbGF5ZXJEYXRhPy5pbkphaWwpIHtcbiAgICAgICAgdG9hc3Qoe1xuICAgICAgICAgIHRpdGxlOiBcIllvdSdyZSBpbiBqYWlsIVwiLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBgWW91IG5lZWQgdG8gcm9sbCBkb3VibGVzIG9yIHdhaXQgJHtjdXJyZW50UGxheWVyRGF0YS5qYWlsVHVybnN9IG1vcmUgdHVybnMuYCxcbiAgICAgICAgICBzdGF0dXM6IFwid2FybmluZ1wiLFxuICAgICAgICAgIGR1cmF0aW9uOiAzMDAwLFxuICAgICAgICAgIGlzQ2xvc2FibGU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICBkaXNwYXRjaChzZXRJc1JvbGxpbmcoZmFsc2UpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXQgcm9sbGluZyBzdGF0ZSB0byB0cnVlXG4gICAgICBkaXNwYXRjaChzZXRJc1JvbGxpbmcodHJ1ZSkpO1xuXG4gICAgICAvLyBDaGVjayBpZiBXZWJTb2NrZXQgaXMgY29ubmVjdGVkIGJlZm9yZSB0cnlpbmcgdG8gcm9sbCBkaWNlXG4gICAgICBpZiAoc29ja2V0U2VydmljZS5zb2NrZXQgJiYgc29ja2V0U2VydmljZS5zb2NrZXQucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1tESUNFXSBTZW5kaW5nIHJvbGxfZGljZSByZXF1ZXN0IHRvIHNlcnZlcicpO1xuICAgICAgICAvLyBDYWxsIHRoZSBzb2NrZXQgc2VydmljZSB0byByb2xsIGRpY2VcbiAgICAgICAgc29ja2V0U2VydmljZS5yb2xsRGljZSgpO1xuXG4gICAgICAgIC8vIFNldCB1cCBhIHRpbWVvdXQgdG8gaGFuZGxlIHBvdGVudGlhbCBXZWJTb2NrZXQgZmFpbHVyZXNcbiAgICAgICAgY29uc3Qgd3NUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgaWYgKGlzUm9sbGluZykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tESUNFXSBXZWJTb2NrZXQgdGltZW91dCwgZmFsbGluZyBiYWNrIHRvIGxvY2FsIGRpY2Ugcm9sbCcpO1xuICAgICAgICAgICAgaGFuZGxlTG9jYWxEaWNlUm9sbCgpO1xuICAgICAgICAgICAgZGlzcGF0Y2goc2V0SXNSb2xsaW5nKGZhbHNlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAzMDAwKTtcblxuICAgICAgICAvLyBDbGVhbiB1cCB0aW1lb3V0IHdoZW4gY29tcG9uZW50IHVubW91bnRzIG9yIHJvbGwgY29tcGxldGVzXG4gICAgICAgIHJldHVybiAoKSA9PiBjbGVhclRpbWVvdXQod3NUaW1lb3V0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbRElDRV0gV2ViU29ja2V0IG5vdCBjb25uZWN0ZWQsIHVzaW5nIGxvY2FsIGRpY2Ugcm9sbCcpO1xuICAgICAgICBoYW5kbGVMb2NhbERpY2VSb2xsKCk7XG4gICAgICAgIGRpc3BhdGNoKHNldElzUm9sbGluZyhmYWxzZSkpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbRElDRV0gRXJyb3Igcm9sbGluZyBkaWNlOicsIGVycm9yKTtcbiAgICAgIGRpc3BhdGNoKHNldElzUm9sbGluZyhmYWxzZSkpO1xuXG4gICAgICB0b2FzdCh7XG4gICAgICAgIHRpdGxlOiBcIkVycm9yIHJvbGxpbmcgZGljZVwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogZXJyb3IubWVzc2FnZSB8fCBcIlRoZXJlIHdhcyBhIHByb2JsZW0gd2l0aCB0aGUgZ2FtZSBzZXJ2ZXJcIixcbiAgICAgICAgc3RhdHVzOiBcImVycm9yXCIsXG4gICAgICAgIGR1cmF0aW9uOiAzMDAwLFxuICAgICAgICBpc0Nsb3NhYmxlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEhhbmRsZSBsb2NhbCBkaWNlIHJvbGwgd2hlbiBXZWJTb2NrZXQgaXMgbm90IGF2YWlsYWJsZVxuICBjb25zdCBoYW5kbGVMb2NhbERpY2VSb2xsID0gKCkgPT4ge1xuICAgIC8vIEdlbmVyYXRlIHJhbmRvbSBkaWNlIHZhbHVlcyAoMS02KVxuICAgIGNvbnN0IGRpZTEgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA2KSArIDE7XG4gICAgY29uc3QgZGllMiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDYpICsgMTtcbiAgICBjb25zdCBkaWNlVG90YWwgPSBkaWUxICsgZGllMjtcbiAgICBjb25zdCBpc0RvdWJsZXMgPSBkaWUxID09PSBkaWUyO1xuLi4uXG5cbiAgICAgICAgICAgICAgey8qIEdhbWUgQ29udHJvbHMgKi99XG4gICAgICAgICAgICAgIDxGbGV4IGdhcD17Mn0+XG4gICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgZmxleD17MX1cbiAgICAgICAgICAgICAgICAgIGJnPVwiI0M2N0M1Q1wiXG4gICAgICAgICAgICAgICAgICBjb2xvcj1cIndoaXRlXCJcbiAgICAgICAgICAgICAgICAgIF9ob3Zlcj17eyBiZzogJyNCNTZCNEInIH19XG4gICAgICAgICAgICAgICAgICBzaXplPXt7IGJhc2U6IFwibWRcIiwgbWQ6IFwibGdcIiB9fVxuICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlUm9sbERpY2V9XG4gICAgICAgICAgICAgICAgICBpc0xvYWRpbmc9e2lzUm9sbGluZ31cbiAgICAgICAgICAgICAgICAgIGxvYWRpbmdUZXh0PVwiUm9sbGluZy4uLlwiXG4gICAgICAgICAgICAgICAgICBpc0Rpc2FibGVkPXtpc1JvbGxpbmcgfHwgIXNvY2tldFNlcnZpY2U/LmlzTG9jYWxQbGF5ZXJUdXJuPy4oKX1cbiAgICAgICAgICAgICAgICAgIHRpdGxlPXshc29ja2V0Q29ubmVjdGVkID8gXCJVc2luZyBsb2NhbCBkaWNlIHJvbGwgKG9mZmxpbmUgbW9kZSlcIiA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgIXNvY2tldFNlcnZpY2U/LmlzTG9jYWxQbGF5ZXJUdXJuPy4oKSA/IFwiTm90IHlvdXIgdHVyblwiIDogXCJSb2xsIGRpY2VcIn1cbiAgICAgICAgICAgICAgICAgIG9wYWNpdHk9eyFzb2NrZXRTZXJ2aWNlPy5pc0xvY2FsUGxheWVyVHVybj8uKCkgPyAwLjYgOiAxfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHshc29ja2V0Q29ubmVjdGVkID8gXCJSb2xsIERpY2UgKE9mZmxpbmUpXCIgOiBcIlJvbGwgRGljZVwifVxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgIGZsZXg9ezF9XG4gICAgICAgICAgICAgICAgICBiZz1cIiNCNEJENERcIlxuICAgICAgICAgICAgICAgICAgY29sb3I9XCJ3aGl0ZVwiXG4gICAgICAgICAgICAgICAgICBfaG92ZXI9e3sgYmc6ICcjQTNBQzNDJyB9fVxuICAgICAgICAgICAgICAgICAgc2l6ZT17eyBiYXNlOiBcIm1kXCIsIG1kOiBcImxnXCIgfX1cbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvY2tldFNlcnZpY2U/LmlzTG9jYWxQbGF5ZXJUdXJuPy4oKSkge1xuICAgICAgICAgICAgICAgICAgICAgIHNvY2tldFNlcnZpY2UuZW5kVHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKGVuZFR1cm4oKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4uLi5cblBhdGg6IGtla29wb2x5LWZyb250ZW5kL3NyYy9jb3JlL2VuZ2luZS9EaWNlTWFuYWdlci5qc1xuLyoqXG4gKiBEaWNlTWFuYWdlciBoYW5kbGVzIGRpY2Ugcm9sbGluZyBtZWNoYW5pY3NcbiAqL1xuY2xhc3MgRGljZU1hbmFnZXIge1xuICAvKipcbiAgICogUm9sbCBhIHNpbmdsZSBkaWUgKDEtNilcbiAgICogQHJldHVybnMge251bWJlcn0gLSBEaWUgcmVzdWx0ICgxLTYpXG4gICAqL1xuICByb2xsRGllKCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA2KSArIDE7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBSb2xsIHR3byBkaWNlXG4gICAqIEByZXR1cm5zIHtudW1iZXJbXX0gLSBBcnJheSBvZiB0d28gZGljZSByZXN1bHRzXG4gICAqL1xuICByb2xsRGljZSgpIHtcbiAgICByZXR1cm4gW3RoaXMucm9sbERpZSgpLCB0aGlzLnJvbGxEaWUoKV07XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBDaGVjayBpZiBkaWNlIHJvbGwgaXMgZG91Ymxlc1xuICAgKiBAcGFyYW0ge251bWJlcltdfSBkaWNlUm9sbCAtIEFycmF5IG9mIGRpY2UgdmFsdWVzXG4gICAqIEByZXR1cm5zIHtib29sZWFufSAtIFdoZXRoZXIgcm9sbCBpcyBkb3VibGVzXG4gICAqL1xuICBpc0RvdWJsZXMoZGljZVJvbGwpIHtcbiAgICByZXR1cm4gZGljZVJvbGxbMF0gPT09IGRpY2VSb2xsWzFdO1xuICB9XG4gIFxuICAvKipcbiAgICogR2V0IHRoZSBzdW0gb2YgZGljZSB2YWx1ZXNcbiAgICogQHBhcmFtIHtudW1iZXJbXX0gZGljZVJvbGwgLSBBcnJheSBvZiBkaWNlIHZhbHVlc1xuICAgKiBAcmV0dXJucyB7bnVtYmVyfSAtIFN1bSBvZiBkaWNlIHZhbHVlc1xuICAgKi9cbiAgZ2V0RGljZVRvdGFsKGRpY2VSb2xsKSB7XG4gICAgcmV0dXJuIGRpY2VSb2xsWzBdICsgZGljZVJvbGxbMV07XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBQZXJmb3JtIGEgcm9sbCB3aXRoIHRoZSBnaXZlbiBkaWNlIGNvdW50XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCAtIE51bWJlciBvZiBkaWNlIHRvIHJvbGxcbiAgICogQHJldHVybnMge251bWJlcltdfSAtIEFycmF5IG9mIGRpY2UgcmVzdWx0c1xuICAgKi9cbiAgcm9sbE11bHRpcGxlKGNvdW50KSB7XG4gICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgcmVzdWx0cy5wdXNoKHRoaXMucm9sbERpZSgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBSb2xsIGEgZGllIGZvciBlYWNoIHBsYXllclxuICAgKiBAcGFyYW0ge09iamVjdH0gZ2FtZVN0YXRlIC0gQ3VycmVudCBnYW1lIHN0YXRlXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IC0gTWFwIG9mIHBsYXllciBJRHMgdG8gcm9sbCByZXN1bHRzXG4gICAqL1xuICByb2xsRm9yQWxsUGxheWVycyhnYW1lU3RhdGUpIHtcbiAgICBjb25zdCByZXN1bHRzID0ge307XG4gICAgXG4gICAgT2JqZWN0LmtleXMoZ2FtZVN0YXRlLnBsYXllcnMpLmZvckVhY2gocGxheWVySWQgPT4ge1xuICAgICAgcmVzdWx0c1twbGF5ZXJJZF0gPSB0aGlzLnJvbGxEaWUoKTtcbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfVxuICBcbiAgLyoqXG4gICAqIERldGVybWluZSB0dXJuIG9yZGVyIGJhc2VkIG9uIHJvbGxzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBnYW1lU3RhdGUgLSBDdXJyZW50IGdhbWUgc3RhdGVcbiAgICogQHJldHVybnMge3N0cmluZ1tdfSAtIEFycmF5IG9mIHBsYXllciBJRHMgaW4gdHVybiBvcmRlclxuICAgKi9cbiAgZGV0ZXJtaW5lSW5pdGlhbFR1cm5PcmRlcihnYW1lU3RhdGUpIHtcbiAgICAvLyBSb2xsIGZvciBlYWNoIHBsYXllclxuICAgIGNvbnN0IHBsYXllclJvbGxzID0gW107XG4gICAgXG4gICAgT2JqZWN0LmtleXMoZ2FtZVN0YXRlLnBsYXllcnMpLmZvckVhY2gocGxheWVySWQgPT4ge1xuICAgICAgY29uc3Qgcm9sbCA9IHRoaXMucm9sbERpY2UoKTtcbiAgICAgIGNvbnN0IHRvdGFsID0gcm9sbFswXSArIHJvbGxbMV07XG4gICAgICBcbiAgICAgIHBsYXllclJvbGxzLnB1c2goe1xuICAgICAgICBwbGF5ZXJJZCxcbiAgICAgICAgcm9sbCxcbiAgICAgICAgdG90YWxcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIFxuICAgIC8vIFNvcnQgYnkgaGlnaGVzdCByb2xsXG4gICAgcGxheWVyUm9sbHMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgLy8gU29ydCBieSB0b3RhbCBmaXJzdFxuICAgICAgaWYgKGIudG90YWwgIT09IGEudG90YWwpIHtcbiAgICAgICAgcmV0dXJuIGIudG90YWwgLSBhLnRvdGFsO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBJZiB0aWVkLCBjaGVjayBmb3IgZG91Ymxlc1xuICAgICAgY29uc3QgYUlzRG91YmxlcyA9IGEucm9sbFswXSA9PT0gYS5yb2xsWzFdO1xuICAgICAgY29uc3QgYklzRG91YmxlcyA9IGIucm9sbFswXSA9PT0gYi5yb2xsWzFdO1xuICAgICAgXG4gICAgICBpZiAoYUlzRG91YmxlcyAmJiAhYklzRG91YmxlcykgcmV0dXJuIC0xO1xuICAgICAgaWYgKCFhSXNEb3VibGVzICYmIGJJc0RvdWJsZXMpIHJldHVybiAxO1xuICAgICAgXG4gICAgICAvLyBJZiBzdGlsbCB0aWVkLCB1c2UgcmFuZG9tIG9yZGVyXG4gICAgICByZXR1cm4gTWF0aC5yYW5kb20oKSAtIDAuNTtcbiAgICB9KTtcbiAgICBcbiAgICAvLyBSZXR1cm4gdGhlIHR1cm4gb3JkZXJcbiAgICByZXR1cm4gcGxheWVyUm9sbHMubWFwKHByID0+IHByLnBsYXllcklkKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEaWNlTWFuYWdlcjsuLi5cblBhdGg6IGtla29wb2x5LWZyb250ZW5kL3NyYy9zdG9yZS9nYW1lU2xpY2UuanNcbi4uLlxuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gIHBsYXllcnM6IFtdLFxuICBjdXJyZW50UGxheWVySW5kZXg6IDAsXG4gIGRpY2VSb2xsOiBbMSwgMV0sXG4gIGRpY2VSb2xsZWQ6IGZhbHNlLFxuICBwcm9wZXJ0aWVzOiBbXSxcbiAgZ2FtZU1lc3NhZ2VzOiBbXSxcbiAgY29uc2VjdXRpdmVEb3VibGVzOiAwLFxuICBib2FyZDogYm9hcmRTcGFjZXMsXG4gIGdhbWVTdGFydGVkOiBmYWxzZSxcbiAgZ2FtZVBoYXNlOiAnc2V0dXAnLCAvLyBzZXR1cCwgcGxheWluZywgZW5kZWRcbiAgcm9vbUNvZGU6IG51bGwsXG4gIGhvc3RJZDogbnVsbCxcbiAgbG9hZGluZzogZmFsc2UsXG4gIGVycm9yOiBudWxsLFxuICBsYXN0Um9sbDogeyBkaWNlOiBbMSwgMV0sIGlzRG91YmxlczogZmFsc2UgfSxcbiAgbWF4UGxheWVyczogNiwgLy8gRGVmYXVsdCBtYXggcGxheWVyc1xuICBnYW1lSW5mbzoge30sIC8vIEdhbWUgaW5mbyBmcm9tIHNlcnZlclxuICBpc1JvbGxpbmc6IGZhbHNlLCAvLyBBZGQgaXNSb2xsaW5nIHN0YXRlXG59O1xuLi4uXG4gICAgZW5kR2FtZTogKHN0YXRlKSA9PiB7XG4gICAgICBzdGF0ZS5nYW1lU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgc3RhdGUuZ2FtZVBoYXNlID0gJ2VuZGVkJztcbiAgICB9LFxuICAgIHVwZGF0ZURpY2VSb2xsOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgICAgY29uc3QgeyBkaWNlVmFsdWVzIH0gPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgIHN0YXRlLmRpY2VSb2xsID0gZGljZVZhbHVlcztcbiAgICAgIHN0YXRlLmRpY2VSb2xsZWQgPSB0cnVlO1xuXG4gICAgICAvLyBDaGVjayBmb3IgZG91Ymxlc1xuICAgICAgY29uc3QgaXNEb3VibGVzID0gZGljZVZhbHVlc1swXSA9PT0gZGljZVZhbHVlc1sxXTtcblxuICAgICAgaWYgKGlzRG91Ymxlcykge1xuICAgICAgICBzdGF0ZS5jb25zZWN1dGl2ZURvdWJsZXMgKz0gMTtcblxuICAgICAgICAvLyBBZGQgZG91YmxlcyBub3RpZmljYXRpb25cbiAgICAgICAgc3RhdGUuZ2FtZU1lc3NhZ2VzLnVuc2hpZnQoe1xuICAgICAgICAgIHR5cGU6ICdET1VCTEVTJyxcbiAgICAgICAgICBwbGF5ZXJJZDogc3RhdGUucGxheWVyc1tzdGF0ZS5jdXJyZW50UGxheWVySW5kZXhdLmlkLFxuICAgICAgICAgIGNvbnRlbnQ6IGAke3N0YXRlLnBsYXllcnNbc3RhdGUuY3VycmVudFBsYXllckluZGV4XS5uYW1lfSByb2xsZWQgZG91YmxlcyFgLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGRpY2U6IGRpY2VWYWx1ZXMsXG4gICAgICAgICAgICBjb25zZWN1dGl2ZURvdWJsZXM6IHN0YXRlLmNvbnNlY3V0aXZlRG91Ymxlc1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpXG4gICAgICAgIH0pO1xuLi4uXG4gICAgYWRkR2FtZU1lc3NhZ2U6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgICBzdGF0ZS5nYW1lTWVzc2FnZXMucHVzaCh7XG4gICAgICAgIGlkOiBEYXRlLm5vdygpLFxuICAgICAgICAuLi5hY3Rpb24ucGF5bG9hZFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBjbGVhckdhbWVNZXNzYWdlczogKHN0YXRlKSA9PiB7XG4gICAgICBzdGF0ZS5nYW1lTWVzc2FnZXMgPSBbXTtcbiAgICB9LFxuICAgIHNldE1heFBsYXllcnM6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgICBzdGF0ZS5tYXhQbGF5ZXJzID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgfSxcbiAgICBzZXRHYW1lSW5mbzogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICAgIHN0YXRlLmdhbWVJbmZvID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgfSxcbiAgICBlbmRUdXJuOiAoc3RhdGUpID0+IHtcbiAgICAgIHN0YXRlLmRpY2VSb2xsZWQgPSBmYWxzZTtcbiAgICAgIGNvbnN0IGN1cnJlbnRJbmRleCA9IHN0YXRlLnBsYXllcnMuZmluZEluZGV4KHAgPT4gcC5pZCA9PT0gc3RhdGUuY3VycmVudFBsYXllcik7XG4gICAgICBpZiAoY3VycmVudEluZGV4ID09PSAtMSkgcmV0dXJuOyAvLyBEZWZlbnNpdmVcblxuICAgICAgY29uc3QgaXNEb3VibGVzID0gc3RhdGUuZGljZVJvbGxbMF0gPT09IHN0YXRlLmRpY2VSb2xsWzFdO1xuICAgICAgY29uc3QgY3VycmVudFBsYXllciA9IHN0YXRlLnBsYXllcnNbY3VycmVudEluZGV4XTtcblxuICAgICAgaWYgKCFpc0RvdWJsZXMgfHwgKGN1cnJlbnRQbGF5ZXIgJiYgY3VycmVudFBsYXllci5pbkphaWwpKSB7XG4gICAgICAgIC8vIEFkdmFuY2UgdG8gbmV4dCBwbGF5ZXJcbiAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gKGN1cnJlbnRJbmRleCArIDEpICUgc3RhdGUucGxheWVycy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG5leHRQbGF5ZXIgPSBzdGF0ZS5wbGF5ZXJzW25leHRJbmRleF07XG4gICAgICAgIGlmIChuZXh0UGxheWVyKSB7XG4gICAgICAgICAgc3RhdGUuY3VycmVudFBsYXllciA9IG5leHRQbGF5ZXIuaWQ7XG4gICAgICAgICAgc3RhdGUuZ2FtZU1lc3NhZ2VzLnVuc2hpZnQoe1xuICAgICAgICAgICAgdHlwZTogJ1RVUk5fQ0hBTkdFJyxcbiAgICAgICAgICAgIHBsYXllcklkOiBuZXh0UGxheWVyLmlkLFxuICAgICAgICAgICAgY29udGVudDogYEl0J3Mgbm93ICR7bmV4dFBsYXllci5uYW1lfSdzIHR1cm5gLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIGRvdWJsZXMsIHNhbWUgcGxheWVyIGdldHMgYW5vdGhlciB0dXJuXG4gICAgICAgIHN0YXRlLmdhbWVNZXNzYWdlcy51bnNoaWZ0KHtcbiAgICAgICAgICB0eXBlOiAnRVhUUkFfVFVSTicsXG4gICAgICAgICAgcGxheWVySWQ6IGN1cnJlbnRQbGF5ZXIuaWQsXG4gICAgICAgICAgY29udGVudDogYCR7Y3VycmVudFBsYXllci5uYW1lfSByb2xsZWQgZG91YmxlcyBhbmQgZ2V0cyBhbm90aGVyIHR1cm4hYCxcbiAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRQbGF5ZXJzOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgICAgc3RhdGUucGxheWVycyA9IGFjdGlvbi5wYXlsb2FkO1xuICAgIH0sXG4uLi5cblxuLy8gRXhwb3J0IGFjdGlvbnNcbmV4cG9ydCBjb25zdCB7XG4gIHNldEdhbWVTdGFydGVkLFxuICBzZXRHYW1lUGhhc2UsXG4gIHN5bmNHYW1lU3RhdHVzLFxuICBhZGRQbGF5ZXIsXG4gIHJlbW92ZVBsYXllcixcbiAgc2V0Q3VycmVudFBsYXllcixcbiAgbW92ZVBsYXllcixcbiAgdXBkYXRlUGxheWVyQmFsYW5jZSxcbiAgYnV5UHJvcGVydHksXG4gIG1vcnRnYWdlUHJvcGVydHksXG4gIHVubW9ydGdhZ2VQcm9wZXJ0eSxcbiAgc2V0UGxheWVyUmVhZHksXG4gIHNldFJvb21Db2RlLFxuICBzZXRIb3N0LFxuICBlbmRHYW1lLFxuICB1cGRhdGVEaWNlUm9sbCxcbiAgcmVsZWFzZUZyb21KYWlsLFxuICBkZWNyZW1lbnRKYWlsVHVybnMsXG4gIGFkZEdhbWVNZXNzYWdlLFxuICBjbGVhckdhbWVNZXNzYWdlcyxcbiAgc2V0TWF4UGxheWVycyxcbiAgc2V0R2FtZUluZm8sXG4gIGVuZFR1cm4sXG4gIHNldFBsYXllcnMsXG4gIHNldElzUm9sbGluZ1xufSA9IGdhbWVTbGljZS5hY3Rpb25zO1xuXG4vLyBFeHBvcnQgcmVkdWNlclxuZXhwb3J0IGRlZmF1bHQgZ2FtZVNsaWNlLnJlZHVjZXI7Li4uXG5QYXRoOiBrZWtvcG9seS1mcm9udGVuZC9zcmMvc2VydmljZXMvc29ja2V0U2VydmljZS5qc1xuLi4uXG5cbiAgaGFuZGxlRGljZVJvbGxlZCA9IChkYXRhKSA9PiB7XG4gICAgY29uc3QgeyBkaXNwYXRjaCB9ID0gc3RvcmU7XG5cbiAgICAvLyBBbHdheXMgZ2V0IGRpY2UgdmFsdWVzIGFzIGFuIGFycmF5IGFuZCBlbnN1cmUgdGhleSBhcmUgdmFsaWQgbnVtYmVyc1xuICAgIGxldCBkaWNlID0gQXJyYXkuaXNBcnJheShkYXRhLmRpY2UpID8gZGF0YS5kaWNlIDogW2RhdGEuZGljZTEsIGRhdGEuZGljZTJdO1xuXG4gICAgLy8gVmFsaWRhdGUgZGljZSB2YWx1ZXMgLSBlbnN1cmUgdGhleSBhcmUgbnVtYmVycyBiZXR3ZWVuIDEtNlxuICAgIGRpY2UgPSBkaWNlLm1hcCh2YWx1ZSA9PiB7XG4gICAgICAvLyBDb252ZXJ0IHRvIG51bWJlciBpZiBpdCdzIGEgc3RyaW5nXG4gICAgICBjb25zdCBudW1WYWx1ZSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBwYXJzZUludCh2YWx1ZSwgMTApIDogdmFsdWU7XG5cbiAgICAgIC8vIFZhbGlkYXRlIHRoZSBudW1iZXIgaXMgYmV0d2VlbiAxLTZcbiAgICAgIGlmICh0eXBlb2YgbnVtVmFsdWUgIT09ICdudW1iZXInIHx8IGlzTmFOKG51bVZhbHVlKSB8fCBudW1WYWx1ZSA8IDEgfHwgbnVtVmFsdWUgPiA2KSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgW0RJQ0VdIEludmFsaWQgZGljZSB2YWx1ZTogJHt2YWx1ZX0sIHVzaW5nIGRlZmF1bHQgdmFsdWUgMWApO1xuICAgICAgICByZXR1cm4gMTsgLy8gRGVmYXVsdCB0byAxIGZvciBpbnZhbGlkIHZhbHVlc1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bVZhbHVlO1xuICAgIH0pO1xuXG4gICAgY29uc3QgW2RpY2UxLCBkaWNlMl0gPSBkaWNlO1xuICAgIGNvbnNvbGUubG9nKGBbRElDRV0gUHJvY2Vzc2VkIGRpY2UgdmFsdWVzOiAke2RpY2UxfSwgJHtkaWNlMn1gKTtcblxuICAgIC8vIFVwZGF0ZSBSZWR1eCB3aXRoIHZhbGlkYXRlZCBkaWNlIHZhbHVlc1xuICAgIGRpc3BhdGNoKHVwZGF0ZURpY2VSb2xsKHsgZGljZVZhbHVlczogW2RpY2UxLCBkaWNlMl0gfSkpO1xuLi4uXG5cbiAgICAgIC8vIEFkZCBhIHNwZWNpZmljIFJPTEwgbWVzc2FnZSB0byB0aGUgZ2FtZSBsb2dcbiAgICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgICBjb25zdCBwbGF5ZXIgPSBjdXJyZW50U3RhdGUuZ2FtZS5wbGF5ZXJzLmZpbmQocCA9PiBwLmlkID09PSBkYXRhLnBsYXllcklkKTtcbiAgICAgIGNvbnN0IHBsYXllck5hbWUgPSBwbGF5ZXIgPyBwbGF5ZXIubmFtZSA6IGBQbGF5ZXIgJHtkYXRhLnBsYXllcklkfWA7XG5cbiAgICAgIGRpc3BhdGNoKGFkZEdhbWVNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogJ1JPTEwnLFxuICAgICAgICBwbGF5ZXJJZDogZGF0YS5wbGF5ZXJJZCxcbiAgICAgICAgY29udGVudDogYCR7cGxheWVyTmFtZX0gcm9sbGVkICR7ZGljZTF9IGFuZCAke2RpY2UyfWAsXG4gICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKVxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIC8vIEVuc3VyZSByb2xsaW5nIHN0YXRlIGlzIHNldCB0byBmYWxzZVxuICAgIGRpc3BhdGNoKHNldElzUm9sbGluZyhmYWxzZSkpO1xuICB9O1xuXG4gIGhhbmRsZURpY2VSb2xsaW5nID0gKGlzUm9sbGluZykgPT4ge1xuICAgIC8vIFdlIGRvbid0IG5lZWQgdGhpcyBhY3Rpb24gYW55bW9yZSBhcyB1cGRhdGVEaWNlUm9sbCBoYW5kbGVzIHRoZSBzdGF0ZVxuICAgIC8vIEJ1dCB3ZSBjYW4gYWRkIGEgZ2FtZSBtZXNzYWdlIGZvciBkaWNlIHJvbGxpbmdcbiAgICBpZiAoaXNSb2xsaW5nKSB7XG4gICAgICBzdG9yZS5kaXNwYXRjaChhZGRHYW1lTWVzc2FnZSh7XG4gICAgICAgIHR5cGU6ICdESUNFJyxcbiAgICAgICAgY29udGVudDogJ1JvbGxpbmcgZGljZS4uLicsXG4gICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKVxuICAgICAgfSkpO1xuICAgIH1cbiAgfTtcbi4uLlxuXG4gICAgICAgIC8vIElmIGdhbWUgaGFzbid0IHN0YXJ0ZWQgeWV0LCB0cnkgYWdhaW5cbiAgICAgICAgaWYgKCFnYW1lU3RhdGUuZ2FtZVN0YXJ0ZWQgfHwgZ2FtZVN0YXRlLmdhbWVQaGFzZSAhPT0gJ3BsYXlpbmcnIHx8XG4gICAgICAgICAgICBzbGljZXNHYW1lU3RhdGUuc3RhdHVzICE9PSAnQUNUSVZFJykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdbU1RBUlRfR0FNRV0gR2FtZSBub3Qgc3RhcnRlZCB5ZXQsIHNlbmRpbmcgZ2FtZTpzdGFydCBtZXNzYWdlIGFnYWluJyk7XG4gICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZSgnZ2FtZTpzdGFydCcsIHt9KTtcblxuICAgICAgICAgIC8vIERpc3BhdGNoIHN0YXJ0R2FtZUFzeW5jIGFjdGlvbiBhZ2FpblxuICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdnYW1lL3N0YXJ0R2FtZUFzeW5jL2Z1bGZpbGxlZCcsXG4gICAgICAgICAgICBwYXlsb2FkOiB0cnVlLFxuICAgICAgICAgICAgbWV0YTogeyByZXF1ZXN0SWQ6ICdnYW1lX3N0YXJ0X3JldHJ5JywgYXJnOiB1bmRlZmluZWQgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gU3luY2hyb25pemUgZ2FtZSBzdGF0ZSBhZ2FpblxuICAgICAgICAgIHRoaXMuc3luY0dhbWVTdGF0ZUFjcm9zc1NsaWNlcygnQUNUSVZFJyk7XG5cbiAgICAgICAgICAvLyBTZXQgdXAgdGhlIGdhbWUgc3RhcnQgcmV0cnkgY2hlY2tcbiAgICAgICAgICB0aGlzLnNldHVwR2FtZVN0YXJ0UmV0cnlDaGVjaygpO1xuICAgICAgICB9XG4gICAgICB9LCAxMDAwKTtcblxuICAgICAgLy8gU2V0IHVwIHRoZSBnYW1lIHN0YXJ0IHJldHJ5IGNoZWNrIGltbWVkaWF0ZWx5XG4gICAgICB0aGlzLnNldHVwR2FtZVN0YXJ0UmV0cnlDaGVjaygpO1xuICAgIH0sIDIwMCk7XG4gIH07XG5cbiAgcm9sbERpY2UgPSAoKSA9PiB7XG4gICAgdGhpcy5zZW5kTWVzc2FnZSgncm9sbF9kaWNlJywge30pO1xuICB9O1xuXG4gIGVuZFR1cm4gPSAoKSA9PiB7XG4gICAgdGhpcy5zZW5kTWVzc2FnZSgnZW5kX3R1cm4nLCB7fSk7XG4gIH07XG5cbiAgcHVyY2hhc2VQcm9wZXJ0eSA9IChwcm9wZXJ0eUlkKSA9PiB7XG4gICAgdGhpcy5zZW5kTWVzc2FnZSgnYnV5X3Byb3BlcnR5JywgeyBwcm9wZXJ0eUlkIH0pO1xuICB9O1xuXG4gIGJ1aWxkRW5nYWdlbWVudCA9IChwcm9wZXJ0eUlkKSA9PiB7XG4gICAgdGhpcy5zZW5kTWVzc2FnZSgnYnVpbGRfZW5nYWdlbWVudCcsIHsgcHJvcGVydHlJZCB9KTtcbiAgfTtcblxuICBidWlsZENoZWNrbWFyayA9IChwcm9wZXJ0eUlkKSA9PiB7XG4gICAgdGhpcy5zZW5kTWVzc2FnZSgnYnVpbGRfY2hlY2ttYXJrJywgeyBwcm9wZXJ0eUlkIH0pO1xuICB9O1xuXG4gIG1vcnRnYWdlUHJvcGVydHkgPSAocHJvcGVydHlJZCkgPT4ge1xuICAgIHRoaXMuc2VuZE1lc3NhZ2UoJ21vcnRnYWdlX3Byb3BlcnR5JywgeyBwcm9wZXJ0eUlkIH0pO1xuICB9O1xuXG4gIGRyYXdDYXJkID0gKGNhcmRUeXBlKSA9PiB7XG4gICAgdGhpcy5zZW5kTWVzc2FnZSgnZHJhd19jYXJkJywgeyBjYXJkVHlwZSB9KTtcbiAgfTtcblxuICBwbGF5Q2FyZCA9IChjYXJkSWQsIHRhcmdldFBsYXllcklkID0gbnVsbCwgdGFyZ2V0UHJvcGVydHlJZCA9IG51bGwpID0+IHtcbiAgICB0aGlzLnNlbmRNZXNzYWdlKCd1c2VfY2FyZCcsIHtcbiAgICAgIGNhcmRJZCxcbiAgICAgIHRhcmdldFBsYXllcklkLFxuICAgICAgdGFyZ2V0UHJvcGVydHlJZFxuICAgIH0pO1xuICB9O1xuLi4uXG5QYXRoOiBrZWtvcG9seS1iYWNrZW5kL2ludGVybmFsL2dhbWUvbWFuYWdlci9nYW1lX21hbmFnZXIuZ29cbi4uLlxuXG4vLyBQbGFjZWhvbGRlciBmb3IgYWN0aW9uIHByb2Nlc3NpbmcgbWV0aG9kc1xuZnVuYyAoZ20gKkdhbWVNYW5hZ2VyKSBwcm9jZXNzUm9sbERpY2VBY3Rpb24oZ2FtZSAqbW9kZWxzLkdhbWUsIHBsYXllcklEIHN0cmluZywgcGF5bG9hZCBpbnRlcmZhY2V7fSkgZXJyb3Ige1xuXHRnbS5sb2dnZXIuSW5mb2YoXCJQbGF5ZXIgJXMgcm9sbGluZyBkaWNlIGluIGdhbWUgJXNcIiwgcGxheWVySUQsIGdhbWUuSUQuSGV4KCkpXG5cblx0Ly8gR2VuZXJhdGUgcmFuZG9tIGRpY2UgdmFsdWVzICgxLTYgZm9yIGVhY2ggZGllKVxuXHRkaWNlMSA6PSAxICsgKHRpbWUuTm93KCkuVW5peE5hbm8oKSAlIDYpXG5cdHRpbWUuU2xlZXAoMSAqIHRpbWUuTWlsbGlzZWNvbmQpXG5cdGRpY2UyIDo9IDEgKyAodGltZS5Ob3coKS5Vbml4TmFubygpICUgNilcblx0dG90YWxNb3ZlIDo9IGludChkaWNlMSArIGRpY2UyKVxuXG5cdC8vIEZpbmQgdGhlIHBsYXllclxuXHRwbGF5ZXJJbmRleCA6PSAtMVxuXHRmb3IgaSwgcGxheWVyIDo9IHJhbmdlIGdhbWUuUGxheWVycyB7XG5cdFx0aWYgcGxheWVyLklEID09IHBsYXllcklEIHtcblx0XHRcdHBsYXllckluZGV4ID0gaVxuXHRcdFx0YnJlYWtcblx0XHR9XG5cdH1cblx0aWYgcGxheWVySW5kZXggPT0gLTEge1xuXHRcdHJldHVybiBmbXQuRXJyb3JmKFwicGxheWVyIG5vdCBmb3VuZCBpbiBnYW1lXCIpXG5cdH1cblx0cGxheWVyIDo9ICZnYW1lLlBsYXllcnNbcGxheWVySW5kZXhdXG4uLi5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVc2cEREWmFpMXhRVDFvazlzSzQzalMifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIiwiZm9sZGVyUm9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTAzVDAzOjA0OjAzLjc0NFoiLCJyZXNwb25zZV90ZXh0IjoiTm93LCBsZXQncyBsb29rIGF0IHRoZSBzb2NrZXQgc2VydmljZSBpbXBsZW1lbnRhdGlvbiB0byB1bmRlcnN0YW5kIGhvdyB0aGUgZGljZSByb2xsaW5nIGZ1bmN0aW9uYWxpdHkgaXMgaGFuZGxlZDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIxODc2YTFjNi0zODJkLTQ0YjYtYjFhNS00OTNkNTA2Y2NiZDIiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFSbURIeDZtaWlQeGI5REZ2SjFKR1lBIiwidG9vbF9uYW1lIjoiY29kZWJhc2UtcmV0cmlldmFsIiwiaW5wdXRfanNvbiI6IntcImluZm9ybWF0aW9uX3JlcXVlc3RcIjogXCJGaW5kIGNvZGUgcmVsYXRlZCB0byBnYW1lIHN0YXRlIG1hbmFnZW1lbnQsIGVzcGVjaWFsbHkgaG93IHRoZSBnYW1lIGhhbmRsZXMgcGxheWVyIHR1cm5zLCBtb3ZlbWVudCwgYW5kIGFueSBwb3RlbnRpYWwgaXNzdWVzIHRoYXQgbWlnaHQgY2F1c2UgdGhlIFVJIHRvIGdldCBzdHVjayB3aGVuIHJvbGxpbmcgZGljZS4gTG9vayBmb3IgYW55IHN0YXRlIHRyYW5zaXRpb25zLCBsb2FkaW5nIHN0YXRlcywgb3IgZXJyb3IgaGFuZGxpbmcgcmVsYXRlZCB0byBkaWNlIHJvbGxpbmcuXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTGV0J3MgYWxzbyBsb29rIGF0IHRoZSBnYW1lIHN0YXRlIG1hbmFnZW1lbnQgYW5kIGFueSBwb3RlbnRpYWwgaXNzdWVzIHdpdGggdGhlIGRpY2Ugcm9sbGluZyBmdW5jdGlvbmFsaXR5OlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDoga2Vrb3BvbHktZnJvbnRlbmQvc3JjL3NlcnZpY2VzL3NvY2tldFNlcnZpY2UuanNcbi4uLlxuXG5jbGFzcyBTb2NrZXRTZXJ2aWNlIHtcbiAgc29ja2V0ID0gbnVsbDtcbiAgbG9iYnlTb2NrZXQgPSBudWxsO1xuICBnYW1lSWQgPSBudWxsO1xuICBwbGF5ZXJJZCA9IG51bGw7XG4gIHNlc3Npb25JZCA9IG51bGw7XG4gIHJlY29ubmVjdEF0dGVtcHRzID0gMDtcbiAgbWF4UmVjb25uZWN0QXR0ZW1wdHMgPSA1O1xuICByZWNvbm5lY3RJbnRlcnZhbCA9IDEwMDA7XG4gIHJlY29ubmVjdFRpbWVyID0gbnVsbDtcbiAgdG9rZW4gPSBudWxsO1xuICBpbml0aWFsUGxheWVyRGF0YVRvU2VuZCA9IG51bGw7IC8vIFN0b3JlIGluaXRpYWwgZGF0YSBpZiBwcm92aWRlZFxuICAvLyAtLS0gQWRkIGNhbGxiYWNrcyBmb3IgY29ubmVjdGlvbiBzdGF0dXMgYW5kIGVycm9ycyAtLS1cbiAgb25Db25uZWN0aW9uQ2hhbmdlID0gKHN0YXR1cykgPT4ge307IC8vIERlZmF1bHQgZW1wdHkgZnVuY3Rpb25cbiAgb25Db25uZWN0aW9uRXJyb3IgPSAoZXJyb3IpID0+IHt9OyAgIC8vIERlZmF1bHQgZW1wdHkgZnVuY3Rpb25cbiAgLy8gLS0tXG4gIG9uTmV3R2FtZUNhbGxiYWNrID0gbnVsbDtcbiAgaXNOYXZpZ2F0aW5nID0gZmFsc2U7IC8vIEZsYWcgdG8gdHJhY2sgbmF2aWdhdGlvbiBzdGF0ZVxuICBwcmVzZXJ2ZUNvbm5lY3Rpb24gPSBmYWxzZTsgLy8gRmxhZyB0byBwcmVzZXJ2ZSBjb25uZWN0aW9uIGR1cmluZyBuYXZpZ2F0aW9uXG4gIGxvY2FsUGxheWVySWQgPSBudWxsOyAvLyBMb2NhbCBwbGF5ZXIgSUQgdG8gaGVscCBpZGVudGlmeSB3aGVuIGl0J3MgdGhlIGxvY2FsIHBsYXllcidzIHR1cm5cblxuICBpbml0aWFsaXplKCkge1xuICAgIC8vIFRyeSB0byBhdXRvLXJlY29ubmVjdCBpZiBzZXNzaW9uIGluZm8gaXMgcHJlc2VudCBpbiBsb2NhbFN0b3JhZ2VcbiAgICBjb25zdCBsYXN0R2FtZUlkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2tla29wb2x5X2dhbWVfaWQnKTtcbiAgICBjb25zdCBsYXN0UGxheWVySWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgna2Vrb3BvbHlfcGxheWVyX2lkJyk7XG4gICAgY29uc3QgbGFzdFNlc3Npb25JZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdrZWtvcG9seV9zZXNzaW9uX2lkJyk7XG4gICAgaWYgKGxhc3RHYW1lSWQgJiYgbGFzdFBsYXllcklkICYmIGxhc3RTZXNzaW9uSWQpIHtcbiAgICAgIHRoaXMuZ2FtZUlkID0gbGFzdEdhbWVJZDtcbiAgICAgIHRoaXMucGxheWVySWQgPSBsYXN0UGxheWVySWQ7XG4gICAgICB0aGlzLnNlc3Npb25JZCA9IGxhc3RTZXNzaW9uSWQ7XG4gICAgICAvLyBBdHRlbXB0IHJlY29ubmVjdCAobm8gaW5pdGlhbFBsYXllckRhdGEsIHNvIHBsYXllcl9qb2luZWQgaXMgbm90IHNlbnQpXG4gICAgICB0aGlzLmNvbm5lY3QodGhpcy5nYW1lSWQsIHRoaXMucGxheWVySWQsIHRoaXMudG9rZW4pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgLy8gSWYgcmVjb25uZWN0IGZhaWxzLCBjbGVhciBzZXNzaW9uIGluZm9cbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2tla29wb2x5X2dhbWVfaWQnKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2tla29wb2x5X3BsYXllcl9pZCcpO1xuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgna2Vrb3BvbHlfc2Vzc2lvbl9pZCcpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgY29ubmVjdCA9IChnYW1lSWQsIHBsYXllcklkLCB0b2tlbiwgaW5pdGlhbFBsYXllckRhdGEpID0+IHtcbiAgICAvLyBFbnN1cmUgcm9vbUlkIGlzIGxvd2VyY2FzZVxuICAgIGNvbnN0IG5vcm1hbGl6ZWRSb29tSWQgPSBnYW1lSWQudG9Mb3dlckNhc2UoKS50cmltKCk7XG4gICAgdGhpcy5nYW1lSWQgPSBub3JtYWxpemVkUm9vbUlkO1xuICAgIHRoaXMucGxheWVySWQgPSBwbGF5ZXJJZDtcbiAgICB0aGlzLnRva2VuID0gdG9rZW47IC8vIFN0b3JlIHRoZSB0b2tlblxuICAgIHRoaXMuaW5pdGlhbFBsYXllckRhdGFUb1NlbmQgPSBpbml0aWFsUGxheWVyRGF0YTsgLy8gU3RvcmUgaW5pdGlhbCBkYXRhIGlmIHByb3ZpZGVkXG4gICAgLy8gLS0tIEFkZCBMb2dnaW5nIC0tLVxuICAgIGNvbnNvbGUubG9nKGBbQ09OTkVDVF0gU2V0IHRoaXMuaW5pdGlhbFBsYXllckRhdGFUb1NlbmQ6YCwgdGhpcy5pbml0aWFsUGxheWVyRGF0YVRvU2VuZCk7XG4gICAgLy8gLS0tXG4gICAgdGhpcy5sb2NhbFBsYXllcklkID0gcGxheWVySWQ7IC8vIFNldCBsb2NhbCBwbGF5ZXIgSURcblxuICAgIC8vIC0tLSBTaW1wbGlmaWVkIFNlc3Npb24gSUQgTG9naWMgLS0tXG4gICAgbGV0IHNlc3Npb25JZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzZXNzaW9uSWQnKTtcbiAgICBpZiAoIXNlc3Npb25JZCkge1xuICAgICAgc2Vzc2lvbklkID0gdGhpcy5nZW5lcmF0ZVNlc3Npb25JZCgpO1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Nlc3Npb25JZCcsIHNlc3Npb25JZCk7XG4gICAgfSBlbHNlIHtcbiAgICB9XG4gICAgdGhpcy5zZXNzaW9uSWQgPSBzZXNzaW9uSWQ7IC8vIEFzc2lnbiB0byB0aGUgY2xhc3MgcHJvcGVydHlcbiAgICAvLyAtLS1cblxuICAgIC8vIFJldHVybiBhIFByb21pc2UgdG8gYWxsb3cgYXN5bmMvYXdhaXQgdXNhZ2VcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKHRoaXMuc29ja2V0ICYmIHRoaXMuc29ja2V0LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOKSB7XG4gICAgICAgIHRoaXMub25Db25uZWN0aW9uQ2hhbmdlKCdjb25uZWN0ZWQnKTtcbiAgICAgICAgcmVzb2x2ZSgpOyAvLyBBbHJlYWR5IGNvbm5lY3RlZFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNvY2tldCAmJiB0aGlzLnNvY2tldC5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuQ09OTkVDVElORykge1xuICAgICAgICAvLyBXZSBtaWdodCB3YW50IHRvIHdhaXQgZm9yIHRoZSBleGlzdGluZyBjb25uZWN0aW9uIGF0dGVtcHQgb3IgcmVqZWN0XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ0Nvbm5lY3Rpb24gYXR0ZW1wdCBhbHJlYWR5IGluIHByb2dyZXNzLicpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuLi4uXG5cbiAgICAgICAgICAvLyBSZXNldCByZWNvbm5lY3QgYXR0ZW1wdHMgb24gc3VjY2Vzc2Z1bCBjb25uZWN0aW9uXG4gICAgICAgICAgdGhpcy5yZWNvbm5lY3RBdHRlbXB0cyA9IDA7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucmVjb25uZWN0VGltZXIpOyAvLyBDbGVhciBhbnkgZXhpc3RpbmcgcmVjb25uZWN0IHRpbWVyXG5cbiAgICAgICAgICAvLyBOb3RpZnkgR2FtZVJvb20gYWJvdXQgdGhlIGNvbm5lY3Rpb24gc3RhdHVzIGNoYW5nZVxuICAgICAgICAgIHRoaXMub25Db25uZWN0aW9uQ2hhbmdlKCdjb25uZWN0ZWQnKTtcblxuICAgICAgICAgIC8vIFJlcXVlc3QgYWN0aXZlIHBsYXllcnMgYWZ0ZXIgY29ubmVjdGlvbiBpcyBlc3RhYmxpc2hlZFxuICAgICAgICAgIC8vIEFkZGluZyBhIHNsaWdodCBkZWxheSB0byBlbnN1cmUgYmFja2VuZCBwcm9jZXNzZXMgam9pbiBmaXJzdFxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZSgnZ2V0X2FjdGl2ZV9wbGF5ZXJzJyk7XG4gICAgICAgICAgfSwgMTAwKTsgLy8gMTAwbXMgZGVsYXlcblxuICAgICAgICAgIC8vIFN0YXJ0IHBlcmlvZGljIGdhbWUgc3RhdGUgY2hlY2sgaWYgbm90IGFscmVhZHkgcnVubmluZ1xuICAgICAgICAgIC8vIHRoaXMuc3RhcnRQZXJpb2RpY0dhbWVTdGF0ZUNoZWNrKCk7IC8vIENvbnNpZGVyIGlmIHRoaXMgaXMgbmVlZGVkIGltbWVkaWF0ZWx5XG5cbiAgICAgICAgICAvLyBTYXZlIHNlc3Npb24gaW5mbyBmb3IgcmVjb25uZWN0XG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2tla29wb2x5X2dhbWVfaWQnLCB0aGlzLmdhbWVJZCk7XG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2tla29wb2x5X3BsYXllcl9pZCcsIHRoaXMucGxheWVySWQpO1xuICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdrZWtvcG9seV9zZXNzaW9uX2lkJywgdGhpcy5zZXNzaW9uSWQpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuc29ja2V0Lm9uY2xvc2UgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICB0aGlzLmhhbmRsZURpc2Nvbm5lY3QoZXZlbnQpO1xuICAgICAgICAgIC8vIERvbid0IGF1dG9tYXRpY2FsbHkgcmVqZWN0IG9uIGNsb3NlLCBsZXQgcmVjb25uZWN0IGxvZ2ljIGhhbmRsZSBpdCBpZiBuZWVkZWRcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnNvY2tldC5vbmVycm9yID0gKGVycm9yKSA9PiB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignV2ViU29ja2V0IEVycm9yOicsIGVycm9yKTtcbiAgICAgICAgICB0aGlzLm9uQ29ubmVjdGlvbkNoYW5nZSgnZXJyb3InKTtcbiAgICAgICAgICB0aGlzLm9uQ29ubmVjdGlvbkVycm9yKGVycm9yKTsgLy8gQ2FsbCB0aGUgZXJyb3IgY2FsbGJhY2tcbiAgICAgICAgICByZWplY3QoZXJyb3IpOyAvLyBSZWplY3QgdGhlIHByb21pc2Ugb24gZXJyb3JcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnNvY2tldC5vbm1lc3NhZ2UgPSB0aGlzLmhhbmRsZU1lc3NhZ2U7XG5cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgV2ViU29ja2V0OicsIGVycm9yKTtcbiAgICAgICAgdGhpcy5vbkNvbm5lY3Rpb25DaGFuZ2UoJ2Vycm9yJyk7XG4gICAgICAgIHRoaXMub25Db25uZWN0aW9uRXJyb3IoZXJyb3IpOyAvLyBDYWxsIHRoZSBlcnJvciBjYWxsYmFja1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIGRpc2Nvbm5lY3QgPSAocHJlc2VydmUgPSBmYWxzZSkgPT4ge1xuICAgIHRoaXMucHJlc2VydmVDb25uZWN0aW9uID0gcHJlc2VydmU7XG4gICAgaWYgKHRoaXMuc29ja2V0ICYmICF0aGlzLnByZXNlcnZlQ29ubmVjdGlvbikge1xuICAgICAgdGhpcy5zb2NrZXQuY2xvc2UoKTtcbiAgICAgIHRoaXMuc29ja2V0ID0gbnVsbDtcbiAgICAgIHRoaXMub25Db25uZWN0aW9uQ2hhbmdlKCdkaXNjb25uZWN0ZWQnKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMucHJlc2VydmVDb25uZWN0aW9uKSB7XG4gICAgfVxuICB9O1xuXG4gIHNlbmRNZXNzYWdlID0gKHR5cGUsIHBheWxvYWQpID0+IHtcbiAgICBpZiAodGhpcy5zb2NrZXQgJiYgdGhpcy5zb2NrZXQucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBKU09OLnN0cmluZ2lmeSh7IHR5cGUsIC4uLnBheWxvYWQgfSk7XG4gICAgICB0aGlzLnNvY2tldC5zZW5kKG1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oYENhbm5vdCBzZW5kIG1lc3NhZ2UsIFdlYlNvY2tldCBub3Qgb3Blbi4gU3RhdGU6ICR7dGhpcy5zb2NrZXQ/LnJlYWR5U3RhdGV9YCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIE1ldGhvZCB0byBjb25uZWN0IHRvIHRoZSBsb2JieSBzb2NrZXQgZm9yIHJlYWwtdGltZSBnYW1lIHVwZGF0ZXNcbiAgY29ubmVjdFRvTG9iYnkodG9rZW4sIHBsYXllcklkKSB7XG4gICAgaWYgKCF0b2tlbiB8fCAhcGxheWVySWQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Nhbm5vdCBjb25uZWN0IHRvIGxvYmJ5OiB0b2tlbiBhbmQgcGxheWVySWQgYXJlIHJlcXVpcmVkJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy50b2tlbiA9IHRva2VuO1xuICAgIHRoaXMucGxheWVySWQgPSBwbGF5ZXJJZDtcblxuICAgIC8vIEdlbmVyYXRlIGEgc2Vzc2lvbiBJRCBpZiB3ZSBkb24ndCBoYXZlIG9uZSB5ZXRcbiAgICBpZiAoIXRoaXMuc2Vzc2lvbklkKSB7XG4gICAgICB0aGlzLnNlc3Npb25JZCA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLCAxNSk7XG4gICAgfVxuXG4gICAgLy8gQ2xlYW4gdXAgYW55IGV4aXN0aW5nIGxvYmJ5IGNvbm5lY3Rpb25cbiAgICB0aGlzLmRpc2Nvbm5lY3RGcm9tTG9iYnkoKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBDcmVhdGUgV2ViU29ja2V0IGNvbm5lY3Rpb24gd2l0aCBxdWVyeSBwYXJhbWV0ZXJzIGluY2x1ZGluZyB0b2tlblxuICAgICAgLy8gU3RyaXAgdGhlIFwiQmVhcmVyIFwiIHByZWZpeCBmcm9tIHRoZSB0b2tlbiBpZiBwcmVzZW50XG4gICAgICBjb25zdCB0b2tlblZhbHVlID0gdGhpcy50b2tlbi5zdGFydHNXaXRoKCdCZWFyZXIgJykgPyB0aGlzLnRva2VuLnN1YnN0cmluZyg3KSA6IHRoaXMudG9rZW47XG4gICAgICBjb25zdCBzb2NrZXRQcm90b2NvbCA9IHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHBzOicgPyAnd3NzOicgOiAnd3M6JztcbiAgICAgIGNvbnN0IGhvc3QgPSB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgPT09ICdsb2NhbGhvc3QnID8gJ2xvY2FsaG9zdDo4MDgwJyA6IHdpbmRvdy5sb2NhdGlvbi5ob3N0O1xuICAgICAgY29uc3Qgd3NVcmwgPSBgJHtzb2NrZXRQcm90b2NvbH0vLyR7aG9zdH0vd3MvbG9iYnk/c2Vzc2lvbklkPSR7dGhpcy5zZXNzaW9uSWR9JnRva2VuPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHRva2VuVmFsdWUpfWA7XG5cbiAgICAgIHRoaXMubG9iYnlTb2NrZXQgPSBuZXcgV2ViU29ja2V0KHdzVXJsKTtcbi4uLlxuXG4gIC8vIExvYmJ5IGNvbm5lY3Rpb24gaGFuZGxlcnNcbiAgaGFuZGxlTG9iYnlDb25uZWN0ID0gKGV2ZW50KSA9PiB7XG4gICAgY29uc29sZS5sb2coYExvYmJ5IFdlYlNvY2tldCBjb25uZWN0ZWQgZm9yIHBsYXllciAke3RoaXMucGxheWVySWR9YCk7XG4gICAgY29uc29sZS5sb2coYExvYmJ5IGNvbm5lY3Rpb24gZXN0YWJsaXNoZWQgYXQgJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9YCk7XG5cbiAgICAvLyBSZXNldCByZWNvbm5lY3QgYXR0ZW1wdHMgb24gc3VjY2Vzc2Z1bCBjb25uZWN0aW9uXG4gICAgdGhpcy5yZWNvbm5lY3RBdHRlbXB0cyA9IDA7XG5cbiAgICAvLyBSZXF1ZXN0IGN1cnJlbnQgZ2FtZSBsaXN0IGltbWVkaWF0ZWx5IGFmdGVyIGNvbm5lY3Rpb25cbiAgICAvLyBSZWR1Y2VkIHRpbWVvdXQgdG8gNTAwbXMgZm9yIGZhc3RlciBpbml0aWFsIHN5bmNcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFwiUmVxdWVzdGluZyBpbml0aWFsIGdhbWUgbGlzdCBhZnRlciBXZWJTb2NrZXQgY29ubmVjdGlvblwiKTtcbiAgICAgIGlmICh3aW5kb3cucmVmcmVzaEdhbWVMaXN0ICYmIHR5cGVvZiB3aW5kb3cucmVmcmVzaEdhbWVMaXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdpbmRvdy5yZWZyZXNoR2FtZUxpc3QoKTtcbiAgICAgIH1cbiAgICB9LCA1MDApO1xuICB9O1xuXG4gIGhhbmRsZUxvYmJ5RGlzY29ubmVjdCA9IChldmVudCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKGBMb2JieSBXZWJTb2NrZXQgZGlzY29ubmVjdGVkOiAke2V2ZW50LnJlYXNvbn1gKTtcblxuICAgIC8vIFRyeSB0byByZWNvbm5lY3QgdW5sZXNzIGl0IHdhcyBhbiBpbnRlbnRpb25hbCBkaXNjb25uZWN0XG4gICAgaWYgKCFldmVudC53YXNDbGVhbiAmJiB0aGlzLnJlY29ubmVjdEF0dGVtcHRzIDwgdGhpcy5tYXhSZWNvbm5lY3RBdHRlbXB0cykge1xuICAgICAgdGhpcy5yZWNvbm5lY3RBdHRlbXB0cysrO1xuXG4gICAgICBjb25zb2xlLmxvZyhgQXR0ZW1wdGluZyB0byByZWNvbm5lY3QgdG8gbG9iYnkgKCR7dGhpcy5yZWNvbm5lY3RBdHRlbXB0c30vJHt0aGlzLm1heFJlY29ubmVjdEF0dGVtcHRzfSkuLi5gKTtcblxuICAgICAgLy8gRXhwb25lbnRpYWwgYmFja29mZlxuICAgICAgY29uc3QgZGVsYXkgPSB0aGlzLnJlY29ubmVjdEludGVydmFsICogTWF0aC5wb3coMS41LCB0aGlzLnJlY29ubmVjdEF0dGVtcHRzIC0gMSk7XG5cbiAgICAgIHRoaXMucmVjb25uZWN0VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5jb25uZWN0VG9Mb2JieSh0aGlzLnRva2VuLCB0aGlzLnBsYXllcklkKTtcbiAgICAgIH0sIGRlbGF5KTtcbiAgICB9XG4gIH07XG5cbiAgaGFuZGxlTG9iYnlFcnJvciA9IChlcnJvcikgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0xvYmJ5IFdlYlNvY2tldCBlcnJvcjonLCBlcnJvcik7XG4gIH07XG4uLi5cblxuICBoYW5kbGVEaXNjb25uZWN0ID0gKGV2ZW50KSA9PiB7XG4gICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgIGNvbnNvbGUubG9nKGBXZWJTb2NrZXQgZGlzY29ubmVjdGVkIGF0ICR7dGltZXN0YW1wfTogY29kZT0ke2V2ZW50LmNvZGV9LCByZWFzb249JHtldmVudC5yZWFzb259LCB3YXNDbGVhbj0ke2V2ZW50Lndhc0NsZWFufWApO1xuICAgIGNvbnNvbGUubG9nKGBEaXNjb25uZWN0aW9uIGRldGFpbHMgLSBHYW1lSUQ6ICR7dGhpcy5nYW1lSWR9LCBQbGF5ZXJJRDogJHt0aGlzLnBsYXllcklkfSwgU2Vzc2lvbklEOiAke3RoaXMuc2Vzc2lvbklkfWApO1xuICAgIGNvbnNvbGUubG9nKGBOYXZpZ2F0aW9uIHN0YXRlOiBpc05hdmlnYXRpbmc9JHt0aGlzLmlzTmF2aWdhdGluZ30sIHByZXNlcnZlQ29ubmVjdGlvbj0ke3RoaXMucHJlc2VydmVDb25uZWN0aW9ufWApO1xuXG4gICAgLy8gQ2FsbCBjb25uZWN0aW9uIGNoYW5nZSBjYWxsYmFja1xuICAgIHRoaXMub25Db25uZWN0aW9uQ2hhbmdlKCdkaXNjb25uZWN0ZWQnKTtcbi4uLlxuXG4gICAgLy8gVHJ5IHRvIHJlY29ubmVjdCB1bmxlc3MgaXQgd2FzIGFuIGludGVudGlvbmFsIGRpc2Nvbm5lY3Qgb3IgcHJlc2VydmVDb25uZWN0aW9uIGlzIHRydWVcbiAgICBpZiAoIWV2ZW50Lndhc0NsZWFuICYmICF0aGlzLnByZXNlcnZlQ29ubmVjdGlvbiAmJiB0aGlzLnJlY29ubmVjdEF0dGVtcHRzIDwgdGhpcy5tYXhSZWNvbm5lY3RBdHRlbXB0cykge1xuICAgICAgdGhpcy5yZWNvbm5lY3RBdHRlbXB0cysrO1xuXG4gICAgICBjb25zb2xlLmxvZyhgQXR0ZW1wdGluZyB0byByZWNvbm5lY3QgKCR7dGhpcy5yZWNvbm5lY3RBdHRlbXB0c30vJHt0aGlzLm1heFJlY29ubmVjdEF0dGVtcHRzfSkuLi5gKTtcblxuICAgICAgLy8gRXhwb25lbnRpYWwgYmFja29mZlxuICAgICAgY29uc3QgZGVsYXkgPSB0aGlzLnJlY29ubmVjdEludGVydmFsICogTWF0aC5wb3coMS41LCB0aGlzLnJlY29ubmVjdEF0dGVtcHRzIC0gMSk7XG5cbiAgICAgIHRoaXMucmVjb25uZWN0VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYFJlY29ubmVjdGlvbiBhdHRlbXB0ICR7dGhpcy5yZWNvbm5lY3RBdHRlbXB0c30gYXQgJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9YCk7XG4gICAgICAgIC8vIC0tLSBQYXNzIHJlcXVpcmVkIGFyZ3VtZW50cyB0byBjb25uZWN0IC0tLVxuICAgICAgICB0aGlzLmNvbm5lY3QodGhpcy5nYW1lSWQsIHRoaXMucGxheWVySWQsIHRoaXMudG9rZW4pXG4gICAgICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmVycm9yKGBSZWNvbm5lY3Rpb24gYXR0ZW1wdCAke3RoaXMucmVjb25uZWN0QXR0ZW1wdHN9IGZhaWxlZDpgLCBlcnIpKTtcbiAgICAgICAgLy8gLS0tXG4gICAgICB9LCBkZWxheSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnByZXNlcnZlQ29ubmVjdGlvbikge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkNvbm5lY3Rpb24gcHJlc2VydmVkLCBub3QgYXR0ZW1wdGluZyByZWNvbm5lY3QuXCIpO1xuICAgIH0gZWxzZSBpZiAoZXZlbnQud2FzQ2xlYW4pIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJDbGVhbiBkaXNjb25uZWN0aW9uLCBub3QgYXR0ZW1wdGluZyByZWNvbm5lY3QuXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTWF4IHJlY29ubmVjdCBhdHRlbXB0cyByZWFjaGVkLCBnaXZpbmcgdXAuXCIpO1xuICAgICAgICB0aGlzLm9uQ29ubmVjdGlvbkNoYW5nZSgnZmFpbGVkJyk7IC8vIEluZGljYXRlIGZpbmFsIGZhaWx1cmVcbiAgICB9XG4gIH07XG4uLi5cblxuICAgIC8vIFRyeSB0byBkZXRlY3QgdGhlIHNwZWNpZmljIGlzc3VlXG4gICAgZmV0Y2goYGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9oZWFsdGhgKVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnQmFja2VuZCBoZWFsdGggY2hlY2sgcmVzcG9uc2U6JywgcmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcignQmFja2VuZCBhcHBlYXJzIHRvIGJlIHVucmVhY2hhYmxlLiBDaGVjayBpZiB0aGUgc2VydmVyIGlzIHJ1bm5pbmcgb24gcG9ydCA4MDgwOicsIGVycik7XG4gICAgICB9KTtcbiAgfTtcblxuICBoYW5kbGVNZXNzYWdlID0gKGV2ZW50KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKCdSYXcgV2ViU29ja2V0IG1lc3NhZ2U6JywgZXZlbnQuZGF0YSk7XG5cbiAgICAgIC8vIFBhcnNlIHRoZSBKU09OIG1lc3NhZ2VcbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xuICAgICAgY29uc29sZS5sb2coJ1JlY2VpdmVkIG1lc3NhZ2U6JywgZGF0YSk7XG5cbiAgICAgIC8vIEhhbmRsZSBkaWZmZXJlbnQgbWVzc2FnZSB0eXBlc1xuICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnZ2FtZV9zdGF0ZV91cGRhdGUnOlxuICAgICAgICAgIC8vIENhbGwgdGhlIGV4aXN0aW5nIGhhbmRsZXIgZm9yIGdhbWUgc3RhdGVcbiAgICAgICAgICB0aGlzLmhhbmRsZUdhbWVTdGF0ZShkYXRhKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdwbGF5ZXJfam9pbmVkX2Fjayc6XG4gICAgICAgICAgLy8gTG9nIGFja25vd2xlZGdtZW50IGZyb20gc2VydmVyXG4gICAgICAgICAgY29uc29sZS5sb2coJ1tBQ0tdIFNlcnZlciBhY2tub3dsZWRnZWQgcGxheWVyIGpvaW5lZDonLCBkYXRhLnBsYXllcj8uaWQpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2dhbWVfc3RhdGUnOlxuICAgICAgICAgIHRoaXMuaGFuZGxlR2FtZVN0YXRlKGRhdGEpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2RpY2Vfcm9sbGVkJzpcbiAgICAgICAgICBjb25zb2xlLmxvZygnW0RJQ0VdIFJlY2VpdmVkIGRpY2Ugcm9sbCByZXN1bHQ6JywgZGF0YSk7XG4gICAgICAgICAgdGhpcy5oYW5kbGVEaWNlUm9sbGVkKGRhdGEpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2RpY2Vfcm9sbGluZyc6XG4gICAgICAgICAgY29uc29sZS5sb2coJ1tESUNFXSBSZWNlaXZlZCBkaWNlIHJvbGxpbmcgc3RhdGU6JywgZGF0YS5pc1JvbGxpbmcpO1xuICAgICAgICAgIHRoaXMuaGFuZGxlRGljZVJvbGxpbmcoZGF0YS5pc1JvbGxpbmcpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2FjdGl2ZV9wbGF5ZXJzJzpcbiAgICAgICAgICB0aGlzLmhhbmRsZUFjdGl2ZVBsYXllcnMoZGF0YSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncGxheWVyX2pvaW5lZCc6XG4gICAgICAgICAgdGhpcy5oYW5kbGVQbGF5ZXJKb2luZWQoZGF0YS5wbGF5ZXIpO1xuICAgICAgICAgIGJyZWFrO1xuLi4uXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdbU1lOQ19FUlJPUl0gRXJyb3Igd2hpbGUgYW5hbHl6aW5nIG1hbGZvcm1lZCBKU09OOicsIGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXR0ZW1wdCByZWNvdmVyeSBieSByZXF1ZXN0aW5nIGZyZXNoIGdhbWUgc3RhdGVcbiAgICAgICAgdGhpcy5hdHRlbXB0U3luY1JlY292ZXJ5KCdqc29uX3BhcnNlX2Vycm9yJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdbU1lOQ19FUlJPUl0gRXJyb3IgcHJvY2Vzc2luZyBXZWJTb2NrZXQgbWVzc2FnZTonLCBlcnJvcik7XG4gICAgICAgIHRoaXMuaGFuZGxlU3luY0Vycm9yKCdtZXNzYWdlX3Byb2Nlc3NpbmcnLCBlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIEhlbHBlciBtZXRob2QgdG8gcHJvY2VzcyByZWNvdmVyZWQgbWVzc2FnZXMgZnJvbSBKU09OIHBhcnNpbmcgZXJyb3JzXG4gIHByb2Nlc3NSZWNvdmVyZWRNZXNzYWdlID0gKGRhdGEpID0+IHtcbiAgICBjb25zb2xlLmxvZygnUHJvY2Vzc2luZyByZWNvdmVyZWQgbWVzc2FnZTonLCBkYXRhKTtcbi4uLlxuXG4gIGhhbmRsZUNhcmRSZW1haW5pbmcgPSAoY2FyZHNSZW1haW5pbmcpID0+IHtcbiAgICBzdG9yZS5kaXNwYXRjaCh1cGRhdGVDYXJkc1JlbWFpbmluZyhjYXJkc1JlbWFpbmluZykpO1xuICB9O1xuXG4gIGhhbmRsZUNhcmREcmF3biA9IChjYXJkKSA9PiB7XG4gICAgY29uc3QgeyBkaXNwYXRjaCB9ID0gc3RvcmU7XG4gICAgLy8gVXNlIHRoZSBtYWluIGdhbWVTbGljZSdzIGFkZEdhbWVNZXNzYWdlIHRvIHNob3cgY2FyZCBpbmZvcm1hdGlvblxuICAgIGRpc3BhdGNoKGFkZEdhbWVNZXNzYWdlKHtcbiAgICAgIHR5cGU6ICdDQVJEJyxcbiAgICAgIGNvbnRlbnQ6IGBDYXJkIGRyYXduOiAke2NhcmQubmFtZSB8fCAnVW5rbm93bid9IC0gJHtjYXJkLmRlc2NyaXB0aW9uIHx8ICdObyBkZXNjcmlwdGlvbid9YCxcbiAgICAgIGRhdGE6IGNhcmQsXG4gICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcbiAgICB9KSk7XG4gIH07XG5cbiAgaGFuZGxlQ2FyZFBsYXllZCA9IChjYXJkSWQpID0+IHtcbiAgICAvLyBBZGQgYSBnYW1lIG1lc3NhZ2UgZm9yIGNhcmQgcGxheWVkXG4gICAgc3RvcmUuZGlzcGF0Y2goYWRkR2FtZU1lc3NhZ2Uoe1xuICAgICAgdHlwZTogJ0NBUkRfUExBWUVEJyxcbiAgICAgIGNvbnRlbnQ6IGBDYXJkICR7Y2FyZElkfSB3YXMgcGxheWVkYCxcbiAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKVxuICAgIH0pKTtcbiAgfTtcbi4uLlxuXG4gICAgICAgIC8vIElmIGdhbWUgaGFzbid0IHN0YXJ0ZWQgeWV0LCB0cnkgYWdhaW5cbiAgICAgICAgaWYgKCFnYW1lU3RhdGUuZ2FtZVN0YXJ0ZWQgfHwgZ2FtZVN0YXRlLmdhbWVQaGFzZSAhPT0gJ3BsYXlpbmcnIHx8XG4gICAgICAgICAgICBzbGljZXNHYW1lU3RhdGUuc3RhdHVzICE9PSAnQUNUSVZFJykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdbU1RBUlRfR0FNRV0gR2FtZSBub3Qgc3RhcnRlZCB5ZXQsIHNlbmRpbmcgZ2FtZTpzdGFydCBtZXNzYWdlIGFnYWluJyk7XG4gICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZSgnZ2FtZTpzdGFydCcsIHt9KTtcblxuICAgICAgICAgIC8vIERpc3BhdGNoIHN0YXJ0R2FtZUFzeW5jIGFjdGlvbiBhZ2FpblxuICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdnYW1lL3N0YXJ0R2FtZUFzeW5jL2Z1bGZpbGxlZCcsXG4gICAgICAgICAgICBwYXlsb2FkOiB0cnVlLFxuICAgICAgICAgICAgbWV0YTogeyByZXF1ZXN0SWQ6ICdnYW1lX3N0YXJ0X3JldHJ5JywgYXJnOiB1bmRlZmluZWQgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gU3luY2hyb25pemUgZ2FtZSBzdGF0ZSBhZ2FpblxuICAgICAgICAgIHRoaXMuc3luY0dhbWVTdGF0ZUFjcm9zc1NsaWNlcygnQUNUSVZFJyk7XG5cbiAgICAgICAgICAvLyBTZXQgdXAgdGhlIGdhbWUgc3RhcnQgcmV0cnkgY2hlY2tcbiAgICAgICAgICB0aGlzLnNldHVwR2FtZVN0YXJ0UmV0cnlDaGVjaygpO1xuICAgICAgICB9XG4gICAgICB9LCAxMDAwKTtcblxuICAgICAgLy8gU2V0IHVwIHRoZSBnYW1lIHN0YXJ0IHJldHJ5IGNoZWNrIGltbWVkaWF0ZWx5XG4gICAgICB0aGlzLnNldHVwR2FtZVN0YXJ0UmV0cnlDaGVjaygpO1xuICAgIH0sIDIwMCk7XG4gIH07XG5cbiAgcm9sbERpY2UgPSAoKSA9PiB7XG4gICAgdGhpcy5zZW5kTWVzc2FnZSgncm9sbF9kaWNlJywge30pO1xuICB9O1xuLi4uXG5cbiAgICAvLyBVc2UgdGhlIHN5bmNocm9uaXphdGlvbiBmdW5jdGlvbiB0byBlbnN1cmUgY29uc2lzdGVudCBzdGF0ZSBhY3Jvc3Mgc2xpY2VzXG4gICAgdGhpcy5zeW5jR2FtZVN0YXRlQWNyb3NzU2xpY2VzKCdBQ1RJVkUnKTtcblxuICAgIC8vIFN0b3JlIHRoZSBnYW1lSWQgZm9yIG5hdmlnYXRpb25cbiAgICBjb25zdCBnYW1lSWQgPSB0aGlzLmdhbWVJZCB8fCBzdG9yZWRHYW1lSWQ7XG5cbiAgICAvLyBTZXQgdXAgbXVsdGlwbGUgcmV0cnkgY2hlY2tzIHdpdGggZGlmZmVyZW50IGluaXRpYWwgZGVsYXlzXG4gICAgLy8gVGhpcyBjcmVhdGVzIGEgbW9yZSByb2J1c3QgcmV0cnkgcGF0dGVybiB0aGF0J3MgbGVzcyBsaWtlbHkgdG8gZmFpbFxuXG4gICAgLy8gRmlyc3QgY2hlY2sgdmVyeSBxdWlja2x5XG4gICAgdGhpcy5nYW1lU3RhcnRSZXRyeVRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhgW0dBTUVfU1RBUlRfUkVUUlldIEV4ZWN1dGluZyBmaXJzdCByZXRyeSBjaGVjayBmb3IgcGxheWVyICR7dGhpcy5wbGF5ZXJJZH1gKTtcbiAgICAgIHRoaXMuY2hlY2tHYW1lQm9hcmRWaXNpYmlsaXR5KGdhbWVJZCwgaGFzU3RvcmFnZUZsYWcpO1xuICAgIH0sIDEwMCk7XG4uLi5cblxuICAvLyBIYW5kbGUgc3luY2hyb25pemF0aW9uIGVycm9yc1xuICBoYW5kbGVTeW5jRXJyb3IgPSAoZXJyb3JUeXBlLCBlcnJvciwgZGF0YSA9IG51bGwpID0+IHtcbiAgICBjb25zb2xlLmVycm9yKGBbU1lOQ19FUlJPUl0gJHtlcnJvclR5cGV9IGVycm9yOmAsIGVycm9yKTtcblxuICAgIC8vIExvZyBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudCBzdGF0ZVxuICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgY29uc29sZS5sb2coJ1tTWU5DX0VSUk9SXSBDdXJyZW50IGdhbWUgc3RhdGU6Jywge1xuICAgICAgZ2FtZVN0YXJ0ZWQ6IGN1cnJlbnRTdGF0ZS5nYW1lLmdhbWVTdGFydGVkLFxuICAgICAgZ2FtZVBoYXNlOiBjdXJyZW50U3RhdGUuZ2FtZS5nYW1lUGhhc2UsXG4gICAgICBob3N0SWQ6IGN1cnJlbnRTdGF0ZS5nYW1lLmhvc3RJZCxcbiAgICAgIHBsYXllckNvdW50OiBPYmplY3Qua2V5cyhjdXJyZW50U3RhdGUucGxheWVycy5wbGF5ZXJzIHx8IHt9KS5sZW5ndGgsXG4gICAgICBzbGljZXNHYW1lU3RhdHVzOiBjdXJyZW50U3RhdGUuc2xpY2VzPy5nYW1lPy5zdGF0dXMgfHwgJ3Vua25vd24nXG4gICAgfSk7XG5cbiAgICAvLyBMb2cgdGhlIGRhdGEgdGhhdCBjYXVzZWQgdGhlIGVycm9yXG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdbU1lOQ19FUlJPUl0gRGF0YSB0aGF0IGNhdXNlZCB0aGUgZXJyb3I6JywgZGF0YSk7XG4gICAgfVxuXG4gICAgLy8gQXR0ZW1wdCByZWNvdmVyeSBiYXNlZCBvbiBlcnJvciB0eXBlXG4gICAgdGhpcy5hdHRlbXB0U3luY1JlY292ZXJ5KGVycm9yVHlwZSk7XG4gIH07XG5cbiAgLy8gQXR0ZW1wdCB0byByZWNvdmVyIGZyb20gc3luY2hyb25pemF0aW9uIGVycm9yc1xuICBhdHRlbXB0U3luY1JlY292ZXJ5ID0gKGVycm9yVHlwZSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKGBbU1lOQ19SRUNPVkVSWV0gQXR0ZW1wdGluZyByZWNvdmVyeSBmcm9tICR7ZXJyb3JUeXBlfWApO1xuXG4gICAgLy8gT25seSBhdHRlbXB0IHJlY292ZXJ5IGlmIHNvY2tldCBpcyBvcGVuXG4gICAgaWYgKCF0aGlzLnNvY2tldCB8fCB0aGlzLnNvY2tldC5yZWFkeVN0YXRlICE9PSBXZWJTb2NrZXQuT1BFTikge1xuICAgICAgY29uc29sZS5sb2coJ1tTWU5DX1JFQ09WRVJZXSBDYW5ub3QgYXR0ZW1wdCByZWNvdmVyeTogc29ja2V0IG5vdCBvcGVuJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUmVxdWVzdCBmcmVzaCBnYW1lIHN0YXRlXG4gICAgY29uc29sZS5sb2coJ1tTWU5DX1JFQ09WRVJZXSBSZXF1ZXN0aW5nIGZyZXNoIGdhbWUgc3RhdGUnKTtcbiAgICB0aGlzLnNlbmRNZXNzYWdlKCdnZXRfZ2FtZV9zdGF0ZScsIHsgZnVsbDogdHJ1ZSB9KTtcblxuICAgIC8vIFJlcXVlc3QgYWN0aXZlIHBsYXllcnMgbGlzdFxuICAgIGNvbnNvbGUubG9nKCdbU1lOQ19SRUNPVkVSWV0gUmVxdWVzdGluZyBhY3RpdmUgcGxheWVycyBsaXN0Jyk7XG4gICAgdGhpcy5zZW5kTWVzc2FnZSgnZ2V0X2FjdGl2ZV9wbGF5ZXJzJywge30pO1xuXG4gICAgLy8gTG9nIHJlY292ZXJ5IGF0dGVtcHRcbiAgICBjb25zb2xlLmxvZygnW1NZTkNfUkVDT1ZFUlldIFJlY292ZXJ5IGF0dGVtcHQgY29tcGxldGVkIGF0JywgbmV3IERhdGUoKS50b0lTT1N0cmluZygpKTtcbiAgfTtcbi4uLlxuXG4gIC8vIFNldHVwIHNvY2tldCBldmVudCBoYW5kbGVyc1xuICBzZXR1cFNvY2tldEV2ZW50SGFuZGxlcnMoKSB7XG4gICAgaWYgKCF0aGlzLnNvY2tldCkge1xuICAgICAgY29uc29sZS5lcnJvcignQ2Fubm90IHNldCB1cCBldmVudCBoYW5kbGVyczogc29ja2V0IGlzIG5vdCBpbml0aWFsaXplZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc29ja2V0Lm9ub3BlbiA9IHRoaXMuaGFuZGxlQ29ubmVjdDtcbiAgICB0aGlzLnNvY2tldC5vbmNsb3NlID0gdGhpcy5oYW5kbGVEaXNjb25uZWN0O1xuICAgIHRoaXMuc29ja2V0Lm9uZXJyb3IgPSB0aGlzLmhhbmRsZUVycm9yO1xuICAgIHRoaXMuc29ja2V0Lm9ubWVzc2FnZSA9IHRoaXMuaGFuZGxlTWVzc2FnZTtcblxuICAgIGNvbnNvbGUubG9nKCdXZWJTb2NrZXQgZXZlbnQgaGFuZGxlcnMgc2V0IHVwJyk7XG4gIH1cbi4uLlxuXG4gIC8vIEFkZCB0aGlzIG5ldyBoYW5kbGVyIG1ldGhvZFxuICBoYW5kbGVUdXJuQ2hhbmdlZCA9IChkYXRhKSA9PiB7XG4gICAgY29uc3QgeyBkaXNwYXRjaCB9ID0gc3RvcmU7XG4gICAgY29uc3QgeyBjdXJyZW50VHVybiwgcGxheWVyTmFtZSwgcm9sbGVkRG91YmxlcyB9ID0gZGF0YTtcbiAgICAvLyBVcGRhdGUgdGhlIGN1cnJlbnQgcGxheWVyIGluIFJlZHV4XG4gICAgZGlzcGF0Y2goc2V0Q3VycmVudFBsYXllcihjdXJyZW50VHVybikpO1xuXG4gICAgLy8gQWRkIGEgZ2FtZSBtZXNzYWdlXG4gICAgbGV0IGNvbnRlbnQgPSByb2xsZWREb3VibGVzXG4gICAgICA/IGAke3BsYXllck5hbWV9IHJvbGxlZCBkb3VibGVzIGFuZCBnZXRzIGFub3RoZXIgdHVybiFgXG4gICAgICA6IGBJdCdzIG5vdyAke3BsYXllck5hbWV9J3MgdHVybi5gO1xuICAgIGRpc3BhdGNoKGFkZEdhbWVNZXNzYWdlKHtcbiAgICAgIHR5cGU6IHJvbGxlZERvdWJsZXMgPyAnRVhUUkFfVFVSTicgOiAnVFVSTl9DSEFOR0UnLFxuICAgICAgcGxheWVySWQ6IGN1cnJlbnRUdXJuLFxuICAgICAgY29udGVudCxcbiAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKVxuICAgIH0pKTtcbi4uLlxuUGF0aDoga2Vrb3BvbHktYmFja2VuZC9pbnRlcm5hbC9hcGkvaGFuZGxlcnMvd2Vic29ja2V0X2hhbmRsZXIuZ29cbnBhY2thZ2UgaGFuZGxlcnNcblxuaW1wb3J0IChcblx0XCJmbXRcIlxuXHRcIm5ldC9odHRwXCJcblx0XCJzdHJpbmdzXCJcblx0XCJ0aW1lXCJcblxuXHRcImdpdGh1Yi5jb20vZ29sYW5nLWp3dC9qd3QvdjVcIlxuXHRcImdpdGh1Yi5jb20vZ29yaWxsYS93ZWJzb2NrZXRcIlxuXHRcImdpdGh1Yi5jb20vbGFic3RhY2svZWNoby92NFwiXG5cdFwiZ28udWJlci5vcmcvemFwXCJcblxuXHRcImdpdGh1Yi5jb20va2Vrb3BvbHkvYmFja2VuZC9pbnRlcm5hbC9hcGkvbWlkZGxld2FyZS9hdXRoXCIgLy8gSW1wb3J0IGF1dGggY2xhaW1zXG5cdFwiZ2l0aHViLmNvbS9rZWtvcG9seS9iYWNrZW5kL2ludGVybmFsL2NvbmZpZ1wiICAgICAgICAgICAgICAvLyBJbXBvcnQgY29uZmlnXG5cdGdhbWVXcyBcImdpdGh1Yi5jb20va2Vrb3BvbHkvYmFja2VuZC9pbnRlcm5hbC9nYW1lL3dlYnNvY2tldFwiXG4pXG5cbi8vIFdlYlNvY2tldEhhbmRsZXIgaGFuZGxlcyBXZWJTb2NrZXQgY29ubmVjdGlvbnNcbnR5cGUgV2ViU29ja2V0SGFuZGxlciBzdHJ1Y3Qge1xuXHRodWIgICAgKmdhbWVXcy5IdWJcblx0bG9nZ2VyICp6YXAuU3VnYXJlZExvZ2dlclxuXHRjZmcgICAgKmNvbmZpZy5Db25maWcgLy8gQWRkZWQgY29uZmlnIGZpZWxkXG59XG5cbi8vIE5ld1dlYlNvY2tldEhhbmRsZXIgY3JlYXRlcyBhIG5ldyBXZWJTb2NrZXRIYW5kbGVyXG5mdW5jIE5ld1dlYlNvY2tldEhhbmRsZXIoaHViICpnYW1lV3MuSHViLCBsb2dnZXIgKnphcC5TdWdhcmVkTG9nZ2VyLCBjZmcgKmNvbmZpZy5Db25maWcpICpXZWJTb2NrZXRIYW5kbGVyIHsgLy8gQWRkZWQgY2ZnIHBhcmFtZXRlclxuXHRyZXR1cm4gJldlYlNvY2tldEhhbmRsZXJ7XG5cdFx0aHViOiAgICBodWIsXG5cdFx0bG9nZ2VyOiBsb2dnZXIsXG5cdFx0Y2ZnOiAgICBjZmcsIC8vIFN0b3JlIGNvbmZpZ1xuXHR9XG59XG5cbi8vIFVwZ3JhZGVyIGlzIHVzZWQgdG8gdXBncmFkZSBIVFRQIGNvbm5lY3Rpb25zIHRvIFdlYlNvY2tldCBjb25uZWN0aW9uc1xudmFyIHVwZ3JhZGVyID0gd2Vic29ja2V0LlVwZ3JhZGVye1xuXHRSZWFkQnVmZmVyU2l6ZTogIDEwMjQsXG5cdFdyaXRlQnVmZmVyU2l6ZTogMTAyNCxcblx0Ly8gQWxsb3cgY29ubmVjdGlvbnMgZnJvbSBhbnkgb3JpZ2luXG5cdENoZWNrT3JpZ2luOiBmdW5jKHIgKmh0dHAuUmVxdWVzdCkgYm9vbCB7XG5cdFx0cmV0dXJuIHRydWVcblx0fSxcbn1cbi4uLlxuXG5cdGNsYWltcywgb2sgOj0gdG9rZW4uQ2xhaW1zLigqYXV0aC5DbGFpbXMpXG5cdGlmICFvayB7XG5cdFx0cmV0dXJuIG5pbCwgZm10LkVycm9yZihcImZhaWxlZCB0byBleHRyYWN0IGNsYWltc1wiKVxuXHR9XG5cblx0cmV0dXJuIGNsYWltcywgbmlsXG59XG5cbi8vIEhhbmRsZUNvbm5lY3Rpb24gaGFuZGxlcyBXZWJTb2NrZXQgY29ubmVjdGlvbnNcbmZ1bmMgKGggKldlYlNvY2tldEhhbmRsZXIpIEhhbmRsZUNvbm5lY3Rpb24oYyBlY2hvLkNvbnRleHQpIGVycm9yIHtcblx0aC5sb2dnZXIuSW5mb2YoXCJXZWJTb2NrZXQgY29ubmVjdGlvbiBhdHRlbXB0IHJlY2VpdmVkXCIpXG5cblx0Ly8gR2V0IGdhbWUgSUQgZnJvbSBwYXRoIHBhcmFtZXRlciBhbmQgbm9ybWFsaXplIHRvIGxvd2VyY2FzZVxuXHRnYW1lSUQgOj0gc3RyaW5ncy5Ub0xvd2VyKGMuUGFyYW0oXCJnYW1lSWRcIikpXG5cdGgubG9nZ2VyLkluZm9mKFwiT3JpZ2luYWwgZ2FtZUlEOiAlcywgTm9ybWFsaXplZDogJXNcIiwgYy5QYXJhbShcImdhbWVJZFwiKSwgZ2FtZUlEKVxuXHRpZiBnYW1lSUQgPT0gXCJcIiB7XG5cdFx0aC5sb2dnZXIuV2FybihcIkNvbm5lY3Rpb24gYXR0ZW1wdCBtaXNzaW5nIGdhbWVJZFwiKVxuXHRcdHJldHVybiBlY2hvLk5ld0hUVFBFcnJvcihodHRwLlN0YXR1c0JhZFJlcXVlc3QsIFwiTWlzc2luZyBnYW1lIElEXCIpXG5cdH1cblx0aC5sb2dnZXIuSW5mb2YoXCJDb25uZWN0aW9uIGZvciBnYW1lOiAlc1wiLCBnYW1lSUQpXG4uLi5cblx0aC5sb2dnZXIuSW5mb2YoXCJTZXNzaW9uSUQ6ICVzXCIsIHNlc3Npb25JRClcblxuXHQvLyBMb2cgY29tcGxldGUgY29ubmVjdGlvbiBwYXJhbWV0ZXJzXG5cdGgubG9nZ2VyLkluZm9mKFwiQXR0ZW1wdGluZyB0byB1cGdyYWRlIGNvbm5lY3Rpb24gLSBHYW1lSUQ6ICVzIChsb3dlcmNhc2UpLCBQbGF5ZXJJRDogJXMsIFNlc3Npb25JRDogJXNcIixcblx0XHRnYW1lSUQsIHVzZXJJRCwgc2Vzc2lvbklEKVxuXG5cdC8vIFVwZ3JhZGUgSFRUUCBjb25uZWN0aW9uIHRvIFdlYlNvY2tldCB3aXRoIGdlbmVyb3VzIENPUlMgc2V0dGluZ3Ncblx0dXBncmFkZXIuQ2hlY2tPcmlnaW4gPSBmdW5jKHIgKmh0dHAuUmVxdWVzdCkgYm9vbCB7XG5cdFx0cmV0dXJuIHRydWUgLy8gQWNjZXB0IGFsbCBvcmlnaW5zIGZvciBub3dcblx0fVxuXG5cdGNvbm4sIGVyciA6PSB1cGdyYWRlci5VcGdyYWRlKGMuUmVzcG9uc2UoKSwgYy5SZXF1ZXN0KCksIG5pbClcblx0aWYgZXJyICE9IG5pbCB7XG5cdFx0aC5sb2dnZXIuRXJyb3JmKFwiRmFpbGVkIHRvIHVwZ3JhZGUgY29ubmVjdGlvbjogJXZcIiwgZXJyKVxuXHRcdHJldHVybiBlY2hvLk5ld0hUVFBFcnJvcihodHRwLlN0YXR1c0ludGVybmFsU2VydmVyRXJyb3IsIFwiRmFpbGVkIHRvIGVzdGFibGlzaCBXZWJTb2NrZXQgY29ubmVjdGlvblwiKVxuXHR9XG5cblx0aC5sb2dnZXIuSW5mb2YoXCJDb25uZWN0aW9uIHN1Y2Nlc3NmdWxseSB1cGdyYWRlZCB0byBXZWJTb2NrZXRcIilcblxuXHQvLyBIYW5kbGUgV2ViU29ja2V0IGNvbm5lY3Rpb25cblx0aC5odWIuSGFuZGxlV2ViU29ja2V0Q29ubmVjdGlvbihjb25uLCBnYW1lSUQsIHVzZXJJRCwgc2Vzc2lvbklEKVxuXHRoLmxvZ2dlci5JbmZvZihcIldlYlNvY2tldCBjb25uZWN0aW9uIGhhbmRlZCB0byBodWJcIilcblxuXHRyZXR1cm4gbmlsXG59XG5cbi8vIEhhbmRsZUxvYmJ5Q29ubmVjdGlvbiBoYW5kbGVzIFdlYlNvY2tldCBjb25uZWN0aW9ucyBmb3IgdGhlIGxvYmJ5XG5mdW5jIChoICpXZWJTb2NrZXRIYW5kbGVyKSBIYW5kbGVMb2JieUNvbm5lY3Rpb24oYyBlY2hvLkNvbnRleHQpIGVycm9yIHtcblx0aC5sb2dnZXIuSW5mb2YoXCJMb2JieSBXZWJTb2NrZXQgY29ubmVjdGlvbiBhdHRlbXB0IHJlY2VpdmVkXCIpXG4uLi5cblxuXHRoLmxvZ2dlci5JbmZvZihcIkxvYmJ5IGNvbm5lY3Rpb24gc3VjY2Vzc2Z1bGx5IHVwZ3JhZGVkIHRvIFdlYlNvY2tldFwiKVxuXG5cdC8vIEhhbmRsZSBXZWJTb2NrZXQgY29ubmVjdGlvbiB3aXRoIFwibG9iYnlcIiBhcyB0aGUgZ2FtZUlEXG5cdGguaHViLkhhbmRsZVdlYlNvY2tldENvbm5lY3Rpb24oY29ubiwgXCJsb2JieVwiLCB1c2VySUQsIHNlc3Npb25JRClcblx0aC5sb2dnZS4uLiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUdKV0V1emJGVldjcGN5eVF1UDFzOGkifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIiwiZm9sZGVyUm9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTAzVDAzOjA0OjE1LjgxM1oiLCJyZXNwb25zZV90ZXh0IjoiTGV0J3MgYWxzbyBsb29rIGF0IHRoZSBnYW1lIHN0YXRlIG1hbmFnZW1lbnQgYW5kIGFueSBwb3RlbnRpYWwgaXNzdWVzIHdpdGggdGhlIGRpY2Ugcm9sbGluZyBmdW5jdGlvbmFsaXR5OlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImViOTY3MjBjLTk0OWEtNGNmMy1iYTU3LTVhYTJhYzViMmYwNSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkJhc2VkIG9uIHRoZSBjb2RlIEkndmUgZXhhbWluZWQsIEkgY2FuIGlkZW50aWZ5IHNldmVyYWwgcG90ZW50aWFsIGlzc3VlcyB0aGF0IG1pZ2h0IGJlIGNhdXNpbmcgdGhlIFVJIHRvIGdldCBzdHVjayB3aGVuIHByZXNzaW5nIHRoZSBcIlJvbGwgRGljZVwiIGJ1dHRvbi4gTGV0IG1lIGFuYWx5emUgdGhlIHByb2JsZW0gYW5kIHByb3ZpZGUgYSBzb2x1dGlvbjpcblxuIyMgQW5hbHlzaXMgb2YgdGhlIElzc3VlXG5cbkFmdGVyIHJldmlld2luZyB0aGUgY29kZSwgaGVyZSBhcmUgdGhlIHBvdGVudGlhbCBjYXVzZXMgZm9yIHRoZSBVSSBnZXR0aW5nIHN0dWNrIHdoZW4gcHJlc3NpbmcgXCJSb2xsIERpY2VcIjpcblxuMS4gKipXZWJTb2NrZXQgQ29tbXVuaWNhdGlvbiBJc3N1ZXMqKjpcbiAgIC0gVGhlIGdhbWUgcmVsaWVzIG9uIFdlYlNvY2tldCBjb21tdW5pY2F0aW9uIGJldHdlZW4gdGhlIGZyb250ZW5kIGFuZCBiYWNrZW5kXG4gICAtIFdoZW4geW91IHByZXNzIFwiUm9sbCBEaWNlXCIsIHRoZSBmcm9udGVuZCBzZW5kcyBhIGByb2xsX2RpY2VgIG1lc3NhZ2UgdG8gdGhlIGJhY2tlbmRcbiAgIC0gSWYgdGhlIGJhY2tlbmQgZG9lc24ndCByZXNwb25kIG9yIHRoZSByZXNwb25zZSBpcyBsb3N0LCB0aGUgVUkgY2FuIHJlbWFpbiBpbiBhIFwicm9sbGluZ1wiIHN0YXRlXG5cbjIuICoqU3RhdGUgTWFuYWdlbWVudCBQcm9ibGVtcyoqOlxuICAgLSBUaGUgYGlzUm9sbGluZ2Agc3RhdGUgaXMgc2V0IHRvIGB0cnVlYCB3aGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZFxuICAgLSBJdCBzaG91bGQgYmUgc2V0IGJhY2sgdG8gYGZhbHNlYCB3aGVuIHRoZSBkaWNlIHJvbGwgcmVzcG9uc2UgaXMgcmVjZWl2ZWRcbiAgIC0gSWYgdGhpcyBzdGF0ZSBpc24ndCBwcm9wZXJseSByZXNldCwgdGhlIFVJIHdpbGwgcmVtYWluIGluIGEgbG9hZGluZyBzdGF0ZVxuXG4zLiAqKkVycm9yIEhhbmRsaW5nIElzc3VlcyoqOlxuICAgLSBUaGVyZSdzIGEgdGltZW91dCBtZWNoYW5pc20gdG8gaGFuZGxlIFdlYlNvY2tldCBmYWlsdXJlcywgYnV0IGl0IG1pZ2h0IG5vdCBiZSB3b3JraW5nIGNvcnJlY3RseVxuICAgLSBUaGUgZXJyb3IgaGFuZGxpbmcgbWlnaHQgbm90IHByb3Blcmx5IHJlc2V0IHRoZSBVSSBzdGF0ZSBpbiBhbGwgZmFpbHVyZSBzY2VuYXJpb3NcblxuNC4gKipSYWNlIENvbmRpdGlvbnMqKjpcbiAgIC0gTXVsdGlwbGUgc3RhdGUgdXBkYXRlcyBoYXBwZW5pbmcgc2ltdWx0YW5lb3VzbHkgY291bGQgY2F1c2UgaXNzdWVzXG4gICAtIFRoZSBkaWNlIHJvbGxpbmcgYW5pbWF0aW9uIG1pZ2h0IGNvbmZsaWN0IHdpdGggc3RhdGUgdXBkYXRlc1xuXG4jIyBTcGVjaWZpYyBJc3N1ZXMgSWRlbnRpZmllZFxuXG5Mb29raW5nIGF0IHRoZSBjb2RlIG1vcmUgY2xvc2VseSwgSSd2ZSBpZGVudGlmaWVkIHRoZXNlIHNwZWNpZmljIGlzc3VlczpcblxuMS4gSW4gYEdhbWVCb2FyZC5qc3hgLCB0aGVyZSdzIGEgdGltZW91dCB0byBoYW5kbGUgV2ViU29ja2V0IGZhaWx1cmVzOlxuYGBgamF2YXNjcmlwdFxuLy8gU2V0IHVwIGEgdGltZW91dCB0byBoYW5kbGUgcG90ZW50aWFsIFdlYlNvY2tldCBmYWlsdXJlc1xuY29uc3Qgd3NUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gIGlmIChpc1JvbGxpbmcpIHtcbiAgICBjb25zb2xlLmxvZygnW0RJQ0VdIFdlYlNvY2tldCB0aW1lb3V0LCBmYWxsaW5nIGJhY2sgdG8gbG9jYWwgZGljZSByb2xsJyk7XG4gICAgaGFuZGxlTG9jYWxEaWNlUm9sbCgpO1xuICAgIGRpc3BhdGNoKHNldElzUm9sbGluZyhmYWxzZSkpO1xuICB9XG59LCAzMDAwKTtcblxuLy8gQ2xlYW4gdXAgdGltZW91dCB3aGVuIGNvbXBvbmVudCB1bm1vdW50cyBvciByb2xsIGNvbXBsZXRlc1xucmV0dXJuICgpID0+IGNsZWFyVGltZW91dCh3c1RpbWVvdXQpO1xuYGBgXG5UaGUgaXNzdWUgaXMgdGhhdCB0aGlzIGByZXR1cm4gKCkgPT4gY2xlYXJUaW1lb3V0KHdzVGltZW91dClgIGlzIHJldHVybmluZyBhIGNsZWFudXAgZnVuY3Rpb24gZnJvbSB0aGUgZXZlbnQgaGFuZGxlciwgd2hpY2ggd29uJ3QgYmUgZXhlY3V0ZWQgdW50aWwgdGhlIGNvbXBvbmVudCB1bm1vdW50cy4gVGhpcyBtZWFucyB0aGUgdGltZW91dCBtaWdodCBuZXZlciBiZSBjbGVhcmVkIHByb3Blcmx5LlxuXG4yLiBJbiBgc29ja2V0U2VydmljZS5qc2AsIHRoZSBgaGFuZGxlRGljZVJvbGxlZGAgZnVuY3Rpb24gaXMgcmVzcG9uc2libGUgZm9yIHVwZGF0aW5nIHRoZSBzdGF0ZSB3aGVuIGRpY2UgYXJlIHJvbGxlZDpcbmBgYGphdmFzY3JpcHRcbi8vIEVuc3VyZSByb2xsaW5nIHN0YXRlIGlzIHNldCB0byBmYWxzZVxuZGlzcGF0Y2goc2V0SXNSb2xsaW5nKGZhbHNlKSk7XG5gYGBcbklmIHRoaXMgZnVuY3Rpb24gaXNuJ3QgY2FsbGVkIChkdWUgdG8gYSBtaXNzaW5nIG9yIG1hbGZvcm1lZCByZXNwb25zZSksIHRoZSBVSSB3aWxsIHJlbWFpbiBpbiB0aGUgcm9sbGluZyBzdGF0ZS5cblxuMy4gVGhlcmUncyBubyBjbGVhciBlcnJvciBoYW5kbGluZyBmb3IgdGhlIGNhc2Ugd2hlcmUgdGhlIFdlYlNvY2tldCBpcyBjb25uZWN0ZWQgYnV0IHRoZSBzZXJ2ZXIgZG9lc24ndCByZXNwb25kIHRvIHRoZSBkaWNlIHJvbGwgcmVxdWVzdC5cblxuIyMgU29sdXRpb25cblxuSGVyZSdzIHdoYXQgSSByZWNvbW1lbmQgdG8gZml4IHRoZSBpc3N1ZTpcblxuMS4gKipJbXByb3ZlIHRoZSB0aW1lb3V0IGhhbmRsaW5nIGluIGBHYW1lQm9hcmQuanN4YCoqOlxuYGBgamF2YXNjcmlwdFxuLy8gSGFuZGxlIHRoZSBSb2xsIERpY2UgYnV0dG9uIGNsaWNrXG5jb25zdCBoYW5kbGVSb2xsRGljZSA9ICgpID0+IHtcbiAgdHJ5IHtcbiAgICAvLyBGaXJzdCBjaGVjayBpZiBpdCdzIHRoZSBsb2NhbCBwbGF5ZXIncyB0dXJuXG4gICAgaWYgKCFzb2NrZXRTZXJ2aWNlLmlzTG9jYWxQbGF5ZXJUdXJuKCkpIHtcbiAgICAgIHRvYXN0KHtcbiAgICAgICAgdGl0bGU6IFwiTm90IHlvdXIgdHVyblwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEl0J3MgJHtwbGF5ZXJzLmZpbmQocCA9PiBwLmlkID09PSBjdXJyZW50UGxheWVyKT8ubmFtZSB8fCBcImFub3RoZXIgcGxheWVyXCJ9J3MgdHVybmAsXG4gICAgICAgIHN0YXR1czogXCJ3YXJuaW5nXCIsXG4gICAgICAgIGR1cmF0aW9uOiAzMDAwLFxuICAgICAgICBpc0Nsb3NhYmxlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgICBkaXNwYXRjaChzZXRJc1JvbGxpbmcoZmFsc2UpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiBwbGF5ZXIgaXMgaW4gamFpbFxuICAgIGlmIChjdXJyZW50UGxheWVyRGF0YT8uaW5KYWlsKSB7XG4gICAgICB0b2FzdCh7XG4gICAgICAgIHRpdGxlOiBcIllvdSdyZSBpbiBqYWlsIVwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogYFlvdSBuZWVkIHRvIHJvbGwgZG91YmxlcyBvciB3YWl0ICR7Y3VycmVudFBsYXllckRhdGEuamFpbFR1cm5zfSBtb3JlIHR1cm5zLmAsXG4gICAgICAgIHN0YXR1czogXCJ3YXJuaW5nXCIsXG4gICAgICAgIGR1cmF0aW9uOiAzMDAwLFxuICAgICAgICBpc0Nsb3NhYmxlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgICBkaXNwYXRjaChzZXRJc1JvbGxpbmcoZmFsc2UpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTZXQgcm9sbGluZyBzdGF0ZSB0byB0cnVlXG4gICAgZGlzcGF0Y2goc2V0SXNSb2xsaW5nKHRydWUpKTtcblxuICAgIC8vIENoZWNrIGlmIFdlYlNvY2tldCBpcyBjb25uZWN0ZWQgYmVmb3JlIHRyeWluZyB0byByb2xsIGRpY2VcbiAgICBpZiAoc29ja2V0U2VydmljZS5zb2NrZXQgJiYgc29ja2V0U2VydmljZS5zb2NrZXQucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pIHtcbiAgICAgIGNvbnNvbGUubG9nKCdbRElDRV0gU2VuZGluZyByb2xsX2RpY2UgcmVxdWVzdCB0byBzZXJ2ZXInKTtcbiAgICAgIC8vIENhbGwgdGhlIHNvY2tldCBzZXJ2aWNlIHRvIHJvbGwgZGljZVxuICAgICAgc29ja2V0U2VydmljZS5yb2xsRGljZSgpO1xuXG4gICAgICAvLyBTZXQgdXAgYSB0aW1lb3V0IHRvIGhhbmRsZSBwb3RlbnRpYWwgV2ViU29ja2V0IGZhaWx1cmVzXG4gICAgICBsZXQgd3NUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbRElDRV0gV2ViU29ja2V0IHRpbWVvdXQsIGZhbGxpbmcgYmFjayB0byBsb2NhbCBkaWNlIHJvbGwnKTtcbiAgICAgICAgaGFuZGxlTG9jYWxEaWNlUm9sbCgpO1xuICAgICAgICBkaXNwYXRjaChzZXRJc1JvbGxpbmcoZmFsc2UpKTtcbiAgICAgIH0sIDMwMDApO1xuXG4gICAgICAvLyBTdG9yZSB0aGUgdGltZW91dCBJRCBzbyBpdCBjYW4gYmUgY2xlYXJlZCBlbHNld2hlcmVcbiAgICAgIHdpbmRvdy5kaWNlUm9sbFRpbWVvdXQgPSB3c1RpbWVvdXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCdbRElDRV0gV2ViU29ja2V0IG5vdCBjb25uZWN0ZWQsIHVzaW5nIGxvY2FsIGRpY2Ugcm9sbCcpO1xuICAgICAgaGFuZGxlTG9jYWxEaWNlUm9sbCgpO1xuICAgICAgZGlzcGF0Y2goc2V0SXNSb2xsaW5nKGZhbHNlKSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1tESUNFXSBFcnJvciByb2xsaW5nIGRpY2U6JywgZXJyb3IpO1xuICAgIGRpc3BhdGNoKHNldElzUm9sbGluZyhmYWxzZSkpO1xuXG4gICAgdG9hc3Qoe1xuICAgICAgdGl0bGU6IFwiRXJyb3Igcm9sbGluZyBkaWNlXCIsXG4gICAgICBkZXNjcmlwdGlvbjogZXJyb3IubWVzc2FnZSB8fCBcIlRoZXJlIHdhcyBhIHByb2JsZW0gd2l0aCB0aGUgZ2FtZSBzZXJ2ZXJcIixcbiAgICAgIHN0YXR1czogXCJlcnJvclwiLFxuICAgICAgZHVyYXRpb246IDMwMDAsXG4gICAgICBpc0Nsb3NhYmxlOiB0cnVlLFxuICAgIH0pO1xuICB9XG59O1xuYGBgXG5cbjIuICoqTW9kaWZ5IHRoZSBgaGFuZGxlRGljZVJvbGxlZGAgZnVuY3Rpb24gaW4gYHNvY2tldFNlcnZpY2UuanNgIHRvIGNsZWFyIHRoZSB0aW1lb3V0Kio6XG5gYGBqYXZhc2NyaXB0XG5oYW5kbGVEaWNlUm9sbGVkID0gKGRhdGEpID0+IHtcbiAgY29uc3QgeyBkaXNwYXRjaCB9ID0gc3RvcmU7XG5cbiAgLy8gQ2xlYXIgdGhlIGRpY2Ugcm9sbCB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuICBpZiAod2luZG93LmRpY2VSb2xsVGltZW91dCkge1xuICAgIGNsZWFyVGltZW91dCh3aW5kb3cuZGljZVJvbGxUaW1lb3V0KTtcbiAgICB3aW5kb3cuZGljZVJvbGxUaW1lb3V0ID0gbnVsbDtcbiAgfVxuXG4gIC8vIEFsd2F5cyBnZXQgZGljZSB2YWx1ZXMgYXMgYW4gYXJyYXkgYW5kIGVuc3VyZSB0aGV5IGFyZSB2YWxpZCBudW1iZXJzXG4gIGxldCBkaWNlID0gQXJyYXkuaXNBcnJheShkYXRhLmRpY2UpID8gZGF0YS5kaWNlIDogW2RhdGEuZGljZTEsIGRhdGEuZGljZTJdO1xuXG4gIC8vIFJlc3Qgb2YgdGhlIGZ1bmN0aW9uLi4uXG5cbiAgLy8gRW5zdXJlIHJvbGxpbmcgc3RhdGUgaXMgc2V0IHRvIGZhbHNlXG4gIGRpc3BhdGNoKHNldElzUm9sbGluZyhmYWxzZSkpO1xufTtcbmBgYFxuXG4zLiAqKkFkZCBhIGdsb2JhbCBlcnJvciBoYW5kbGVyIGZvciBXZWJTb2NrZXQgZXJyb3JzKio6XG5gYGBqYXZhc2NyaXB0XG4vLyBBZGQgdG8gc29ja2V0U2VydmljZS5qc1xuaGFuZGxlRXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgY29uc29sZS5lcnJvcignV2ViU29ja2V0IGVycm9yOicsIGVycm9yKTtcbiAgXG4gIC8vIENsZWFyIGFueSBwZW5kaW5nIGRpY2Ugcm9sbCBzdGF0ZVxuICBpZiAod2luZG93LmRpY2VSb2xsVGltZW91dCkge1xuICAgIGNsZWFyVGltZW91dCh3aW5kb3cuZGljZVJvbGxUaW1lb3V0KTtcbiAgICB3aW5kb3cuZGljZVJvbGxUaW1lb3V0ID0gbnVsbDtcbiAgfVxuICBcbiAgLy8gUmVzZXQgcm9sbGluZyBzdGF0ZVxuICBzdG9yZS5kaXNwYXRjaChzZXRJc1JvbGxpbmcoZmFsc2UpKTtcbiAgXG4gIC8vIE5vdGlmeSB1c2VyXG4gIHRvYXN0KHtcbiAgICB0aXRsZTogXCJDb25uZWN0aW9uIEVycm9yXCIsXG4gICAgZGVzY3JpcHRpb246IFwiVGhlcmUgd2FzIGEgcHJvYmxlbSB3aXRoIHRoZSBnYW1lIGNvbm5lY3Rpb24uIFBsZWFzZSB0cnkgYWdhaW4uXCIsXG4gICAgc3RhdHVzOiBcImVycm9yXCIsXG4gICAgZHVyYXRpb246IDUwMDAsXG4gICAgaXNDbG9zYWJsZTogdHJ1ZSxcbiAgfSk7XG59O1xuYGBgXG5cbjQuICoqQWRkIGEgZm9yY2UgcmVzZXQgYnV0dG9uIGZvciB1c2VycyoqOlxuYGBgamF2YXNjcmlwdFxuLy8gQWRkIHRvIHRoZSBVSSBuZWFyIHRoZSBSb2xsIERpY2UgYnV0dG9uXG48QnV0dG9uXG4gIHNpemU9XCJzbVwiXG4gIGNvbG9yU2NoZW1lPVwicmVkXCJcbiAgdmFyaWFudD1cIm91dGxpbmVcIlxuICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgZGlzcGF0Y2goc2V0SXNSb2xsaW5nKGZhbHNlKSk7XG4gICAgaWYgKHdpbmRvdy5kaWNlUm9sbFRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh3aW5kb3cuZGljZVJvbGxUaW1lb3V0KTtcbiAgICAgIHdpbmRvdy5kaWNlUm9sbFRpbWVvdXQgPSBudWxsO1xuICAgIH1cbiAgICB0b2FzdCh7XG4gICAgICB0aXRsZTogXCJVSSBSZXNldFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiVGhlIGdhbWUgVUkgaGFzIGJlZW4gcmVzZXRcIixcbiAgICAgIHN0YXR1czogXCJpbmZvXCIsXG4gICAgICBkdXJhdGlvbjogMzAwMCxcbiAgICAgIGlzQ2xvc2FibGU6IHRydWUsXG4gICAgfSk7XG4gIH19XG4gIG1sPXsyfVxuPlxuICBSZXNldCBVSVxuPC9CdXR0b24+XG5gYGBcblxuIyMgSW1wbGVtZW50YXRpb24gUGxhblxuXG4xLiBNb2RpZnkgdGhlIGBoYW5kbGVSb2xsRGljZWAgZnVuY3Rpb24gaW4gYEdhbWVCb2FyZC5qc3hgIHRvIHVzZSBhIGdsb2JhbCB0aW1lb3V0IHZhcmlhYmxlXG4yLiBVcGRhdGUgdGhlIGBoYW5kbGVEaWNlUm9sbGVkYCBmdW5jdGlvbiBpbiBgc29ja2V0U2VydmljZS5qc2AgdG8gY2xlYXIgdGhlIHRpbWVvdXRcbjMuIEFkZCBhIGdsb2JhbCBlcnJvciBoYW5kbGVyIGZvciBXZWJTb2NrZXQgZXJyb3JzXG40LiBDb25zaWRlciBhZGRpbmcgYSBVSSByZXNldCBidXR0b24gZm9yIHVzZXJzIHRvIG1hbnVhbGx5IHJlY292ZXIgZnJvbSBzdHVjayBzdGF0ZXNcblxuV291bGQgeW91IGxpa2UgbWUgdG8gaGVscCB5b3UgaW1wbGVtZW50IHRoZXNlIGNoYW5nZXMgdG8gZml4IHRoZSBpc3N1ZT9cbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IGtla29wb2x5LWJhY2tlbmQvaW50ZXJuYWwvZ2FtZS9tYW5hZ2VyL2dhbWVfbWFuYWdlci5nb1xuLi4uXG5cdGdhbWUuVHVybk9yZGVyID0gbmV3VHVybk9yZGVyXG5cblx0Ly8gSWYgaXQgd2FzIHRoaXMgcGxheWVyJ3MgdHVybiwgbW92ZSB0byBuZXh0IHBsYXllclxuXHRpZiBnYW1lLkN1cnJlbnRUdXJuID09IHBsYXllcklEICYmIGxlbihuZXdUdXJuT3JkZXIpID4gMCB7XG5cdFx0Ly8gRmluZCB0aGUgbmV4dCBwbGF5ZXIgaW4gdHVybiBvcmRlclxuXHRcdG5leHRJbmRleCA6PSAwXG5cdFx0Zm9yIGksIGlkIDo9IHJhbmdlIGdhbWUuVHVybk9yZGVyIHtcblx0XHRcdGlmIGlkID09IHBsYXllcklEIHtcblx0XHRcdFx0bmV4dEluZGV4ID0gKGkgKyAxKSAlIGxlbihnYW1lLlR1cm5PcmRlcilcblx0XHRcdFx0YnJlYWtcblx0XHRcdH1cblx0XHR9XG5cdFx0Z2FtZS5DdXJyZW50VHVybiA9IGdhbWUuVHVybk9yZGVyW25leHRJbmRleF1cblx0fVxuXG5cdC8vIENoZWNrIGlmIGdhbWUgc2hvdWxkIGVuZCAoZS5nLiwgb25seSBvbmUgcGxheWVyIGxlZnQpXG5cdGlmIGxlbihuZXdUdXJuT3JkZXIpIDw9IDEge1xuXHRcdC8vIFNldCB0aGUgbGFzdCBwbGF5ZXIgYXMgd2lubmVyXG5cdFx0aWYgbGVuKG5ld1R1cm5PcmRlcikgPT0gMSB7XG5cdFx0XHRnYW1lLldpbm5lcklEID0gbmV3VHVybk9yZGVyWzBdXG5cdFx0fVxuXHRcdGdhbWUuU3RhdHVzID0gbW9kZWxzLkdhbWVTdGF0dXNDb21wbGV0ZWRcblx0fVxufVxuLi4uXG5cbi8vIFBsYWNlaG9sZGVyIGZvciBhY3Rpb24gcHJvY2Vzc2luZyBtZXRob2RzXG5mdW5jIChnbSAqR2FtZU1hbmFnZXIpIHByb2Nlc3NSb2xsRGljZUFjdGlvbihnYW1lICptb2RlbHMuR2FtZSwgcGxheWVySUQgc3RyaW5nLCBwYXlsb2FkIGludGVyZmFjZXt9KSBlcnJvciB7XG5cdGdtLmxvZ2dlci5JbmZvZihcIlBsYXllciAlcyByb2xsaW5nIGRpY2UgaW4gZ2FtZSAlc1wiLCBwbGF5ZXJJRCwgZ2FtZS5JRC5IZXgoKSlcblxuXHQvLyBHZW5lcmF0ZSByYW5kb20gZGljZSB2YWx1ZXMgKDEtNiBmb3IgZWFjaCBkaWUpXG5cdGRpY2UxIDo9IDEgKyAodGltZS5Ob3coKS5Vbml4TmFubygpICUgNilcblx0dGltZS5TbGVlcCgxICogdGltZS5NaWxsaXNlY29uZClcblx0ZGljZTIgOj0gMSArICh0aW1lLk5vdygpLlVuaXhOYW5vKCkgJSA2KVxuXHR0b3RhbE1vdmUgOj0gaW50KGRpY2UxICsgZGljZTIpXG5cblx0Ly8gRmluZCB0aGUgcGxheWVyXG5cdHBsYXllckluZGV4IDo9IC0xXG5cdGZvciBpLCBwbGF5ZXIgOj0gcmFuZ2UgZ2FtZS5QbGF5ZXJzIHtcblx0XHRpZiBwbGF5ZXIuSUQgPT0gcGxheWVySUQge1xuXHRcdFx0cGxheWVySW5kZXggPSBpXG5cdFx0XHRicmVha1xuXHRcdH1cblx0fVxuXHRpZiBwbGF5ZXJJbmRleCA9PSAtMSB7XG5cdFx0cmV0dXJuIGZtdC5FcnJvcmYoXCJwbGF5ZXIgbm90IGZvdW5kIGluIGdhbWVcIilcblx0fVxuXHRwbGF5ZXIgOj0gJmdhbWUuUGxheWVyc1twbGF5ZXJJbmRleF1cblxuXHQvLyBKYWlsIGxvZ2ljXG5cdGlmIHBsYXllci5JbkphaWwge1xuXHRcdGlmIGRpY2UxID09IGRpY2UyIHtcblx0XHRcdC8vIFJvbGxlZCBkb3VibGVzLCBnZXQgb3V0IG9mIGphaWxcblx0XHRcdHBsYXllci5JbkphaWwgPSBmYWxzZVxuXHRcdFx0cGxheWVyLkphaWxUdXJucyA9IDBcblx0XHRcdGdtLmxvZ2dlci5JbmZvZihcIlBsYXllciAlcyByb2xsZWQgZG91YmxlcyBhbmQgaXMgcmVsZWFzZWQgZnJvbSBqYWlsIVwiLCBwbGF5ZXJJRClcblx0XHRcdC8vIE1vdmUgZm9yd2FyZCBieSBkaWNlIHJvbGwgZnJvbSBqYWlsIChwb3NpdGlvbiAyNSlcblx0XHRcdHBsYXllci5Qb3NpdGlvbiA9ICgyNSArIHRvdGFsTW92ZSkgJSA0MFxuXHRcdFx0Ly8gQnJvYWRjYXN0IHJlbGVhc2Ugbm90aWZpY2F0aW9uXG5cdFx0XHRpZiBnbS53c0h1YiAhPSBuaWwge1xuXHRcdFx0XHRtc2cgOj0gbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtcblx0XHRcdFx0XHRcInR5cGVcIjogICAgIFwiamFpbF9ldmVudFwiLFxuXHRcdFx0XHRcdFwicGxheWVySWRcIjogcGxheWVySUQsXG5cdFx0XHRcdFx0XCJldmVudFwiOiAgICBcInJlbGVhc2VkXCIsXG5cdFx0XHRcdFx0XCJkaWNlXCI6ICAgICBbXWludHtpbnQoZGljZTEpLCBpbnQoZGljZTIpfSxcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiBtc2dCeXRlcywgZXJyIDo9IGpzb24uTWFyc2hhbChtc2cpOyBlcnIgPT0gbmlsIHtcblx0XHRcdFx0XHRnbS53c0h1Yi5Ccm9hZGNhc3RUb0dhbWUoZ2FtZS5JRC5IZXgoKSwgbXNnQnl0ZXMpXG5cdFx0XHRcdH1cblx0XHRcdH1cbi4uLlxuXHR9IGVsc2Uge1xuXHRcdC8vIE5vdCBpbiBqYWlsLCBub3JtYWwgbW92ZVxuXHRcdG9sZFBvc2l0aW9uIDo9IHBsYXllci5Qb3NpdGlvblxuXHRcdG5ld1Bvc2l0aW9uIDo9IChvbGRQb3NpdGlvbiArIHRvdGFsTW92ZSkgJSA0MFxuXHRcdC8vIENoZWNrIGZvciAnR28gdG8gSmFpbCcgKHBvc2l0aW9uIDMwKVxuXHRcdGlmIG5ld1Bvc2l0aW9uID09IDMwIHtcblx0XHRcdHBsYXllci5Qb3NpdGlvbiA9IDI1IC8vIEphaWwgcG9zaXRpb25cblx0XHRcdHBsYXllci5JbkphaWwgPSB0cnVlXG5cdFx0XHRwbGF5ZXIuSmFpbFR1cm5zID0gM1xuXHRcdFx0Z20ubG9nZ2VyLkluZm9mKFwiUGxheWVyICVzIGxhbmRlZCBvbiBHbyB0byBKYWlsISBTZW50IHRvIGphaWwgKDI1KSBmb3IgMyB0dXJucy5cIiwgcGxheWVySUQpXG5cdFx0XHRpZiBnbS53c0h1YiAhPSBuaWwge1xuXHRcdFx0XHRtc2cgOj0gbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtcblx0XHRcdFx0XHRcInR5cGVcIjogICAgICBcImphaWxfZXZlbnRcIixcblx0XHRcdFx0XHRcInBsYXllcklkXCI6ICBwbGF5ZXJJRCxcblx0XHRcdFx0XHRcImV2ZW50XCI6ICAgICBcImphaWxlZFwiLFxuXHRcdFx0XHRcdFwiamFpbFR1cm5zXCI6IDMsXG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgbXNnQnl0ZXMsIGVyciA6PSBqc29uLk1hcnNoYWwobXNnKTsgZXJyID09IG5pbCB7XG5cdFx0XHRcdFx0Z20ud3NIdWIuQnJvYWRjYXN0VG9HYW1lKGdhbWUuSUQuSGV4KCksIG1zZ0J5dGVzKVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIE5vcm1hbCBtb3ZlXG5cdFx0XHRwbGF5ZXIuUG9zaXRpb24gPSBuZXdQb3NpdGlvblxuXHRcdH1cblx0fVxuLi4uXG5cblx0Ly8gLS0tIFRVUk4gTUFOQUdFTUVOVCBBTkQgQlJPQURDQVNUIC0tLVxuXHRpZiBnbS53c0h1YiAhPSBuaWwge1xuXHRcdHJvbGxlZERvdWJsZXMgOj0gZGljZTEgPT0gZGljZTJcblx0XHR2YXIgbmV4dFBsYXllcklEIHN0cmluZ1xuXHRcdGlmIHBsYXllci5JbkphaWwge1xuXHRcdFx0bmV4dFBsYXllcklEID0gcGxheWVySUQgLy8gU3RpbGwgaW4gamFpbCwgc2FtZSBwbGF5ZXIncyB0dXJuXG5cdFx0fSBlbHNlIGlmIHJvbGxlZERvdWJsZXMge1xuXHRcdFx0bmV4dFBsYXllcklEID0gcGxheWVySUQgLy8gUGxheWVyIGdldHMgYW5vdGhlciB0dXJuXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIEZpbmQgbmV4dCBwbGF5ZXIgaW4gdHVybiBvcmRlclxuXHRcdFx0bmV4dEluZGV4IDo9IDBcblx0XHRcdGZvciBpLCBpZCA6PSByYW5nZSBnYW1lLlR1cm5PcmRlciB7XG5cdFx0XHRcdGlmIGlkID09IHBsYXllcklEIHtcblx0XHRcdFx0XHRuZXh0SW5kZXggPSAoaSArIDEpICUgbGVuKGdhbWUuVHVybk9yZGVyKVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGdhbWUuQ3VycmVudFR1cm4gPSBnYW1lLlR1cm5PcmRlcltuZXh0SW5kZXhdXG5cdFx0XHRuZXh0UGxheWVySUQgPSBnYW1lLkN1cnJlbnRUdXJuXG5cdFx0XHQvLyBBbHNvIHVwZGF0ZSBEQiBmb3IgY3VycmVudFR1cm5cblx0XHRcdGNvbGxlY3Rpb24gOj0gZ20ubW9uZ29DbGllbnQuRGF0YWJhc2UoZ20uZGJOYW1lKS5Db2xsZWN0aW9uKFwiZ2FtZXNcIilcblx0XHRcdF8sIF8gPSBjb2xsZWN0aW9uLlVwZGF0ZU9uZShcblx0XHRcdFx0Z20uY3R4LFxuXHRcdFx0XHRic29uLk17XCJfaWRcIjogZ2FtZS5JRH0sXG5cdFx0XHRcdGJzb24uTXtcIiRzZXRcIjogYnNvbi5Ne1wiY3VycmVudFR1cm5cIjogZ2FtZS5DdXJyZW50VHVybiwgXCJ1cGRhdGVkQXRcIjogdGltZS5Ob3coKX19LFxuXHRcdFx0KVxuXHRcdH1cblx0XHQvLyBGaW5kIHRoZSBuZXh0IHBsYXllciAob3IgY3VycmVudCBpZiBkb3VibGVzKSBmb3IgbmFtZVxuXHRcdHZhciBwbGF5ZXJOYW1lIHN0cmluZyA9IFwiUGxheWVyX1wiICsgbmV4dFBsYXllcklEWzo0XVxuXHRcdGZvciBfLCBwIDo9IHJhbmdlIGdhbWUuUGxheWVycyB7XG5cdFx0XHRpZiBwLklEID09IG5leHRQbGF5ZXJJRCB7XG5cdFx0XHRcdHBsYXllck5hbWUgPSBcIlBsYXllcl9cIiArIHAuSURbOjRdXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHR9XG5cdFx0fVxuXHRcdHR1cm5Nc2cgOj0gbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtcblx0XHRcdFwidHlwZVwiOiAgICAgICAgICBcInR1cm5fY2hhbmdlZFwiLFxuXHRcdFx0XCJjdXJyZW50VHVyblwiOiAgIG5leHRQbGF5ZXJJRCxcblx0XHRcdFwicGxheWVyTmFtZVwiOiAgICBwbGF5ZXJOYW1lLFxuXHRcdFx0XCJyb2xsZWREb3VibGVzXCI6IHJvbGxlZERvdWJsZXMsXG5cdFx0fVxuXHRcdGlmIG1zZ0J5dGVzLCBlcnIgOj0ganNvbi5NYXJzaGFsKHR1cm5Nc2cpOyBlcnIgPT0gbmlsIHtcblx0XHRcdGdtLndzSHViLkJyb2FkY2FzdFRvR2FtZShnYW1lLklELkhleCgpLCBtc2dCeXRlcylcblx0XHR9XG5cdH1cblx0Ly8gLS0tIEVORCBUVVJOIE1BTkFHRU1FTlQgLS0tXG5cblx0cmV0dXJuIG5pbFxufVxuLi4uXG5cblx0Ly8gU2V0IG5leHQgcGxheWVyJ3MgdHVyblxuXHRnYW1lLkN1cnJlbnRUdXJuID0gZ2FtZS5UdXJuT3JkZXJbbmV4dEluZGV4XVxuXG5cdC8vIFVwZGF0ZSB0aGUgbWFya2V0IGNvbmRpdGlvbiBjb3VudGVyIGlmIGFwcGxpY2FibGVcblx0aWYgZ2FtZS5NYXJrZXRDb25kaXRpb24gIT0gbW9kZWxzLk1hcmtldENvbmRpdGlvbk5vcm1hbCB7XG5cdFx0Z2FtZS5NYXJrZXRDb25kaXRpb25SZW1haW5pbmdUdXJucy0tXG5cdFx0aWYgZ2FtZS5NYXJrZXRDb25kaXRpb25SZW1haW5pbmdUdXJucyA8PSAwIHtcblx0XHRcdC8vIFJlc2V0IG1hcmtldCB0byBub3JtYWxcblx0XHRcdGdhbWUuTWFya2V0Q29uZGl0aW9uID0gbW9kZWxzLk1hcmtldENvbmRpdGlvbk5vcm1hbFxuXHRcdFx0Z20ubG9nZ2VyLkluZm9mKFwiTWFya2V0IGNvbmRpdGlvbiByZXNldCB0byBOT1JNQUxcIilcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiBhbnkgcGxheWVycyB3aXRoIHNoYWRvd2JhbiBzaG91bGQgaGF2ZSBpdCByZW1vdmVkXG5cdGZvciBpIDo9IHJhbmdlIGdhbWUuUGxheWVycyB7XG5cdFx0cGxheWVyIDo9ICZnYW1lLlBsYXllcnNbaV1cblx0XHRpZiBwbGF5ZXIuU2hhZG93YmFubmVkICYmIHBsYXllci5TaGFkb3diYW5SZW1haW5pbmdUdXJucyA8PSAwIHtcblx0XHRcdHBsYXllci5TaGFkb3diYW5uZWQgPSBmYWxzZVxuXHRcdH1cblx0fVxuLi4uXG5QYXRoOiBrZWtvcG9seS1mcm9udGVuZC9zcmMvc3RvcmUvZ2FtZVNsaWNlLmpzXG4uLi5cblxuICAgICAgaWYgKCFpc0RvdWJsZXMgfHwgKGN1cnJlbnRQbGF5ZXIgJiYgY3VycmVudFBsYXllci5pbkphaWwpKSB7XG4gICAgICAgIC8vIEFkdmFuY2UgdG8gbmV4dCBwbGF5ZXJcbiAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gKGN1cnJlbnRJbmRleCArIDEpICUgc3RhdGUucGxheWVycy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG5leHRQbGF5ZXIgPSBzdGF0ZS5wbGF5ZXJzW25leHRJbmRleF07XG4gICAgICAgIGlmIChuZXh0UGxheWVyKSB7XG4gICAgICAgICAgc3RhdGUuY3VycmVudFBsYXllciA9IG5leHRQbGF5ZXIuaWQ7XG4gICAgICAgICAgc3RhdGUuZ2FtZU1lc3NhZ2VzLnVuc2hpZnQoe1xuICAgICAgICAgICAgdHlwZTogJ1RVUk5fQ0hBTkdFJyxcbiAgICAgICAgICAgIHBsYXllcklkOiBuZXh0UGxheWVyLmlkLFxuICAgICAgICAgICAgY29udGVudDogYEl0J3Mgbm93ICR7bmV4dFBsYXllci5uYW1lfSdzIHR1cm5gLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIGRvdWJsZXMsIHNhbWUgcGxheWVyIGdldHMgYW5vdGhlciB0dXJuXG4gICAgICAgIHN0YXRlLmdhbWVNZXNzYWdlcy51bnNoaWZ0KHtcbiAgICAgICAgICB0eXBlOiAnRVhUUkFfVFVSTicsXG4gICAgICAgICAgcGxheWVySWQ6IGN1cnJlbnRQbGF5ZXIuaWQsXG4gICAgICAgICAgY29udGVudDogYCR7Y3VycmVudFBsYXllci5uYW1lfSByb2xsZWQgZG91YmxlcyBhbmQgZ2V0cyBhbm90aGVyIHR1cm4hYCxcbiAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRQbGF5ZXJzOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgICAgc3RhdGUucGxheWVycyA9IGFjdGlvbi5wYXlsb2FkO1xuICAgIH0sXG4uLi5cblBhdGg6IGtla29wb2x5LWZyb250ZW5kL3NyYy9jb3JlL2VuZ2luZS9HYW1lRW5naW5lLmpzXG4uLi5cbiAgICBcbiAgICAvLyBNb3ZlIHRvIG5leHQgcGhhc2VcbiAgICB0aGlzLmdhbWVTdGF0ZS50dXJuUGhhc2UgPSBUVVJOX1BIQVNFLk1PVkVNRU5UO1xuICAgIFxuICAgIHRoaXMudHJpZ2dlckV2ZW50KCdvblN0YXRlQ2hhbmdlJywgdGhpcy5nYW1lU3RhdGUpO1xuICAgIFxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyBwbGF5ZXIgbW92ZW1lbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBsYXllcklkIC0gQ3VycmVudCBwbGF5ZXIncyBJRFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSAtIE1vdmVtZW50IHJlc3VsdCB3aXRoIG5ldyBwb3NpdGlvbiBhbmQgcmVsZXZhbnQgZXZlbnRzXG4gICAqL1xuICBwcm9jZXNzTW92ZW1lbnRQaGFzZShwbGF5ZXJJZCkge1xuICAgIGlmICh0aGlzLmdhbWVTdGF0ZS5jdXJyZW50VHVybiAhPT0gcGxheWVySWQgfHwgXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLnR1cm5QaGFzZSAhPT0gVFVSTl9QSEFTRS5NT1ZFTUVOVCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgcGxheWVyXFwncyB0dXJuIG9yIHdyb25nIHBoYXNlJyk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHBsYXllciA9IHRoaXMuZ2FtZVN0YXRlLnBsYXllcnNbcGxheWVySWRdO1xuICAgIFxuICAgIC8vIENoZWNrIGlmIHBsYXllciBpcyBzaGFkb3diYW5uZWQgKGluIGphaWwpXG4gICAgaWYgKHBsYXllci5zaGFkb3diYW5uZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NTaGFkb3diYW5uZWRQbGF5ZXJNb3ZlKHBsYXllcklkKTtcbiAgICB9XG4gICAgXG4gICAgLy8gUm9sbCB0aGUgZGljZVxuICAgIGNvbnN0IGRpY2VSb2xsID0gdGhpcy5kaWNlTWFuYWdlci5yb2xsRGljZSgpO1xuICAgIHRoaXMuZ2FtZVN0YXRlLmxhc3REaWNlUm9sbCA9IGRpY2VSb2xsO1xuICAgIFxuICAgIGNvbnN0IGRpY2VTdW0gPSBkaWNlUm9sbFswXSArIGRpY2VSb2xsWzFdO1xuICAgIGNvbnN0IGlzRG91YmxlcyA9IGRpY2VSb2xsWzBdID09PSBkaWNlUm9sbFsxXTtcbiAgICBcbiAgICAvLyBDYWxjdWxhdGUgbmV3IHBvc2l0aW9uXG4gICAgY29uc3Qgb2xkUG9zaXRpb24gPSBwbGF5ZXIucG9zaXRpb247XG4gICAgbGV0IG5ld1Bvc2l0aW9uID0gKG9sZFBvc2l0aW9uICsgZGljZVN1bSkgJSA0MDsgLy8gNDAgc3BhY2VzIG9uIGJvYXJkXG4gICAgXG4gICAgLy8gQ2hlY2sgaWYgcGxheWVyIHBhc3NlcyBTVEFSVFxuICAgIGNvbnN0IHBhc3NlZFN0YXJ0ID0gb2xkUG9zaXRpb24gKyBkaWNlU3VtID49IDQwO1xuICAgIFxuICAgIC8vIFVwZGF0ZSBwbGF5ZXIgcG9zaXRpb25cbiAgICB0aGlzLnBsYXllck1hbmFnZXIudXBkYXRlUG9zaXRpb24odGhpcy5nYW1lU3RhdGUsIHBsYXllcklkLCBuZXdQb3NpdGlvbik7XG4gICAgXG4gICAgLy8gUmVjb3JkIHJlc3VsdFxuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgIGRpY2VSb2xsLFxuICAgICAgb2xkUG9zaXRpb24sXG4gICAgICBuZXdQb3NpdGlvbixcbiAgICAgIHBhc3NlZFN0YXJ0LFxuICAgICAgaXNEb3VibGVzXG4gICAgfTtcbi4uLlxuXG4gIC8qKlxuICAgKiBFbmQgdGhlIGN1cnJlbnQgcGxheWVyJ3MgdHVyblxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGxheWVySWQgLSBDdXJyZW50IHBsYXllcidzIElEXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IC0gUmVzdWx0IG9mIHR1cm4gZW5kXG4gICAqL1xuICBlbmRUdXJuKHBsYXllcklkKSB7XG4gICAgaWYgKHRoaXMuZ2FtZVN0YXRlLmN1cnJlbnRUdXJuICE9PSBwbGF5ZXJJZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgcGxheWVyXFwncyB0dXJuJyk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGN1cnJlbnRQbGF5ZXIgPSB0aGlzLmdhbWVTdGF0ZS5wbGF5ZXJzW3BsYXllcklkXTtcbiAgICBcbiAgICAvLyBUcmlnZ2VyIHR1cm4gZW5kIGV2ZW50XG4gICAgdGhpcy50cmlnZ2VyRXZlbnQoJ29uUGxheWVyVHVybkVuZCcsIHtcbiAgICAgIGdhbWVTdGF0ZTogdGhpcy5nYW1lU3RhdGUsXG4gICAgICBwbGF5ZXJJZFxuICAgIH0pO1xuICAgIFxuICAgIC8vIENoZWNrIGlmIHBsYXllciBnZXRzIGFub3RoZXIgdHVybiAoZHVlIHRvIGRvdWJsZXMpXG4gICAgaWYgKGN1cnJlbnRQbGF5ZXIuZG91Ymxlc0NvdW50ID4gMCkge1xuICAgICAgLy8gUmVzZXQgcGhhc2UgdG8gc3RhcnQgdGhlIHR1cm4gYWdhaW5cbiAgICAgIHRoaXMuZ2FtZVN0YXRlLnR1cm5QaGFzZSA9IFRVUk5fUEhBU0UuTUVNRUNPTk9NWTtcbiAgICAgIFxuICAgICAgdGhpcy50cmlnZ2VyRXZlbnQoJ29uUGxheWVyVHVyblN0YXJ0Jywge1xuICAgICAgICBnYW1lU3RhdGU6IHRoaXMuZ2FtZVN0YXRlLFxuICAgICAgICBwbGF5ZXJJZFxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR1cm5FbmRlZDogZmFsc2UsXG4gICAgICAgIGFub3RoZXJUdXJuOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbi4uLlxuUGF0aDoga2Vrb3BvbHktZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvZ2FtZS9HYW1lQm9hcmQuanN4XG4uLi5cblxuICAvLyBIYW5kbGUgdGhlIFJvbGwgRGljZSBidXR0b24gY2xpY2tcbiAgY29uc3QgaGFuZGxlUm9sbERpY2UgPSAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEZpcnN0IGNoZWNrIGlmIGl0J3MgdGhlIGxvY2FsIHBsYXllcidzIHR1cm5cbiAgICAgIGlmICghc29ja2V0U2VydmljZS5pc0xvY2FsUGxheWVyVHVybigpKSB7XG4gICAgICAgIHRvYXN0KHtcbiAgICAgICAgICB0aXRsZTogXCJOb3QgeW91ciB0dXJuXCIsXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBJdCdzICR7cGxheWVycy5maW5kKHAgPT4gcC5pZCA9PT0gY3VycmVudFBsYXllcik/Lm5hbWUgfHwgXCJhbm90aGVyIHBsYXllclwifSdzIHR1cm5gLFxuICAgICAgICAgIHN0YXR1czogXCJ3YXJuaW5nXCIsXG4gICAgICAgICAgZHVyYXRpb246IDMwMDAsXG4gICAgICAgICAgaXNDbG9zYWJsZTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGRpc3BhdGNoKHNldElzUm9sbGluZyhmYWxzZSkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIGlmIHBsYXllciBpcyBpbiBqYWlsXG4gICAgICBpZiAoY3VycmVudFBsYXllckRhdGE/LmluSmFpbCkge1xuICAgICAgICB0b2FzdCh7XG4gICAgICAgICAgdGl0bGU6IFwiWW91J3JlIGluIGphaWwhXCIsXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBZb3UgbmVlZCB0byByb2xsIGRvdWJsZXMgb3Igd2FpdCAke2N1cnJlbnRQbGF5ZXJEYXRhLmphaWxUdXJuc30gbW9yZSB0dXJucy5gLFxuICAgICAgICAgIHN0YXR1czogXCJ3YXJuaW5nXCIsXG4gICAgICAgICAgZHVyYXRpb246IDMwMDAsXG4gICAgICAgICAgaXNDbG9zYWJsZTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGRpc3BhdGNoKHNldElzUm9sbGluZyhmYWxzZSkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFNldCByb2xsaW5nIHN0YXRlIHRvIHRydWVcbiAgICAgIGRpc3BhdGNoKHNldElzUm9sbGluZyh0cnVlKSk7XG4uLi5cblBhdGg6IGtla29wb2x5LWJhY2tlbmQvaW50ZXJuYWwvYXBpL2hhbmRsZXJzL2dhbWVfaGFuZGxlci5nb1xuLi4uXG5cbi8vIEdldEdhbWVTdGF0ZSBnZXRzIHRoZSBjdXJyZW50IHN0YXRlIG9mIGEgZ2FtZVxuZnVuYyAoaCAqR2FtZUhhbmRsZXIpIEdldEdhbWVTdGF0ZShjIGVjaG8uQ29udGV4dCkgZXJyb3Ige1xuXHRnYW1lSUQgOj0gYy5QYXJhbShcImdhbWVJZFwiKVxuXHRpZiBnYW1lSUQgPT0gXCJcIiB7XG5cdFx0cmV0dXJuIGVjaG8uTmV3SFRUUEVycm9yKGh0dHAuU3RhdHVzQmFkUmVxdWVzdCwgXCJNaXNzaW5nIGdhbWUgSURcIilcblx0fVxuXG5cdC8vIEdldCBnYW1lIGZyb20gZ2FtZSBtYW5hZ2VyXG5cdGdhbWUsIGVyciA6PSBoLmdhbWVNYW5hZ2VyLkdldEdhbWUoZ2FtZUlEKVxuXHRpZiBlcnIgIT0gbmlsIHtcblx0XHRoLmxvZ2dlci5FcnJvcmYoXCJGYWlsZWQgdG8gZ2V0IGdhbWU6ICV2XCIsIGVycilcblx0XHRyZXR1cm4gZWNoby5OZXdIVFRQRXJyb3IoaHR0cC5TdGF0dXNOb3RGb3VuZCwgXCJHYW1lIG5vdCBmb3VuZFwiKVxuXHR9XG5cblx0cmV0dXJuIGMuSlNPTihodHRwLlN0YXR1c09LLCBnYW1lKVxufVxuXG4vLyBSb2xsRGljZSBoYW5kbGVzIHRoZSByb2xsIGRpY2UgYWN0aW9uXG5mdW5jIChoICpHYW1lSGFuZGxlcikgUm9sbERpY2UoYyBlY2hvLkNvbnRleHQpIGVycm9yIHtcblx0cmV0dXJuIGguaGFuZGxlR2FtZUFjdGlvbihjLCBtb2RlbHMuQWN0aW9uVHlwZVJvbGxEaWNlKVxufVxuLi4uXG5QYXRoOiBrZWtvcG9seS1mcm9udGVuZC9zcmMvY29tcG9uZW50cy9kaWNlL0RpY2VSb2xsZXIuanN4XG4uLi5cbiAgW3sgcG9zaXRpb246ICd0b3AtbGVmdCcsIHZhbHVlOiAxIH0sIHsgcG9zaXRpb246ICd0b3AtcmlnaHQnLCB2YWx1ZTogMSB9LCB7IHBvc2l0aW9uOiAnbWlkZGxlLWxlZnQnLCB2YWx1ZTogMSB9LCB7IHBvc2l0aW9uOiAnbWlkZGxlLXJpZ2h0JywgdmFsdWU6IDEgfSwgeyBwb3NpdGlvbjogJ2JvdHRvbS1sZWZ0JywgdmFsdWU6IDEgfSwgeyBwb3NpdGlvbjogJ2JvdHRvbS1yaWdodCcsIHZhbHVlOiAxIH1dLFxuXTtcblxuLyoqXG4gKiBTaW5nbGUgZGllIGNvbXBvbmVudCB0aGF0IHNob3dzIG9uZSBvZiBzaXggZmFjZXNcbiAqL1xuY29uc3QgRGllID0gKHsgdmFsdWUsIGlzUm9sbGluZyB9KSA9PiB7XG4gIC8vIEdldCB0aGUgZG90IHBvc2l0aW9ucyBmb3IgdGhlIGN1cnJlbnQgdmFsdWVcbiAgY29uc3QgZG90cyA9IGRpY2VGYWNlc1t2YWx1ZSAtIDFdIHx8IGRpY2VGYWNlc1swXTtcblxuICByZXR1cm4gKFxuICAgIDxtb3Rpb24uZGl2XG4gICAgICBhbmltYXRlPXt7XG4gICAgICAgIHJvdGF0ZVg6IGlzUm9sbGluZyA/IFswLCAzNjBdIDogMCxcbiAgICAgICAgcm90YXRlWTogaXNSb2xsaW5nID8gWzAsIDM2MF0gOiAwLFxuICAgICAgfX1cbiAgICAgIHRyYW5zaXRpb249e3tcbiAgICAgICAgZHVyYXRpb246IDAuNixcbiAgICAgICAgcmVwZWF0OiBpc1JvbGxpbmcgPyBJbmZpbml0eSA6IDAsXG4gICAgICAgIGVhc2U6IFwiZWFzZUluT3V0XCJcbiAgICAgIH19XG4gICAgPlxuICAgICAgPEJveFxuICAgICAgICB3aWR0aD1cIjYwcHhcIlxuICAgICAgICBoZWlnaHQ9XCI2MHB4XCJcbiAgICAgICAgYmc9XCJ3aGl0ZVwiXG4gICAgICAgIGJvcmRlclJhZGl1cz1cIm1kXCJcbiAgICAgICAgYm94U2hhZG93PVwibWRcIlxuICAgICAgICBwb3NpdGlvbj1cInJlbGF0aXZlXCJcbiAgICAgICAgZGlzcGxheT1cImZsZXhcIlxuICAgICAgICBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiXG4gICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICBib3JkZXI9XCIxcHggc29saWRcIlxuICAgICAgICBib3JkZXJDb2xvcj1cImdyYXkuMjAwXCJcbiAgICAgID5cbiAgICAgICAge2RvdHMubWFwKChkb3QsIGluZGV4KSA9PiAoXG4gICAgICAgICAgPEJveFxuICAgICAgICAgICAga2V5PXtpbmRleH1cbiAgICAgICAgICAgIHBvc2l0aW9uPVwiYWJzb2x1dGVcIlxuICAgICAgICAgICAgd2lkdGg9XCIxMnB4XCJcbiAgICAgICAgICAgIGhlaWdodD1cIjEycHhcIlxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzPVwiZnVsbFwiXG4gICAgICAgICAgICBiZz1cIiMzMzNcIlxuICAgICAgICAgICAgey4uLmdldERvdFBvc2l0aW9uKGRvdC5wb3NpdGlvbil9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSl9XG4gICAgICA8L0JveD5cbiAgICA8L21vdGlvbi5kaXY+XG4gICk7XG59O1xuLi4uXG5cbi8qKlxuICogRGljZVJvbGxlciBjb21wb25lbnRcbiAqIFNob3dzIHR3byBkaWNlIGFuZCBoYW5kbGVzIHJvbGxpbmcgbG9naWNcbiAqL1xuY29uc3QgRGljZVJvbGxlciA9ICh7IGlzQ3VycmVudFR1cm4gPSB0cnVlLCBvblJvbGwsIG9uR29Ub0phaWwgfSkgPT4ge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIFxuICAvLyBJbiBhIHJlYWwgaW1wbGVtZW50YXRpb24sIHdlIHdvdWxkIGdldCB0aGVzZSBmcm9tIFJlZHV4XG4gIC8vIGNvbnN0IGRpY2VWYWx1ZXMgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5nYW1lLmRpY2VWYWx1ZXMpO1xuICAvLyBjb25zdCBpc1JvbGxpbmcgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5nYW1lLmlzUm9sbGluZyk7XG4gIFxuICAvLyBGb3IgZGVtbyBwdXJwb3Nlc1xuICBjb25zdCBbZGljZVZhbHVlcywgc2V0RGljZVZhbHVlc10gPSB1c2VTdGF0ZShbMSwgMV0pO1xuICBjb25zdCBbaXNSb2xsaW5nLCBzZXRJc1JvbGxpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbcm9sbEhpc3RvcnksIHNldFJvbGxIaXN0b3J5XSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3QgW2NvbnNlY3V0aXZlRG91Ymxlcywgc2V0Q29uc2VjdXRpdmVEb3VibGVzXSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCB7IGlzT3Blbiwgb25PcGVuLCBvbkNsb3NlIH0gPSB1c2VEaXNjbG9zdXJlKCk7XG4uLi5cbiAgICBcbiAgICAvLyBGb3IgZGVtbyBwdXJwb3Nlcywgc2ltdWxhdGUgYSBkaWNlIHJvbGwgbG9jYWxseVxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY29uc3QgZGllMSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDYpICsgMTtcbiAgICAgIGNvbnN0IGRpZTIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA2KSArIDE7XG4gICAgICBjb25zdCBpc0RvdWJsZXMgPSBkaWUxID09PSBkaWUyO1xuICAgICAgXG4gICAgICBzZXREaWNlVmFsdWVzKFtkaWUxLCBkaWUyXSk7XG4gICAgICBcbiAgICAgIC8vIFVwZGF0ZSBjb25zZWN1dGl2ZSBkb3VibGVzIGNvdW50XG4gICAgICBpZiAoaXNEb3VibGVzKSB7XG4gICAgICAgIHNldENvbnNlY3V0aXZlRG91YmxlcyhwcmV2ID0+IHByZXYgKyAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldENvbnNlY3V0aXZlRG91YmxlcygwKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gQ2hlY2sgZm9yIHRocmVlIGNvbnNlY3V0aXZlIGRvdWJsZXNcbiAgICAgIGlmIChjb25zZWN1dGl2ZURvdWJsZXMgPT09IDIgJiYgaXNEb3VibGVzKSB7XG4gICAgICAgIHNldENvbnNlY3V0aXZlRG91YmxlcygwKTtcbiAgICAgICAgaWYgKG9uR29Ub0phaWwpIHtcbiAgICAgICAgICBvbkdvVG9KYWlsKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgc2V0Um9sbEhpc3RvcnkocHJldiA9PiBbXG4gICAgICAgIHsgcm9sbDogW2RpZTEsIGRpZTJdLCBzdW06IGRpZTEgKyBkaWUyLCBpc0RvdWJsZXMgfSxcbiAgICAgICAgLi4ucHJldi5zbGljZSgwLCA0KSAvLyBLZWVwIG9ubHkgdGhlIDUgbW9zdCByZWNlbnQgcm9sbHNcbiAgICAgIF0pO1xuICAgICAgc2V0SXNSb2xsaW5nKGZhbHNlKTtcbiAgICAgIFxuICAgICAgLy8gQ2FsbCB0aGUgb25Sb2xsIGNhbGxiYWNrIHdpdGggdGhlIGRpY2UgdmFsdWVzXG4gICAgICBpZiAob25Sb2xsKSB7XG4gICAgICAgIG9uUm9sbChkaWUxLCBkaWUyLCBpc0RvdWJsZXMpO1xuICAgICAgfVxuLi4uXG5cbiAgcmV0dXJuIChcbiAgICA8Qm94IHA9ezR9IGJnPVwiYnJhbmQuNTBcIiBib3JkZXJSYWRpdXM9XCJtZFwiIGJveFNoYWRvdz1cInNtXCI+XG4gICAgICA8RmxleCBqdXN0aWZ5PVwic3BhY2UtYmV0d2VlblwiIGFsaWduPVwiY2VudGVyXCIgbWI9ezR9PlxuICAgICAgICA8VGV4dCBmb250V2VpZ2h0PVwiYm9sZFwiPkRpY2U8L1RleHQ+XG4gICAgICAgIHtyb2xsSGlzdG9yeS5sZW5ndGggPiAwICYmIChcbiAgICAgICAgICA8VGV4dCBcbiAgICAgICAgICAgIGZvbnRTaXplPVwic21cIiBcbiAgICAgICAgICAgIGNvbG9yPVwiYmx1ZS41MDBcIiBcbiAgICAgICAgICAgIGN1cnNvcj1cInBvaW50ZXJcIiBcbiAgICAgICAgICAgIG9uQ2xpY2s9e3Nob3dIaXN0b3J5fVxuICAgICAgICAgICAgX2hvdmVyPXt7IHRleHREZWNvcmF0aW9uOiAndW5kZXJsaW5lJyB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIFJvbGwgSGlzdG9yeVxuICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgKX1cbiAgICAgIDwvRmxleD5cbiAgICAgIFxuICAgICAgPEZsZXgganVzdGlmeT1cImNlbnRlclwiIG1iPXs0fT5cbiAgICAgICAgPEhTdGFjayBzcGFjaW5nPXs0fT5cbiAgICAgICAgICA8RGllIHZhbHVlPXtkaWNlVmFsdWVzWzBdfSBpc1JvbGxpbmc9e2lzUm9sbGluZ30gLz5cbiAgICAgICAgICA8RGllIHZhbHVlPXtkaWNlVmFsdWVzWzFdfSBpc1JvbGxpbmc9e2lzUm9sbGluZ30gLz5cbiAgICAgICAgPC9IU3RhY2s+XG4gICAgICA8L0ZsZXg+XG4gICAgICBcbiAgICAgIHshaXNSb2xsaW5nICYmIGRpY2VWYWx1ZXNbMF0gPT09IGRpY2VWYWx1ZXNbMV0gJiYgKFxuICAgICAgICA8QWxlcnQgc3RhdHVzPVwic3VjY2Vzc1wiIG1iPXsyfSBib3JkZXJSYWRpdXM9XCJtZFwiPlxuICAgICAgICAgIDxBbGVydEljb24gLz5cbiAgICAgICAgICA8VGV4dCBmb250V2VpZ2h0PVwiYm9sZFwiPkRPVUJMRVMhIHtjb25zZWN1dGl2ZURvdWJsZXMgPiAwICYmIGAoJHtjb25zZWN1dGl2ZURvdWJsZXN9IGNvbnNlY3V0aXZlKWB9PC9UZXh0PlxuICAgICAgICA8L0FsZXJ0PlxuICAgICAgKX1cbi4uLlxuUGF0aDoga2Vrb3BvbHktZnJvbnRlbmQvc3JjL3NlcnZpY2VzL3NvY2tldFNlcnZpY2UuanNcbi4uLlxuXG4gIGhhbmRsZURpY2VSb2xsZWQgPSAoZGF0YSkgPT4ge1xuICAgIGNvbnN0IHsgZGlzcGF0Y2ggfSA9IHN0b3JlO1xuXG4gICAgLy8gQWx3YXlzIGdldCBkaWNlIHZhbHVlcyBhcyBhbiBhcnJheSBhbmQgZW5zdXJlIHRoZXkgYXJlIHZhbGlkIG51bWJlcnNcbiAgICBsZXQgZGljZSA9IEFycmF5LmlzQXJyYXkoZGF0YS5kaWNlKSA/IGRhdGEuZGljZSA6IFtkYXRhLmRpY2UxLCBkYXRhLmRpY2UyXTtcblxuICAgIC8vIFZhbGlkYXRlIGRpY2UgdmFsdWVzIC0gZW5zdXJlIHRoZXkgYXJlIG51bWJlcnMgYmV0d2VlbiAxLTZcbiAgICBkaWNlID0gZGljZS5tYXAodmFsdWUgPT4ge1xuICAgICAgLy8gQ29udmVydCB0byBudW1iZXIgaWYgaXQncyBhIHN0cmluZ1xuICAgICAgY29uc3QgbnVtVmFsdWUgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gcGFyc2VJbnQodmFsdWUsIDEwKSA6IHZhbHVlO1xuXG4gICAgICAvLyBWYWxpZGF0ZSB0aGUgbnVtYmVyIGlzIGJldHdlZW4gMS02XG4gICAgICBpZiAodHlwZW9mIG51bVZhbHVlICE9PSAnbnVtYmVyJyB8fCBpc05hTihudW1WYWx1ZSkgfHwgbnVtVmFsdWUgPCAxIHx8IG51bVZhbHVlID4gNikge1xuICAgICAgICBjb25zb2xlLndhcm4oYFtESUNFXSBJbnZhbGlkIGRpY2UgdmFsdWU6ICR7dmFsdWV9LCB1c2luZyBkZWZhdWx0IHZhbHVlIDFgKTtcbiAgICAgICAgcmV0dXJuIDE7IC8vIERlZmF1bHQgdG8gMSBmb3IgaW52YWxpZCB2YWx1ZXNcbiAgICAgIH1cbiAgICAgIHJldHVybiBudW1WYWx1ZTtcbiAgICB9KTtcblxuICAgIGNvbnN0IFtkaWNlMSwgZGljZTJdID0gZGljZTtcbiAgICBjb25zb2xlLmxvZyhgW0RJQ0VdIFByb2Nlc3NlZCBkaWNlIHZhbHVlczogJHtkaWNlMX0sICR7ZGljZTJ9YCk7XG5cbiAgICAvLyBVcGRhdGUgUmVkdXggd2l0aCB2YWxpZGF0ZWQgZGljZSB2YWx1ZXNcbiAgICBkaXNwYXRjaCh1cGRhdGVEaWNlUm9sbCh7IGRpY2VWYWx1ZXM6IFtkaWNlMSwgZGljZTJdIH0pKTtcbi4uLlxuXG4gICAgICAvLyBBZGQgYSBzcGVjaWZpYyBST0xMIG1lc3NhZ2UgdG8gdGhlIGdhbWUgbG9nXG4gICAgICBjb25zdCBjdXJyZW50U3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgY29uc3QgcGxheWVyID0gY3VycmVudFN0YXRlLmdhbWUucGxheWVycy5maW5kKHAgPT4gcC5pZCA9PT0gZGF0YS5wbGF5ZXJJZCk7XG4gICAgICBjb25zdCBwbGF5ZXJOYW1lID0gcGxheWVyID8gcGxheWVyLm5hbWUgOiBgUGxheWVyICR7ZGF0YS5wbGF5ZXJJZH1gO1xuXG4gICAgICBkaXNwYXRjaChhZGRHYW1lTWVzc2FnZSh7XG4gICAgICAgIHR5cGU6ICdST0xMJyxcbiAgICAgICAgcGxheWVySWQ6IGRhdGEucGxheWVySWQsXG4gICAgICAgIGNvbnRlbnQ6IGAke3BsYXllck5hbWV9IHJvbGxlZCAke2RpY2UxfSBhbmQgJHtkaWNlMn1gLFxuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgcm9sbGluZyBzdGF0ZSBpcyBzZXQgdG8gZmFsc2VcbiAgICBkaXNwYXRjaChzZXRJc1JvbGxpbmcoZmFsc2UpKTtcbiAgfTtcblxuICBoYW5kbGVEaWNlUm9sbGluZyA9IChpc1JvbGxpbmcpID0+IHtcbiAgICAvLyBXZSBkb24ndCBuZWVkIHRoaXMgYWN0aW9uIGFueW1vcmUgYXMgdXBkYXRlRGljZVJvbGwgaGFuZGxlcyB0aGUgc3RhdGVcbiAgICAvLyBCdXQgd2UgY2FuIGFkZCBhIGdhbWUgbWVzc2FnZSBmb3IgZGljZSByb2xsaW5nXG4gICAgaWYgKGlzUm9sbGluZykge1xuICAgICAgc3RvcmUuZGlzcGF0Y2goYWRkR2FtZU1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiAnRElDRScsXG4gICAgICAgIGNvbnRlbnQ6ICdSb2xsaW5nIGRpY2UuLi4nLFxuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcbiAgICAgIH0pKTtcbiAgICB9XG4gIH07XG4uLi5cblxuICAgICAgICAvLyBJZiBnYW1lIGhhc24ndCBzdGFydGVkIHlldCwgdHJ5IGFnYWluXG4gICAgICAgIGlmICghZ2FtZVN0YXRlLmdhbWVTdGFydGVkIHx8IGdhbWVTdGF0ZS5nYW1lUGhhc2UgIT09ICdwbGF5aW5nJyB8fFxuICAgICAgICAgICAgc2xpY2VzR2FtZVN0YXRlLnN0YXR1cyAhPT0gJ0FDVElWRScpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnW1NUQVJUX0dBTUVdIEdhbWUgbm90IHN0YXJ0ZWQgeWV0LCBzZW5kaW5nIGdhbWU6c3RhcnQgbWVzc2FnZSBhZ2FpbicpO1xuICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2UoJ2dhbWU6c3RhcnQnLCB7fSk7XG5cbiAgICAgICAgICAvLyBEaXNwYXRjaCBzdGFydEdhbWVBc3luYyBhY3Rpb24gYWdhaW5cbiAgICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgICB0eXBlOiAnZ2FtZS9zdGFydEdhbWVBc3luYy9mdWxmaWxsZWQnLFxuICAgICAgICAgICAgcGF5bG9hZDogdHJ1ZSxcbiAgICAgICAgICAgIG1ldGE6IHsgcmVxdWVzdElkOiAnZ2FtZV9zdGFydF9yZXRyeScsIGFyZzogdW5kZWZpbmVkIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIFN5bmNocm9uaXplIGdhbWUgc3RhdGUgYWdhaW5cbiAgICAgICAgICB0aGlzLnN5bmNHYW1lU3RhdGVBY3Jvc3NTbGljZXMoJ0FDVElWRScpO1xuXG4gICAgICAgICAgLy8gU2V0IHVwIHRoZSBnYW1lIHN0YXJ0IHJldHJ5IGNoZWNrXG4gICAgICAgICAgdGhpcy5zZXR1cEdhbWVTdGFydFJldHJ5Q2hlY2soKTtcbiAgICAgICAgfVxuICAgICAgfSwgMTAwMCk7XG5cbiAgICAgIC8vIFNldCB1cCB0aGUgZ2FtZSBzdGFydCByZXRyeSBjaGVjayBpbW1lZGlhdGVseVxuICAgICAgdGhpcy5zZXR1cEdhbWVTdGFydFJldHJ5Q2hlY2soKTtcbiAgICB9LCAyMDApO1xuICB9O1xuXG4gIHJvbGxEaWNlID0gKCkgPT4ge1xuICAgIHRoaXMuc2VuZE1lc3NhZ2UoJ3JvbGxfZGljZScsIHt9KTtcbiAgfTtcblxuICBlbmRUdXJuID0gKCkgPT4ge1xuICAgIHRoaXMuc2VuZE1lc3NhZ2UoJ2VuZF90dXJuJywge30pO1xuICB9O1xuXG4gIHB1cmNoYXNlUHJvcGVydHkgPSAocHJvcGVydHlJZCkgPT4ge1xuICAgIHRoaXMuc2VuZE1lc3NhZ2UoJ2J1eV9wcm9wZXJ0eScsIHsgcHJvcGVydHlJZCB9KTtcbiAgfTtcblxuICBidWlsZEVuZ2FnZW1lbnQgPSAocHJvcGVydHlJZCkgPT4ge1xuICAgIHRoaXMuc2VuZE1lc3NhZ2UoJ2J1aWxkX2VuZ2FnZW1lbnQnLCB7IHByb3BlcnR5SWQgfSk7XG4gIH07XG5cbiAgYnVpbGRDaGVja21hcmsgPSAocHJvcGVydHlJZCkgPT4ge1xuICAgIHRoaXMuc2VuZE1lc3NhZ2UoJ2J1aWxkX2NoZWNrbWFyaycsIHsgcHJvcGVydHlJZCB9KTtcbiAgfTtcblxuICBtb3J0Z2FnZVByb3BlcnR5ID0gKHByb3BlcnR5SWQpID0+IHtcbiAgICB0aGlzLnNlbmRNZXNzYWdlKCdtb3J0Z2FnZV9wcm9wZXJ0eScsIHsgcHJvcGVydHlJZCB9KTtcbiAgfTtcblxuICBkcmF3Q2FyZCA9IChjYXJkVHlwZSkgPT4ge1xuICAgIHRoaXMuc2VuZE1lc3NhZ2UoJ2RyYXdfY2FyZCcsIHsgY2FyZFR5cGUgfSk7XG4gIH07XG5cbiAgcGxheUNhcmQgPSAoY2FyZElkLCB0YXJnZXRQbGF5ZXJJZCA9IG51bGwsIHRhcmdldFByb3BlcnR5SWQgPSBudWxsKSA9PiB7XG4gICAgdGhpcy5zZW5kTWVzc2FnZSgndXNlX2NhcmQnLCB7XG4gICAgICBjYXJkSWQsXG4gICAgICB0YXJnZXRQbGF5ZXJJZCxcbiAgICAgIHRhcmdldFByb3BlcnR5SWRcbiAgICB9KTtcbiAgfTtcbi4uLlxuUGF0aDoga2Vrb3BvbHktZnJvbnRlbmQvc3JjL2NvcmUvZW5naW5lL0RpY2VNYW5hZ2VyLmpzXG4vKipcbiAqIERpY2VNYW5hZ2VyIGhhbmRsZXMgZGljZSByb2xsaW5nIG1lY2hhbmljc1xuICovXG5jbGFzcyBEaWNlTWFuYWdlciB7XG4gIC8qKlxuICAgKiBSb2xsIGEgc2luZ2xlIGRpZSAoMS02KVxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSAtIERpZSByZXN1bHQgKDEtNilcbiAgICovXG4gIHJvbGxEaWUoKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDYpICsgMTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIFJvbGwgdHdvIGRpY2VcbiAgICogQHJldHVybnMge251bWJlcltdfSAtIEFycmF5IG9mIHR3byBkaWNlIHJlc3VsdHNcbiAgICovXG4gIHJvbGxEaWNlKCkge1xuICAgIHJldHVybiBbdGhpcy5yb2xsRGllKCksIHRoaXMucm9sbERpZSgpXTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIENoZWNrIGlmIGRpY2Ugcm9sbCBpcyBkb3VibGVzXG4gICAqIEBwYXJhbSB7bnVtYmVyW119IGRpY2VSb2xsIC0gQXJyYXkgb2YgZGljZSB2YWx1ZXNcbiAgICogQHJldHVybnMge2Jvb2xlYW59IC0gV2hldGhlciByb2xsIGlzIGRvdWJsZXNcbiAgICovXG4gIGlzRG91YmxlcyhkaWNlUm9sbCkge1xuICAgIHJldHVybiBkaWNlUm9sbFswXSA9PT0gZGljZVJvbGxbMV07XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBHZXQgdGhlIHN1bSBvZiBkaWNlIHZhbHVlc1xuICAgKiBAcGFyYW0ge251bWJlcltdfSBkaWNlUm9sbCAtIEFycmF5IG9mIGRpY2UgdmFsdWVzXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IC0gU3VtIG9mIGRpY2UgdmFsdWVzXG4gICAqL1xuICBnZXREaWNlVG90YWwoZGljZVJvbGwpIHtcbiAgICByZXR1cm4gZGljZVJvbGxbMF0gKyBkaWNlUm9sbFsxXTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIFBlcmZvcm0gYSByb2xsIHdpdGggdGhlIGdpdmVuIGRpY2UgY291bnRcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNvdW50IC0gTnVtYmVyIG9mIGRpY2UgdG8gcm9sbFxuICAgKiBAcmV0dXJucyB7bnVtYmVyW119IC0gQXJyYXkgb2YgZGljZSByZXN1bHRzXG4gICAqL1xuICByb2xsTXVsdGlwbGUoY291bnQpIHtcbiAgICBjb25zdCByZXN1bHRzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICByZXN1bHRzLnB1c2godGhpcy5yb2xsRGllKCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfVxuICBcbiAgLyoqXG4gICAqIFJvbGwgYSBkaWUgZm9yIGVhY2ggcGxheWVyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBnYW1lU3RhdGUgLSBDdXJyZW50IGdhbWUgc3RhdGVcbiAgICogQHJldHVybnMge09iamVjdH0gLSBNYXAgb2YgcGxheWVyIElEcyB0byByb2xsIHJlc3VsdHNcbiAgICovXG4gIHJvbGxGb3JBbGxQbGF5ZXJzKGdhbWVTdGF0ZSkge1xuICAgIGNvbnN0IHJlc3VsdHMgPSB7fTtcbiAgICBcbiAgICBPYmplY3Qua2V5cyhnYW1lU3RhdGUucGxheWVycykuZm9yRWFjaChwbGF5ZXJJZCA9PiB7XG4gICAgICByZXN1bHRzW3BsYXllcklkXSA9IHRoaXMucm9sbERpZSgpO1xuICAgIH0pO1xuICAgIFxuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG4gIFxuICAvKipcbiAgICogRGV0ZXJtaW5lIHR1cm4gb3JkZXIgYmFzZWQgb24gcm9sbHNcbiAgICogQHBhcmFtIHtPYmplY3R9IGdhbWVTdGF0ZSAtIEN1cnJlbnQgZ2FtZSBzdGF0ZVxuICAgKiBAcmV0dXJucyB7c3RyaW5nW119IC0gQXJyYXkgb2YgcGxheWVyIElEcyBpbiB0dXJuIG9yZGVyXG4gICAqL1xuICBkZXRlcm1pbmVJbml0aWFsVHVybk9yZGVyKGdhbWVTdGF0ZSkge1xuICAgIC8vIFJvbGwgZm9yIGVhY2ggcGxheWVyXG4gICAgY29uc3QgcGxheWVyUm9sbHMgPSBbXTtcbiAgICBcbiAgICBPYmplY3Qua2V5cyhnYW1lU3RhdGUucGxheWVycykuZm9yRWFjaChwbGF5ZXJJZCA9PiB7XG4gICAgICBjb25zdCByb2xsID0gdGhpcy5yb2xsRGljZSgpO1xuICAgICAgY29uc3QgdG90YWwgPSByb2xsWzBdICsgcm9sbFsxXTtcbiAgICAgIFxuICAgICAgcGxheWVyUm9sbHMucHVzaCh7XG4gICAgICAgIHBsYXllcklkLFxuICAgICAgICByb2xsLFxuICAgICAgICB0b3RhbFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgXG4gICAgLy8gU29ydCBieSBoaWdoZXN0IHJvbGxcbiAgICBwbGF5ZXJSb2xscy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAvLyBTb3J0IGJ5IHRvdGFsIGZpcnN0XG4gICAgICBpZiAoYi50b3RhbCAhPT0gYS50b3RhbCkge1xuICAgICAgICByZXR1cm4gYi50b3RhbCAtIGEudG90YWw7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIElmIHRpZWQsIGNoZS4uLiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVJtREh4Nm1paVB4YjlERnZKMUpHWUEifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIiwiZm9sZGVyUm9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTAzVDAzOjA0OjI2LjI2OFoiLCJyZXNwb25zZV90ZXh0IjoiQmFzZWQgb24gdGhlIGNvZGUgSSd2ZSBleGFtaW5lZCwgSSBjYW4gaWRlbnRpZnkgc2V2ZXJhbCBwb3RlbnRpYWwgaXNzdWVzIHRoYXQgbWlnaHQgYmUgY2F1c2luZyB0aGUgVUkgdG8gZ2V0IHN0dWNrIHdoZW4gcHJlc3NpbmcgdGhlIFwiUm9sbCBEaWNlXCIgYnV0dG9uLiBMZXQgbWUgYW5hbHl6ZSB0aGUgcHJvYmxlbSBhbmQgcHJvdmlkZSBhIHNvbHV0aW9uOlxuXG4jIyBBbmFseXNpcyBvZiB0aGUgSXNzdWVcblxuQWZ0ZXIgcmV2aWV3aW5nIHRoZSBjb2RlLCBoZXJlIGFyZSB0aGUgcG90ZW50aWFsIGNhdXNlcyBmb3IgdGhlIFVJIGdldHRpbmcgc3R1Y2sgd2hlbiBwcmVzc2luZyBcIlJvbGwgRGljZVwiOlxuXG4xLiAqKldlYlNvY2tldCBDb21tdW5pY2F0aW9uIElzc3VlcyoqOlxuICAgLSBUaGUgZ2FtZSByZWxpZXMgb24gV2ViU29ja2V0IGNvbW11bmljYXRpb24gYmV0d2VlbiB0aGUgZnJvbnRlbmQgYW5kIGJhY2tlbmRcbiAgIC0gV2hlbiB5b3UgcHJlc3MgXCJSb2xsIERpY2VcIiwgdGhlIGZyb250ZW5kIHNlbmRzIGEgYHJvbGxfZGljZWAgbWVzc2FnZSB0byB0aGUgYmFja2VuZFxuICAgLSBJZiB0aGUgYmFja2VuZCBkb2Vzbid0IHJlc3BvbmQgb3IgdGhlIHJlc3BvbnNlIGlzIGxvc3QsIHRoZSBVSSBjYW4gcmVtYWluIGluIGEgXCJyb2xsaW5nXCIgc3RhdGVcblxuMi4gKipTdGF0ZSBNYW5hZ2VtZW50IFByb2JsZW1zKio6XG4gICAtIFRoZSBgaXNSb2xsaW5nYCBzdGF0ZSBpcyBzZXQgdG8gYHRydWVgIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkXG4gICAtIEl0IHNob3VsZCBiZSBzZXQgYmFjayB0byBgZmFsc2VgIHdoZW4gdGhlIGRpY2Ugcm9sbCByZXNwb25zZSBpcyByZWNlaXZlZFxuICAgLSBJZiB0aGlzIHN0YXRlIGlzbid0IHByb3Blcmx5IHJlc2V0LCB0aGUgVUkgd2lsbCByZW1haW4gaW4gYSBsb2FkaW5nIHN0YXRlXG5cbjMuICoqRXJyb3IgSGFuZGxpbmcgSXNzdWVzKio6XG4gICAtIFRoZXJlJ3MgYSB0aW1lb3V0IG1lY2hhbmlzbSB0byBoYW5kbGUgV2ViU29ja2V0IGZhaWx1cmVzLCBidXQgaXQgbWlnaHQgbm90IGJlIHdvcmtpbmcgY29ycmVjdGx5XG4gICAtIFRoZSBlcnJvciBoYW5kbGluZyBtaWdodCBub3QgcHJvcGVybHkgcmVzZXQgdGhlIFVJIHN0YXRlIGluIGFsbCBmYWlsdXJlIHNjZW5hcmlvc1xuXG40LiAqKlJhY2UgQ29uZGl0aW9ucyoqOlxuICAgLSBNdWx0aXBsZSBzdGF0ZSB1cGRhdGVzIGhhcHBlbmluZyBzaW11bHRhbmVvdXNseSBjb3VsZCBjYXVzZSBpc3N1ZXNcbiAgIC0gVGhlIGRpY2Ugcm9sbGluZyBhbmltYXRpb24gbWlnaHQgY29uZmxpY3Qgd2l0aCBzdGF0ZSB1cGRhdGVzXG5cbiMjIFNwZWNpZmljIElzc3VlcyBJZGVudGlmaWVkXG5cbkxvb2tpbmcgYXQgdGhlIGNvZGUgbW9yZSBjbG9zZWx5LCBJJ3ZlIGlkZW50aWZpZWQgdGhlc2Ugc3BlY2lmaWMgaXNzdWVzOlxuXG4xLiBJbiBgR2FtZUJvYXJkLmpzeGAsIHRoZXJlJ3MgYSB0aW1lb3V0IHRvIGhhbmRsZSBXZWJTb2NrZXQgZmFpbHVyZXM6XG5gYGBqYXZhc2NyaXB0XG4vLyBTZXQgdXAgYSB0aW1lb3V0IHRvIGhhbmRsZSBwb3RlbnRpYWwgV2ViU29ja2V0IGZhaWx1cmVzXG5jb25zdCB3c1RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgaWYgKGlzUm9sbGluZykge1xuICAgIGNvbnNvbGUubG9nKCdbRElDRV0gV2ViU29ja2V0IHRpbWVvdXQsIGZhbGxpbmcgYmFjayB0byBsb2NhbCBkaWNlIHJvbGwnKTtcbiAgICBoYW5kbGVMb2NhbERpY2VSb2xsKCk7XG4gICAgZGlzcGF0Y2goc2V0SXNSb2xsaW5nKGZhbHNlKSk7XG4gIH1cbn0sIDMwMDApO1xuXG4vLyBDbGVhbiB1cCB0aW1lb3V0IHdoZW4gY29tcG9uZW50IHVubW91bnRzIG9yIHJvbGwgY29tcGxldGVzXG5yZXR1cm4gKCkgPT4gY2xlYXJUaW1lb3V0KHdzVGltZW91dCk7XG5gYGBcblRoZSBpc3N1ZSBpcyB0aGF0IHRoaXMgYHJldHVybiAoKSA9PiBjbGVhclRpbWVvdXQod3NUaW1lb3V0KWAgaXMgcmV0dXJuaW5nIGEgY2xlYW51cCBmdW5jdGlvbiBmcm9tIHRoZSBldmVudCBoYW5kbGVyLCB3aGljaCB3b24ndCBiZSBleGVjdXRlZCB1bnRpbCB0aGUgY29tcG9uZW50IHVubW91bnRzLiBUaGlzIG1lYW5zIHRoZSB0aW1lb3V0IG1pZ2h0IG5ldmVyIGJlIGNsZWFyZWQgcHJvcGVybHkuXG5cbjIuIEluIGBzb2NrZXRTZXJ2aWNlLmpzYCwgdGhlIGBoYW5kbGVEaWNlUm9sbGVkYCBmdW5jdGlvbiBpcyByZXNwb25zaWJsZSBmb3IgdXBkYXRpbmcgdGhlIHN0YXRlIHdoZW4gZGljZSBhcmUgcm9sbGVkOlxuYGBgamF2YXNjcmlwdFxuLy8gRW5zdXJlIHJvbGxpbmcgc3RhdGUgaXMgc2V0IHRvIGZhbHNlXG5kaXNwYXRjaChzZXRJc1JvbGxpbmcoZmFsc2UpKTtcbmBgYFxuSWYgdGhpcyBmdW5jdGlvbiBpc24ndCBjYWxsZWQgKGR1ZSB0byBhIG1pc3Npbmcgb3IgbWFsZm9ybWVkIHJlc3BvbnNlKSwgdGhlIFVJIHdpbGwgcmVtYWluIGluIHRoZSByb2xsaW5nIHN0YXRlLlxuXG4zLiBUaGVyZSdzIG5vIGNsZWFyIGVycm9yIGhhbmRsaW5nIGZvciB0aGUgY2FzZSB3aGVyZSB0aGUgV2ViU29ja2V0IGlzIGNvbm5lY3RlZCBidXQgdGhlIHNlcnZlciBkb2Vzbid0IHJlc3BvbmQgdG8gdGhlIGRpY2Ugcm9sbCByZXF1ZXN0LlxuXG4jIyBTb2x1dGlvblxuXG5IZXJlJ3Mgd2hhdCBJIHJlY29tbWVuZCB0byBmaXggdGhlIGlzc3VlOlxuXG4xLiAqKkltcHJvdmUgdGhlIHRpbWVvdXQgaGFuZGxpbmcgaW4gYEdhbWVCb2FyZC5qc3hgKio6XG5gYGBqYXZhc2NyaXB0XG4vLyBIYW5kbGUgdGhlIFJvbGwgRGljZSBidXR0b24gY2xpY2tcbmNvbnN0IGhhbmRsZVJvbGxEaWNlID0gKCkgPT4ge1xuICB0cnkge1xuICAgIC8vIEZpcnN0IGNoZWNrIGlmIGl0J3MgdGhlIGxvY2FsIHBsYXllcidzIHR1cm5cbiAgICBpZiAoIXNvY2tldFNlcnZpY2UuaXNMb2NhbFBsYXllclR1cm4oKSkge1xuICAgICAgdG9hc3Qoe1xuICAgICAgICB0aXRsZTogXCJOb3QgeW91ciB0dXJuXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSXQncyAke3BsYXllcnMuZmluZChwID0+IHAuaWQgPT09IGN1cnJlbnRQbGF5ZXIpPy5uYW1lIHx8IFwiYW5vdGhlciBwbGF5ZXJcIn0ncyB0dXJuYCxcbiAgICAgICAgc3RhdHVzOiBcIndhcm5pbmdcIixcbiAgICAgICAgZHVyYXRpb246IDMwMDAsXG4gICAgICAgIGlzQ2xvc2FibGU6IHRydWUsXG4gICAgICB9KTtcbiAgICAgIGRpc3BhdGNoKHNldElzUm9sbGluZyhmYWxzZSkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIHBsYXllciBpcyBpbiBqYWlsXG4gICAgaWYgKGN1cnJlbnRQbGF5ZXJEYXRhPy5pbkphaWwpIHtcbiAgICAgIHRvYXN0KHtcbiAgICAgICAgdGl0bGU6IFwiWW91J3JlIGluIGphaWwhXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgWW91IG5lZWQgdG8gcm9sbCBkb3VibGVzIG9yIHdhaXQgJHtjdXJyZW50UGxheWVyRGF0YS5qYWlsVHVybnN9IG1vcmUgdHVybnMuYCxcbiAgICAgICAgc3RhdHVzOiBcIndhcm5pbmdcIixcbiAgICAgICAgZHVyYXRpb246IDMwMDAsXG4gICAgICAgIGlzQ2xvc2FibGU6IHRydWUsXG4gICAgICB9KTtcbiAgICAgIGRpc3BhdGNoKHNldElzUm9sbGluZyhmYWxzZSkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNldCByb2xsaW5nIHN0YXRlIHRvIHRydWVcbiAgICBkaXNwYXRjaChzZXRJc1JvbGxpbmcodHJ1ZSkpO1xuXG4gICAgLy8gQ2hlY2sgaWYgV2ViU29ja2V0IGlzIGNvbm5lY3RlZCBiZWZvcmUgdHJ5aW5nIHRvIHJvbGwgZGljZVxuICAgIGlmIChzb2NrZXRTZXJ2aWNlLnNvY2tldCAmJiBzb2NrZXRTZXJ2aWNlLnNvY2tldC5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuT1BFTikge1xuICAgICAgY29uc29sZS5sb2coJ1tESUNFXSBTZW5kaW5nIHJvbGxfZGljZSByZXF1ZXN0IHRvIHNlcnZlcicpO1xuICAgICAgLy8gQ2FsbCB0aGUgc29ja2V0IHNlcnZpY2UgdG8gcm9sbCBkaWNlXG4gICAgICBzb2NrZXRTZXJ2aWNlLnJvbGxEaWNlKCk7XG5cbiAgICAgIC8vIFNldCB1cCBhIHRpbWVvdXQgdG8gaGFuZGxlIHBvdGVudGlhbCBXZWJTb2NrZXQgZmFpbHVyZXNcbiAgICAgIGxldCB3c1RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ1tESUNFXSBXZWJTb2NrZXQgdGltZW91dCwgZmFsbGluZyBiYWNrIHRvIGxvY2FsIGRpY2Ugcm9sbCcpO1xuICAgICAgICBoYW5kbGVMb2NhbERpY2VSb2xsKCk7XG4gICAgICAgIGRpc3BhdGNoKHNldElzUm9sbGluZyhmYWxzZSkpO1xuICAgICAgfSwgMzAwMCk7XG5cbiAgICAgIC8vIFN0b3JlIHRoZSB0aW1lb3V0IElEIHNvIGl0IGNhbiBiZSBjbGVhcmVkIGVsc2V3aGVyZVxuICAgICAgd2luZG93LmRpY2VSb2xsVGltZW91dCA9IHdzVGltZW91dDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coJ1tESUNFXSBXZWJTb2NrZXQgbm90IGNvbm5lY3RlZCwgdXNpbmcgbG9jYWwgZGljZSByb2xsJyk7XG4gICAgICBoYW5kbGVMb2NhbERpY2VSb2xsKCk7XG4gICAgICBkaXNwYXRjaChzZXRJc1JvbGxpbmcoZmFsc2UpKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignW0RJQ0VdIEVycm9yIHJvbGxpbmcgZGljZTonLCBlcnJvcik7XG4gICAgZGlzcGF0Y2goc2V0SXNSb2xsaW5nKGZhbHNlKSk7XG5cbiAgICB0b2FzdCh7XG4gICAgICB0aXRsZTogXCJFcnJvciByb2xsaW5nIGRpY2VcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBlcnJvci5tZXNzYWdlIHx8IFwiVGhlcmUgd2FzIGEgcHJvYmxlbSB3aXRoIHRoZSBnYW1lIHNlcnZlclwiLFxuICAgICAgc3RhdHVzOiBcImVycm9yXCIsXG4gICAgICBkdXJhdGlvbjogMzAwMCxcbiAgICAgIGlzQ2xvc2FibGU6IHRydWUsXG4gICAgfSk7XG4gIH1cbn07XG5gYGBcblxuMi4gKipNb2RpZnkgdGhlIGBoYW5kbGVEaWNlUm9sbGVkYCBmdW5jdGlvbiBpbiBgc29ja2V0U2VydmljZS5qc2AgdG8gY2xlYXIgdGhlIHRpbWVvdXQqKjpcbmBgYGphdmFzY3JpcHRcbmhhbmRsZURpY2VSb2xsZWQgPSAoZGF0YSkgPT4ge1xuICBjb25zdCB7IGRpc3BhdGNoIH0gPSBzdG9yZTtcblxuICAvLyBDbGVhciB0aGUgZGljZSByb2xsIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG4gIGlmICh3aW5kb3cuZGljZVJvbGxUaW1lb3V0KSB7XG4gICAgY2xlYXJUaW1lb3V0KHdpbmRvdy5kaWNlUm9sbFRpbWVvdXQpO1xuICAgIHdpbmRvdy5kaWNlUm9sbFRpbWVvdXQgPSBudWxsO1xuICB9XG5cbiAgLy8gQWx3YXlzIGdldCBkaWNlIHZhbHVlcyBhcyBhbiBhcnJheSBhbmQgZW5zdXJlIHRoZXkgYXJlIHZhbGlkIG51bWJlcnNcbiAgbGV0IGRpY2UgPSBBcnJheS5pc0FycmF5KGRhdGEuZGljZSkgPyBkYXRhLmRpY2UgOiBbZGF0YS5kaWNlMSwgZGF0YS5kaWNlMl07XG5cbiAgLy8gUmVzdCBvZiB0aGUgZnVuY3Rpb24uLi5cblxuICAvLyBFbnN1cmUgcm9sbGluZyBzdGF0ZSBpcyBzZXQgdG8gZmFsc2VcbiAgZGlzcGF0Y2goc2V0SXNSb2xsaW5nKGZhbHNlKSk7XG59O1xuYGBgXG5cbjMuICoqQWRkIGEgZ2xvYmFsIGVycm9yIGhhbmRsZXIgZm9yIFdlYlNvY2tldCBlcnJvcnMqKjpcbmBgYGphdmFzY3JpcHRcbi8vIEFkZCB0byBzb2NrZXRTZXJ2aWNlLmpzXG5oYW5kbGVFcnJvciA9IChlcnJvcikgPT4ge1xuICBjb25zb2xlLmVycm9yKCdXZWJTb2NrZXQgZXJyb3I6JywgZXJyb3IpO1xuICBcbiAgLy8gQ2xlYXIgYW55IHBlbmRpbmcgZGljZSByb2xsIHN0YXRlXG4gIGlmICh3aW5kb3cuZGljZVJvbGxUaW1lb3V0KSB7XG4gICAgY2xlYXJUaW1lb3V0KHdpbmRvdy5kaWNlUm9sbFRpbWVvdXQpO1xuICAgIHdpbmRvdy5kaWNlUm9sbFRpbWVvdXQgPSBudWxsO1xuICB9XG4gIFxuICAvLyBSZXNldCByb2xsaW5nIHN0YXRlXG4gIHN0b3JlLmRpc3BhdGNoKHNldElzUm9sbGluZyhmYWxzZSkpO1xuICBcbiAgLy8gTm90aWZ5IHVzZXJcbiAgdG9hc3Qoe1xuICAgIHRpdGxlOiBcIkNvbm5lY3Rpb24gRXJyb3JcIixcbiAgICBkZXNjcmlwdGlvbjogXCJUaGVyZSB3YXMgYSBwcm9ibGVtIHdpdGggdGhlIGdhbWUgY29ubmVjdGlvbi4gUGxlYXNlIHRyeSBhZ2Fpbi5cIixcbiAgICBzdGF0dXM6IFwiZXJyb3JcIixcbiAgICBkdXJhdGlvbjogNTAwMCxcbiAgICBpc0Nsb3NhYmxlOiB0cnVlLFxuICB9KTtcbn07XG5gYGBcblxuNC4gKipBZGQgYSBmb3JjZSByZXNldCBidXR0b24gZm9yIHVzZXJzKio6XG5gYGBqYXZhc2NyaXB0XG4vLyBBZGQgdG8gdGhlIFVJIG5lYXIgdGhlIFJvbGwgRGljZSBidXR0b25cbjxCdXR0b25cbiAgc2l6ZT1cInNtXCJcbiAgY29sb3JTY2hlbWU9XCJyZWRcIlxuICB2YXJpYW50PVwib3V0bGluZVwiXG4gIG9uQ2xpY2s9eygpID0+IHtcbiAgICBkaXNwYXRjaChzZXRJc1JvbGxpbmcoZmFsc2UpKTtcbiAgICBpZiAod2luZG93LmRpY2VSb2xsVGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHdpbmRvdy5kaWNlUm9sbFRpbWVvdXQpO1xuICAgICAgd2luZG93LmRpY2VSb2xsVGltZW91dCA9IG51bGw7XG4gICAgfVxuICAgIHRvYXN0KHtcbiAgICAgIHRpdGxlOiBcIlVJIFJlc2V0XCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJUaGUgZ2FtZSBVSSBoYXMgYmVlbiByZXNldFwiLFxuICAgICAgc3RhdHVzOiBcImluZm9cIixcbiAgICAgIGR1cmF0aW9uOiAzMDAwLFxuICAgICAgaXNDbG9zYWJsZTogdHJ1ZSxcbiAgICB9KTtcbiAgfX1cbiAgbWw9ezJ9XG4+XG4gIFJlc2V0IFVJXG48L0J1dHRvbj5cbmBgYFxuXG4jIyBJbXBsZW1lbnRhdGlvbiBQbGFuXG5cbjEuIE1vZGlmeSB0aGUgYGhhbmRsZVJvbGxEaWNlYCBmdW5jdGlvbiBpbiBgR2FtZUJvYXJkLmpzeGAgdG8gdXNlIGEgZ2xvYmFsIHRpbWVvdXQgdmFyaWFibGVcbjIuIFVwZGF0ZSB0aGUgYGhhbmRsZURpY2VSb2xsZWRgIGZ1bmN0aW9uIGluIGBzb2NrZXRTZXJ2aWNlLmpzYCB0byBjbGVhciB0aGUgdGltZW91dFxuMy4gQWRkIGEgZ2xvYmFsIGVycm9yIGhhbmRsZXIgZm9yIFdlYlNvY2tldCBlcnJvcnNcbjQuIENvbnNpZGVyIGFkZGluZyBhIFVJIHJlc2V0IGJ1dHRvbiBmb3IgdXNlcnMgdG8gbWFudWFsbHkgcmVjb3ZlciBmcm9tIHN0dWNrIHN0YXRlc1xuXG5Xb3VsZCB5b3UgbGlrZSBtZSB0byBoZWxwIHlvdSBpbXBsZW1lbnQgdGhlc2UgY2hhbmdlcyB0byBmaXggdGhlIGlzc3VlP1xuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJyZXF1ZXN0X2lkIjoiNDU2YjQ2MDctOTY1YS00MGYxLWIzMjQtOWEwZDE0NWEwMmZjIiwic3RhdHVzIjoiY2FuY2VsbGVkIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy10dXJuLWRlbGltaXRlciJ9LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI0ODkyZGFlOS1mNjZlLTQ2NWYtYTk3ZS0xYmNhNDliNmYwNTEiLCJyZXF1ZXN0X21lc3NhZ2UiOiJ3ZWxsIGxldCB1cyB0ZXN0IGFuZCBzZWUgd2hhdCBlcnJvciB3ZSBnZXQgb24gU2VydmVyIGJlZm9yZSB3ZSBkZWNpZGUnIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IndlbGwgbGV0IHVzIHRlc3QgYW5kIHNlZSB3aGF0IGVycm9yIHdlIGdldCBvbiBTZXJ2ZXIgYmVmb3JlIHdlIGRlY2lkZScifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTVyNjRZMXVZZGVmOVdVc29jc2hYWWIiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInZpZXdcIiwgXCJwYXRoXCI6IFwia2Vrb3BvbHktZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvZ2FtZS9HYW1lQm9hcmQuanN4XCIsIFwidmlld19yYW5nZVwiOiBbMSwgNTBdfSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IlRoYXQncyBhIGdvb2QgYXBwcm9hY2guIExldCdzIHRlc3QgYW5kIHNlZSB3aGF0IGVycm9ycyB3ZSBnZXQgb24gdGhlIHNlcnZlciBzaWRlIGJlZm9yZSBtYWtpbmcgYW55IGNoYW5nZXMuIFRoaXMgd2lsbCBoZWxwIHVzIHBpbnBvaW50IHRoZSBleGFjdCBpc3N1ZS5cblxuTGV0J3Mgc2V0IHVwIHNvbWUgZGVidWdnaW5nIHRvIGNhcHR1cmUgd2hhdCdzIGhhcHBlbmluZyB3aGVuIHlvdSBwcmVzcyB0aGUgXCJSb2xsIERpY2VcIiBidXR0b246XG5cbjEuIEZpcnN0LCBsZXQncyBhZGQgc29tZSBjb25zb2xlIGxvZ2dpbmcgdG8gdHJhY2sgdGhlIGZsb3cgb2YgZXZlbnRzIGFuZCBpZGVudGlmeSB3aGVyZSB0aGluZ3MgbWlnaHQgYmUgZ2V0dGluZyBzdHVjay5cblxuSGVyZSdzIGhvdyB3ZSBjYW4gYWRkIHRlbXBvcmFyeSBkZWJ1Z2dpbmcgY29kZTpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjAsInRleHRfbm9kZSI6eyJjb250ZW50Ijoid2VsbCBsZXQgdXMgdGVzdCBhbmQgc2VlIHdoYXQgZXJyb3Igd2UgZ2V0IG9uIFNlcnZlciBiZWZvcmUgd2UgZGVjaWRlJyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIiLCJmb2xkZXJSb290IjoiL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMiJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMDNUMDM6MDU6NTQuMTIxWiIsInJlc3BvbnNlX3RleHQiOiJUaGF0J3MgYSBnb29kIGFwcHJvYWNoLiBMZXQncyB0ZXN0IGFuZCBzZWUgd2hhdCBlcnJvcnMgd2UgZ2V0IG9uIHRoZSBzZXJ2ZXIgc2lkZSBiZWZvcmUgbWFraW5nIGFueSBjaGFuZ2VzLiBUaGlzIHdpbGwgaGVscCB1cyBwaW5wb2ludCB0aGUgZXhhY3QgaXNzdWUuXG5cbkxldCdzIHNldCB1cCBzb21lIGRlYnVnZ2luZyB0byBjYXB0dXJlIHdoYXQncyBoYXBwZW5pbmcgd2hlbiB5b3UgcHJlc3MgdGhlIFwiUm9sbCBEaWNlXCIgYnV0dG9uOlxuXG4xLiBGaXJzdCwgbGV0J3MgYWRkIHNvbWUgY29uc29sZSBsb2dnaW5nIHRvIHRyYWNrIHRoZSBmbG93IG9mIGV2ZW50cyBhbmQgaWRlbnRpZnkgd2hlcmUgdGhpbmdzIG1pZ2h0IGJlIGdldHRpbmcgc3R1Y2suXG5cbkhlcmUncyBob3cgd2UgY2FuIGFkZCB0ZW1wb3JhcnkgZGVidWdnaW5nIGNvZGU6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZTI1N2FmMTMtMTUxZS00MGUzLTkxMGMtZWRkODU1Y2FkMzI1IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxV1h2YTJZV1Q2V1Vyclh4Q01vU2NDRSIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCJrZWtvcG9seS1mcm9udGVuZC9zcmMvY29tcG9uZW50cy9nYW1lL0dhbWVCb2FyZC5qc3hcIiwgXCJ2aWV3X3JhbmdlXCI6IFszMDAsIDQwMF19IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBrZWtvcG9seS1mcm9udGVuZC9zcmMvY29tcG9uZW50cy9nYW1lL0dhbWVCb2FyZC5qc3g6XG4gICAgIDFcdGltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG4gICAgIDJcdGltcG9ydCB7XG4gICAgIDNcdCAgQm94LFxuICAgICA0XHQgIFRhYnMsXG4gICAgIDVcdCAgVGFiTGlzdCxcbiAgICAgNlx0ICBUYWJQYW5lbHMsXG4gICAgIDdcdCAgVGFiUGFuZWwsXG4gICAgIDhcdCAgVGFiLFxuICAgICA5XHQgIEhTdGFjayxcbiAgICAxMFx0ICBUZXh0LFxuICAgIDExXHQgIEJ1dHRvbixcbiAgICAxMlx0ICBJbWFnZSxcbiAgICAxM1x0ICBGbGV4LFxuICAgIDE0XHQgIEljb25CdXR0b24sXG4gICAgMTVcdCAgVlN0YWNrLFxuICAgIDE2XHQgIERpdmlkZXIsXG4gICAgMTdcdCAgQmFkZ2UsXG4gICAgMThcdCAgUG9wb3ZlcixcbiAgICAxOVx0ICBQb3BvdmVyVHJpZ2dlcixcbiAgICAyMFx0ICBQb3BvdmVyQ29udGVudCxcbiAgICAyMVx0ICBQb3BvdmVySGVhZGVyLFxuICAgIDIyXHQgIFBvcG92ZXJCb2R5LFxuICAgIDIzXHQgIFBvcG92ZXJBcnJvdyxcbiAgICAyNFx0ICBQb3BvdmVyQ2xvc2VCdXR0b24sXG4gICAgMjVcdCAgQXNwZWN0UmF0aW8sXG4gICAgMjZcdCAgdXNlQnJlYWtwb2ludFZhbHVlLFxuICAgIDI3XHQgIHVzZVRvYXN0LFxuICAgIDI4XHQgIEFsZXJ0LFxuICAgIDI5XHQgIEFsZXJ0SWNvbixcbiAgICAzMFx0ICBBbGVydFRpdGxlLFxuICAgIDMxXHQgIEFsZXJ0RGVzY3JpcHRpb24sXG4gICAgMzJcdCAgTW9kYWwsXG4gICAgMzNcdCAgTW9kYWxPdmVybGF5LFxuICAgIDM0XHQgIE1vZGFsQ29udGVudCxcbiAgICAzNVx0ICBNb2RhbEhlYWRlcixcbiAgICAzNlx0ICBNb2RhbEJvZHksXG4gICAgMzdcdCAgTW9kYWxGb290ZXIsXG4gICAgMzhcdCAgTW9kYWxDbG9zZUJ1dHRvbixcbiAgICAzOVx0ICB1c2VEaXNjbG9zdXJlLFxuICAgIDQwXHR9IGZyb20gJ0BjaGFrcmEtdWkvcmVhY3QnO1xuICAgIDQxXHRpbXBvcnQgeyBrZXlmcmFtZXMgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG4gICAgNDJcdGltcG9ydCB7IHVzZVNlbGVjdG9yLCB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbiAgICA0M1x0aW1wb3J0IHsgSGFtYnVyZ2VySWNvbiB9IGZyb20gJ0BjaGFrcmEtdWkvaWNvbnMnO1xuICAgIDQ0XHRpbXBvcnQgZ2FtZUJvYXJkSW1hZ2UgZnJvbSAnLi4vLi4vYXNzZXRzL25ld19nYW1lX2JvYXJkLnBuZyc7XG4gICAgNDVcdGltcG9ydCB7IGJvYXJkU3BhY2VzIGFzIGNvbmZpZ0JvYXJkU3BhY2VzIH0gZnJvbSAnLi4vLi4vY29uZmlnL2JvYXJkQ29uZmlnJztcbiAgICA0Nlx0aW1wb3J0IHsgYm9hcmRTcGFjZXMgYXMgbW9kZWxCb2FyZFNwYWNlcywgcHJvcGVydGllcyB9IGZyb20gJy4uLy4uL2NvcmUvbW9kZWxzL2JvYXJkQ29uZmlnJztcbiAgICA0N1x0aW1wb3J0IHsgYm9hcmRDb29yZGluYXRlcyB9IGZyb20gJy4uLy4uL2NvcmUvbW9kZWxzL2JvYXJkQ29vcmRpbmF0ZXMnO1xuICAgIDQ4XHRpbXBvcnQgc29ja2V0U2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9zb2NrZXRTZXJ2aWNlJztcbiAgICA0OVx0aW1wb3J0IHsgbW92ZVBsYXllciwgdXBkYXRlRGljZVJvbGwsIGNsZWFyR2FtZU1lc3NhZ2VzLCBlbmRUdXJuLCBzZXRQbGF5ZXJzLCBzZXRJc1JvbGxpbmcsIGJ1eVByb3BlcnR5IH0gZnJvbSAnLi4vLi4vc3RvcmUvZ2FtZVNsaWNlJztcbiAgICA1MFx0aW1wb3J0IHsgRmFEaWNlRml2ZSwgRmFFeGNsYW1hdGlvblRyaWFuZ2xlLCBGYUFycm93Q2lyY2xlUmlnaHQsIEZhSG9tZSB9IGZyb20gJ3JlYWN0LWljb25zL2ZhJztcblRvdGFsIGxpbmVzIGluIGZpbGU6IDE2NjRcbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTVyNjRZMXVZZGVmOVdVc29jc2hYWWIifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIiwiZm9sZGVyUm9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTAzVDAzOjA1OjU5Ljk0OVoiLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImRmNWYwNTQxLTc5YjgtNGFjNi04ZDQxLTVlYTI0N2EwMzJlYSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUJvcGhUWGVCanF6Z3M1c1dSTFFQTGoiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInZpZXdcIiwgXCJwYXRoXCI6IFwia2Vrb3BvbHktZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvZ2FtZS9HYW1lQm9hcmQuanN4XCIsIFwidmlld19yYW5nZVwiOiBbNDAwLCA1MDBdfSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24ga2Vrb3BvbHktZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvZ2FtZS9HYW1lQm9hcmQuanN4OlxuICAgMzAwXHQgIC8vIFN0YXRlIGZvciB0cmFja2luZyBhbmltYXRpb25cbiAgIDMwMVx0ICBjb25zdCBbYW5pbWF0aW5nUGxheWVyLCBzZXRBbmltYXRpbmdQbGF5ZXJdID0gdXNlU3RhdGUobnVsbCk7XG4gICAzMDJcdCAgY29uc3QgW2FuaW1hdGlvblN0ZXAsIHNldEFuaW1hdGlvblN0ZXBdID0gdXNlU3RhdGUoMCk7XG4gICAzMDNcdCAgY29uc3QgW2FuaW1hdGlvblBhdGgsIHNldEFuaW1hdGlvblBhdGhdID0gdXNlU3RhdGUoW10pO1xuICAgMzA0XHRcbiAgIDMwNVx0ICAvLyBTdGF0ZSBmb3IgdHJhY2tpbmcgc2VsZWN0ZWQgcHJvcGVydHlcbiAgIDMwNlx0ICBjb25zdCBbc2VsZWN0ZWRQcm9wZXJ0eSwgc2V0U2VsZWN0ZWRQcm9wZXJ0eV0gPSB1c2VTdGF0ZShudWxsKTtcbiAgIDMwN1x0XG4gICAzMDhcdCAgLy8gUmVmIGZvciB0aGUgZ2FtZSBib2FyZCBjb250YWluZXIgdG8gZ2V0IGFjdHVhbCBkaW1lbnNpb25zXG4gICAzMDlcdCAgY29uc3QgYm9hcmRDb250YWluZXJSZWYgPSB1c2VSZWYobnVsbCk7XG4gICAzMTBcdCAgY29uc3QgW2JvYXJkRGltZW5zaW9ucywgc2V0Qm9hcmREaW1lbnNpb25zXSA9IHVzZVN0YXRlKHsgd2lkdGg6IDAsIGhlaWdodDogMCB9KTtcbiAgIDMxMVx0XG4gICAzMTJcdCAgY29uc3QgbG9iYnlQbGF5ZXJzID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUucGxheWVycy5wbGF5ZXJzKTsgLy8gb2JqZWN0XG4gICAzMTNcdCAgY29uc3QgZ2FtZVBsYXllcnMgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5nYW1lLnBsYXllcnMpOyAvLyBhcnJheVxuICAgMzE0XHRcbiAgIDMxNVx0ICBjb25zdCBnYW1lU3RhdGUgPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLmdhbWUpO1xuICAgMzE2XHRcbiAgIDMxN1x0ICAvLyBBZGQgdGhpcyB1c2VSZWYgdG8gdHJhY2sgcHJldmlvdXMgcGxheWVyIHBvc2l0aW9uc1xuICAgMzE4XHQgIGNvbnN0IHByZXZQbGF5ZXJQb3NpdGlvbnMgPSB1c2VSZWYoe30pO1xuICAgMzE5XHRcbiAgIDMyMFx0ICBjb25zdCBpc1JvbGxpbmcgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5nYW1lLmlzUm9sbGluZyk7XG4gICAzMjFcdFxuICAgMzIyXHQgIC8vIC0tLSBQcm9wZXJ0eSBQdXJjaGFzZSBNb2RhbCBTdGF0ZSAtLS1cbiAgIDMyM1x0ICBjb25zdCBbc2hvd1B1cmNoYXNlTW9kYWwsIHNldFNob3dQdXJjaGFzZU1vZGFsXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgIDMyNFx0ICBjb25zdCBbcHVyY2hhc2VQcm9wZXJ0eSwgc2V0UHVyY2hhc2VQcm9wZXJ0eV0gPSB1c2VTdGF0ZShudWxsKTtcbiAgIDMyNVx0ICBjb25zdCBbaXNCdXlpbmcsIHNldElzQnV5aW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgIDMyNlx0ICBjb25zdCBwdXJjaGFzZURpc2Nsb3N1cmUgPSB1c2VEaXNjbG9zdXJlKCk7XG4gICAzMjdcdFxuICAgMzI4XHQgIC8vIEhlbHBlcjogQ2hlY2sgaWYgY3VycmVudCBwbGF5ZXIgY2FuIGJ1eSBwcm9wZXJ0eVxuICAgMzI5XHQgIGNvbnN0IGNhbkJ1eVByb3BlcnR5ID0gKHBsYXllciwgc3BhY2UsIGJvYXJkU3RhdGUpID0+IHtcbiAgIDMzMFx0ICAgIC8vIEJhc2ljIHZhbGlkYXRpb25cbiAgIDMzMVx0ICAgIGlmICghcGxheWVyIHx8ICFzcGFjZSkge1xuICAgMzMyXHQgICAgICBjb25zb2xlLmxvZygnW1BST1BFUlRZX1BVUkNIQVNFXSBNaXNzaW5nIHBsYXllciBvciBzcGFjZSBkYXRhJyk7XG4gICAzMzNcdCAgICAgIHJldHVybiBmYWxzZTtcbiAgIDMzNFx0ICAgIH1cbiAgIDMzNVx0XG4gICAzMzZcdCAgICAvLyBDaGVjayBpZiB0aGlzIGlzIGEgcHVyY2hhc2FibGUgcHJvcGVydHkgLSBPTkxZIGFsbG93IFwicHJvcGVydHlcIiB0eXBlXG4gICAzMzdcdCAgICAvLyBJbiBib2FyZENvbmZpZy5qcywgcHVyY2hhc2FibGUgcHJvcGVydGllcyBoYXZlIHR5cGU6ICdwcm9wZXJ0eSdcbiAgIDMzOFx0ICAgIGNvbnN0IHByb3BlcnR5VHlwZSA9IHNwYWNlLnR5cGU/LnRvTG93ZXJDYXNlKCk7XG4gICAzMzlcdCAgICBjb25zdCBpc1ZhbGlkUHJvcGVydHlUeXBlID0gcHJvcGVydHlUeXBlID09PSAncHJvcGVydHknO1xuICAgMzQwXHRcbiAgIDM0MVx0ICAgIGlmICghaXNWYWxpZFByb3BlcnR5VHlwZSkge1xuICAgMzQyXHQgICAgICBjb25zb2xlLmxvZyhgW1BST1BFUlRZX1BVUkNIQVNFXSBOb3QgYSBwdXJjaGFzYWJsZSBwcm9wZXJ0eSB0eXBlOiAke3Byb3BlcnR5VHlwZX1gKTtcbiAgIDM0M1x0ICAgICAgcmV0dXJuIGZhbHNlO1xuICAgMzQ0XHQgICAgfVxuICAgMzQ1XHRcbiAgIDM0Nlx0ICAgIC8vIEFsc28gY2hlY2sgaWYgaXQgaGFzIGEgcHJvcGVydHlJZCAocmVxdWlyZWQgZm9yIHB1cmNoYXNlKVxuICAgMzQ3XHQgICAgaWYgKCFzcGFjZS5wcm9wZXJ0eUlkKSB7XG4gICAzNDhcdCAgICAgIGNvbnNvbGUubG9nKCdbUFJPUEVSVFlfUFVSQ0hBU0VdIE1pc3NpbmcgcHJvcGVydHlJZCwgY2Fubm90IHB1cmNoYXNlJyk7XG4gICAzNDlcdCAgICAgIHJldHVybiBmYWxzZTtcbiAgIDM1MFx0ICAgIH1cbiAgIDM1MVx0XG4gICAzNTJcdCAgICAvLyBDaGVjayBpZiBpdCdzIHRoZSBwbGF5ZXIncyB0dXJuXG4gICAzNTNcdCAgICBjb25zdCBpc1BsYXllclR1cm4gPSBwbGF5ZXIuaWQgPT09IGN1cnJlbnRQbGF5ZXI7XG4gICAzNTRcdCAgICBpZiAoIWlzUGxheWVyVHVybikge1xuICAgMzU1XHQgICAgICBjb25zb2xlLmxvZygnW1BST1BFUlRZX1BVUkNIQVNFXSBOb3QgcGxheWVyXFwncyB0dXJuJyk7XG4gICAzNTZcdCAgICAgIHJldHVybiBmYWxzZTtcbiAgIDM1N1x0ICAgIH1cbiAgIDM1OFx0XG4gICAzNTlcdCAgICAvLyBGaW5kIHByb3BlcnR5IHN0YXRlIG9uIGJvYXJkXG4gICAzNjBcdCAgICBjb25zdCBwcm9wU3RhdGUgPSBib2FyZFN0YXRlLmZpbmQocyA9PiBzLmlkID09PSBzcGFjZS5wb3NpdGlvbik7XG4gICAzNjFcdCAgICBjb25zdCBpc093bmVkID0gcHJvcFN0YXRlICYmIHByb3BTdGF0ZS5vd25lcjtcbiAgIDM2Mlx0XG4gICAzNjNcdCAgICAvLyBHZXQgcHJvcGVydHkgY29zdCAtIHRyeSBtdWx0aXBsZSBzb3VyY2VzXG4gICAzNjRcdCAgICBjb25zdCBwcm9wZXJ0eUNvc3QgPVxuICAgMzY1XHQgICAgICAocHJvcGVydGllc1tzcGFjZS5wcm9wZXJ0eUlkXT8uY29zdCkgfHxcbiAgIDM2Nlx0ICAgICAgKHNwYWNlLnByaWNlKSB8fFxuICAgMzY3XHQgICAgICAoc3BhY2UucHJvcGVydHlJZCA/IDIwMCA6IDApOyAvLyBEZWZhdWx0IGNvc3QgaWYgbm90aGluZyBlbHNlIGF2YWlsYWJsZVxuICAgMzY4XHRcbiAgIDM2OVx0ICAgIC8vIENoZWNrIGlmIHBsYXllciBoYXMgZW5vdWdoIG1vbmV5XG4gICAzNzBcdCAgICBjb25zdCBoYXNFbm91Z2hNb25leSA9IHBsYXllci5iYWxhbmNlID49IHByb3BlcnR5Q29zdDtcbiAgIDM3MVx0XG4gICAzNzJcdCAgICBjb25zb2xlLmxvZygnW1BST1BFUlRZX1BVUkNIQVNFXSBQcm9wZXJ0eSBwdXJjaGFzZSBjaGVjayBkZXRhaWxzOicsIHtcbiAgIDM3M1x0ICAgICAgcHJvcGVydHlJZDogc3BhY2UucHJvcGVydHlJZCxcbiAgIDM3NFx0ICAgICAgcG9zaXRpb246IHNwYWNlLnBvc2l0aW9uLFxuICAgMzc1XHQgICAgICB0eXBlOiBwcm9wZXJ0eVR5cGUsXG4gICAzNzZcdCAgICAgIGlzVmFsaWRQcm9wZXJ0eVR5cGUsXG4gICAzNzdcdCAgICAgIGlzT3duZWQsXG4gICAzNzhcdCAgICAgIHByb3BlcnR5Q29zdCxcbiAgIDM3OVx0ICAgICAgcGxheWVyQmFsYW5jZTogcGxheWVyLmJhbGFuY2UsXG4gICAzODBcdCAgICAgIGhhc0Vub3VnaE1vbmV5LFxuICAgMzgxXHQgICAgICBpc1BsYXllclR1cm5cbiAgIDM4Mlx0ICAgIH0pO1xuICAgMzgzXHRcbiAgIDM4NFx0ICAgIC8vIFVub3duZWQsIHZhbGlkIHByb3BlcnR5IHR5cGUsIHBsYXllcidzIHR1cm4sIGFuZCBwbGF5ZXIgaGFzIGVub3VnaCBtb25leVxuICAgMzg1XHQgICAgcmV0dXJuICFpc093bmVkICYmIGlzVmFsaWRQcm9wZXJ0eVR5cGUgJiYgaXNQbGF5ZXJUdXJuICYmIGhhc0Vub3VnaE1vbmV5O1xuICAgMzg2XHQgIH07XG4gICAzODdcdFxuICAgMzg4XHQgIC8vIERldGVjdCBhZnRlciBtb3ZlbWVudCBpZiBwbGF5ZXIgaXMgb24gYW4gdW5vd25lZCBwcm9wZXJ0eVxuICAgMzg5XHQgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAzOTBcdCAgICBpZiAoIWN1cnJlbnRQbGF5ZXJEYXRhIHx8ICFjdXJyZW50UGxheWVyRGF0YS5wb3NpdGlvbikgcmV0dXJuO1xuICAgMzkxXHQgICAgY29uc3Qgc3BhY2UgPSBnZXRTcGFjZURhdGFCeVBvc2l0aW9uKGN1cnJlbnRQbGF5ZXJEYXRhLnBvc2l0aW9uKTtcbiAgIDM5Mlx0XG4gICAzOTNcdCAgICAvLyBEZWJ1ZyBsb2cgdG8gaGVscCB0cm91Ymxlc2hvb3QgcHJvcGVydHkgcHVyY2hhc2UgVUlcbiAgIDM5NFx0ICAgIGNvbnNvbGUubG9nKCdbUFJPUEVSVFlfUFVSQ0hBU0VdIENoZWNraW5nIGlmIGNhbiBidXkgcHJvcGVydHk6Jywge1xuICAgMzk1XHQgICAgICBjdXJyZW50UG9zaXRpb246IGN1cnJlbnRQbGF5ZXJEYXRhLnBvc2l0aW9uLFxuICAgMzk2XHQgICAgICBzcGFjZSxcbiAgIDM5N1x0ICAgICAgaXNMb2NhbFBsYXllclR1cm46IHNvY2tldFNlcnZpY2U/LmlzTG9jYWxQbGF5ZXJUdXJuPy4oKSxcbiAgIDM5OFx0ICAgICAgY3VycmVudFBsYXllcjogY3VycmVudFBsYXllcixcbiAgIDM5OVx0ICAgICAgbG9jYWxQbGF5ZXJJZDogc29ja2V0U2VydmljZT8ubG9jYWxQbGF5ZXJJZFxuICAgNDAwXHQgICAgfSk7XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAxNjY0XG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFXWHZhMllXVDZXVXJyWHhDTW9TY0NFIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMiIsImZvbGRlclJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0wM1QwMzowNjowNS42NzZaIiwicmVzcG9uc2VfdGV4dCI6IiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI5M2I5NGVmYi1lODg0LTRkNDktOTI4MC02NzBmYWRiOGIzMmEiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFLamZ5bzNOYnQ1bnk2NTFNZmtmeXpBIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJ2aWV3XCIsIFwicGF0aFwiOiBcImtla29wb2x5LWZyb250ZW5kL3NyYy9jb21wb25lbnRzL2dhbWUvR2FtZUJvYXJkLmpzeFwiLCBcInZpZXdfcmFuZ2VcIjogWzcwMCwgODAwXX0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiIifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIGtla29wb2x5LWZyb250ZW5kL3NyYy9jb21wb25lbnRzL2dhbWUvR2FtZUJvYXJkLmpzeDpcbiAgIDQwMFx0ICAgIH0pO1xuICAgNDAxXHRcbiAgIDQwMlx0ICAgIGlmIChjYW5CdXlQcm9wZXJ0eShjdXJyZW50UGxheWVyRGF0YSwgc3BhY2UsIGN1cnJlbnRCb2FyZFN0YXRlKSkge1xuICAgNDAzXHQgICAgICBjb25zb2xlLmxvZygnW1BST1BFUlRZX1BVUkNIQVNFXSBDYW4gYnV5IHByb3BlcnR5LCBzaG93aW5nIHB1cmNoYXNlIG1vZGFsJyk7XG4gICA0MDRcdCAgICAgIHNldFB1cmNoYXNlUHJvcGVydHkoc3BhY2UpO1xuICAgNDA1XHQgICAgICBzZXRTaG93UHVyY2hhc2VNb2RhbCh0cnVlKTtcbiAgIDQwNlx0ICAgICAgcHVyY2hhc2VEaXNjbG9zdXJlLm9uT3BlbigpO1xuICAgNDA3XHQgICAgfSBlbHNlIHtcbiAgIDQwOFx0ICAgICAgY29uc29sZS5sb2coJ1tQUk9QRVJUWV9QVVJDSEFTRV0gQ2Fubm90IGJ1eSBwcm9wZXJ0eSwgaGlkaW5nIHB1cmNoYXNlIG1vZGFsJyk7XG4gICA0MDlcdCAgICAgIHNldFNob3dQdXJjaGFzZU1vZGFsKGZhbHNlKTtcbiAgIDQxMFx0ICAgICAgc2V0UHVyY2hhc2VQcm9wZXJ0eShudWxsKTtcbiAgIDQxMVx0ICAgICAgcHVyY2hhc2VEaXNjbG9zdXJlLm9uQ2xvc2UoKTtcbiAgIDQxMlx0ICAgIH1cbiAgIDQxM1x0ICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgNDE0XHQgIH0sIFtjdXJyZW50UGxheWVyRGF0YT8ucG9zaXRpb24sIGN1cnJlbnRCb2FyZFN0YXRlXSk7XG4gICA0MTVcdFxuICAgNDE2XHQgIC8vIEhhbmRsZXI6IEJ1eSBwcm9wZXJ0eVxuICAgNDE3XHQgIGNvbnN0IGhhbmRsZUJ1eVByb3BlcnR5ID0gYXN5bmMgKCkgPT4ge1xuICAgNDE4XHQgICAgaWYgKCFwdXJjaGFzZVByb3BlcnR5KSByZXR1cm47XG4gICA0MTlcdCAgICBzZXRJc0J1eWluZyh0cnVlKTtcbiAgIDQyMFx0ICAgIHRyeSB7XG4gICA0MjFcdCAgICAgIC8vIFVzZSB0aGUgbG9jYWwgUmVkdXggYWN0aW9uIHRvIHVwZGF0ZSB0aGUgVUkgaW1tZWRpYXRlbHlcbiAgIDQyMlx0ICAgICAgZGlzcGF0Y2goYnV5UHJvcGVydHkoe1xuICAgNDIzXHQgICAgICAgIHBsYXllcklkOiBjdXJyZW50UGxheWVyRGF0YT8uaWQsXG4gICA0MjRcdCAgICAgICAgcHJvcGVydHlJZDogcHVyY2hhc2VQcm9wZXJ0eS5wb3NpdGlvbiAvLyBVc2UgcG9zaXRpb24gYXMgcHJvcGVydHlJZCBmb3IgYm9hcmQgc3BhY2VzXG4gICA0MjVcdCAgICAgIH0pKTtcbiAgIDQyNlx0XG4gICA0MjdcdCAgICAgIC8vIEFsc28gc2VuZCB2aWEgV2ViU29ja2V0IGlmIGNvbm5lY3RlZFxuICAgNDI4XHQgICAgICBpZiAoc29ja2V0U2VydmljZSAmJiBzb2NrZXRTZXJ2aWNlLnNvY2tldCAmJiBzb2NrZXRTZXJ2aWNlLnNvY2tldC5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuT1BFTikge1xuICAgNDI5XHQgICAgICAgIHNvY2tldFNlcnZpY2Uuc2VuZE1lc3NhZ2UoJ2J1eV9wcm9wZXJ0eScsIHtcbiAgIDQzMFx0ICAgICAgICAgIHByb3BlcnR5SWQ6IHB1cmNoYXNlUHJvcGVydHkucHJvcGVydHlJZCB8fCBwdXJjaGFzZVByb3BlcnR5LnBvc2l0aW9uLFxuICAgNDMxXHQgICAgICAgICAgcGxheWVySWQ6IGN1cnJlbnRQbGF5ZXJEYXRhPy5pZFxuICAgNDMyXHQgICAgICAgIH0pO1xuICAgNDMzXHQgICAgICB9XG4gICA0MzRcdFxuICAgNDM1XHQgICAgICB0b2FzdCh7IHRpdGxlOiAnUHJvcGVydHkgcHVyY2hhc2VkIScsIHN0YXR1czogJ3N1Y2Nlc3MnLCBkdXJhdGlvbjogMzAwMCwgaXNDbG9zYWJsZTogdHJ1ZSB9KTtcbiAgIDQzNlx0ICAgICAgc2V0U2hvd1B1cmNoYXNlTW9kYWwoZmFsc2UpO1xuICAgNDM3XHQgICAgICBzZXRQdXJjaGFzZVByb3BlcnR5KG51bGwpO1xuICAgNDM4XHQgICAgICBwdXJjaGFzZURpc2Nsb3N1cmUub25DbG9zZSgpO1xuICAgNDM5XHQgICAgfSBjYXRjaCAoZXJyKSB7XG4gICA0NDBcdCAgICAgIHRvYXN0KHsgdGl0bGU6ICdFcnJvcicsIGRlc2NyaXB0aW9uOiBlcnIubWVzc2FnZSwgc3RhdHVzOiAnZXJyb3InLCBkdXJhdGlvbjogNDAwMCwgaXNDbG9zYWJsZTogdHJ1ZSB9KTtcbiAgIDQ0MVx0ICAgIH0gZmluYWxseSB7XG4gICA0NDJcdCAgICAgIHNldElzQnV5aW5nKGZhbHNlKTtcbiAgIDQ0M1x0ICAgIH1cbiAgIDQ0NFx0ICB9O1xuICAgNDQ1XHRcbiAgIDQ0Nlx0ICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgNDQ3XHQgICAgaWYgKFxuICAgNDQ4XHQgICAgICBnYW1lUGxheWVycy5sZW5ndGggPT09IDAgJiZcbiAgIDQ0OVx0ICAgICAgT2JqZWN0LmtleXMobG9iYnlQbGF5ZXJzKS5sZW5ndGggPiAwICYmXG4gICA0NTBcdCAgICAgIGdhbWVTdGF0ZS5ob3N0SWRcbiAgIDQ1MVx0ICAgICkge1xuICAgNDUyXHQgICAgICAvLyBTb3J0IHBsYXllcnM6IGhvc3QgZmlyc3QsIHRoZW4gb3RoZXJzXG4gICA0NTNcdCAgICAgIGNvbnN0IHBsYXllcnNBcnJheSA9IE9iamVjdC52YWx1ZXMobG9iYnlQbGF5ZXJzKVxuICAgNDU0XHQgICAgICAgIC5zb3J0KChhLCBiKSA9PiAoYS5pZCA9PT0gZ2FtZVN0YXRlLmhvc3RJZCA/IC0xIDogYi5pZCA9PT0gZ2FtZVN0YXRlLmhvc3RJZCA/IDEgOiAwKSlcbiAgIDQ1NVx0ICAgICAgICAubWFwKHAgPT4gKHtcbiAgIDQ1Nlx0ICAgICAgICAgIC4uLnAsXG4gICA0NTdcdCAgICAgICAgICBwb3NpdGlvbjogcC5wb3NpdGlvbiB8fCAxLCAvLyBkZWZhdWx0IHRvIFNUQVJUXG4gICA0NThcdCAgICAgICAgICBiYWxhbmNlOiBwLmJhbGFuY2UgfHwgMTUwMCxcbiAgIDQ1OVx0ICAgICAgICAgIHByb3BlcnRpZXM6IHAucHJvcGVydGllcyB8fCBbXSxcbiAgIDQ2MFx0ICAgICAgICAgIGluSmFpbDogcC5pbkphaWwgfHwgZmFsc2UsXG4gICA0NjFcdCAgICAgICAgICBqYWlsVHVybnM6IHAuamFpbFR1cm5zIHx8IDAsXG4gICA0NjJcdCAgICAgICAgICBpc1JlYWR5OiBwLmlzUmVhZHkgfHwgZmFsc2UsXG4gICA0NjNcdCAgICAgICAgICBpc0hvc3Q6IHAuaXNIb3N0IHx8IGZhbHNlLFxuICAgNDY0XHQgICAgICAgIH0pKTtcbiAgIDQ2NVx0ICAgICAgZGlzcGF0Y2goc2V0UGxheWVycyhwbGF5ZXJzQXJyYXkpKTtcbiAgIDQ2Nlx0ICAgICAgaWYgKGdhbWVTdGF0ZS5ob3N0SWQpIHtcbiAgIDQ2N1x0ICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdnYW1lL3NldEN1cnJlbnRQbGF5ZXInLCBwYXlsb2FkOiBnYW1lU3RhdGUuaG9zdElkIH0pOyAvLyBIb3N0IHN0YXJ0c1xuICAgNDY4XHQgICAgICB9XG4gICA0NjlcdCAgICB9XG4gICA0NzBcdCAgfSwgW2xvYmJ5UGxheWVycywgZ2FtZVBsYXllcnMsIGRpc3BhdGNoLCBnYW1lU3RhdGUuaG9zdElkXSk7XG4gICA0NzFcdFxuICAgNDcyXHQgIC8vIEluaXRpYWxpemUgc29ja2V0IGNvbm5lY3Rpb25cbiAgIDQ3M1x0ICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgNDc0XHQgICAgLy8gQ2hlY2sgaWYgc29ja2V0U2VydmljZSBleGlzdHMgYW5kIGlmIHNvY2tldCBpcyBhbHJlYWR5IGNvbm5lY3RlZFxuICAgNDc1XHQgICAgaWYgKCFzb2NrZXRTZXJ2aWNlIHx8ICFzb2NrZXRTZXJ2aWNlLnNvY2tldCB8fCBzb2NrZXRTZXJ2aWNlLnNvY2tldC5yZWFkeVN0YXRlICE9PSBXZWJTb2NrZXQuT1BFTikge1xuICAgNDc2XHQgICAgICB0cnkge1xuICAgNDc3XHQgICAgICAgIC8vIEdldCBnYW1lIElEIGZyb20gVVJMIG9yIFJlZHV4XG4gICA0NzhcdCAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbiAgIDQ3OVx0ICAgICAgICBjb25zdCBnYW1lSWQgPSB1cmxQYXJhbXMuZ2V0KCdnYW1lSWQnKSB8fCBjdXJyZW50UGxheWVyRGF0YT8uZ2FtZUlkO1xuICAgNDgwXHQgICAgICAgIGNvbnN0IHBsYXllcklkID0gY3VycmVudFBsYXllckRhdGE/LmlkO1xuICAgNDgxXHRcbiAgIDQ4Mlx0ICAgICAgICBpZiAoIWdhbWVJZCB8fCAhcGxheWVySWQpIHtcbiAgIDQ4M1x0ICAgICAgICAgIHJldHVybjsgLy8gRXhpdCBlYXJseSBpZiB3ZSBkb24ndCBoYXZlIHJlcXVpcmVkIGRhdGFcbiAgIDQ4NFx0ICAgICAgICB9XG4gICA0ODVcdFxuICAgNDg2XHQgICAgICAgIGNvbnNvbGUubG9nKGBDb25uZWN0aW5nIHRvIGdhbWU6ICR7Z2FtZUlkfSBhcyBwbGF5ZXI6ICR7cGxheWVySWR9YCk7XG4gICA0ODdcdFxuICAgNDg4XHQgICAgICAgIC8vIEluaXRpYWxpemUgdGhlIHNvY2tldCBzZXJ2aWNlIGlmIGl0IGV4aXN0c1xuICAgNDg5XHQgICAgICAgIGlmIChzb2NrZXRTZXJ2aWNlPy5pbml0aWFsaXplKSB7XG4gICA0OTBcdCAgICAgICAgICBzb2NrZXRTZXJ2aWNlLmluaXRpYWxpemUoKTtcbiAgIDQ5MVx0ICAgICAgICB9IGVsc2Uge1xuICAgNDkyXHQgICAgICAgICAgcmV0dXJuO1xuICAgNDkzXHQgICAgICAgIH1cbiAgIDQ5NFx0XG4gICA0OTVcdCAgICAgICAgLy8gR2V0IGF1dGhlbnRpY2F0aW9uIHRva2VuIChpbiBhIHJlYWwgYXBwLCB0aGlzIHdvdWxkIGNvbWUgZnJvbSBsb2NhbFN0b3JhZ2Ugb3IgYXV0aGVudGljYXRpb24gc2VydmljZSlcbiAgIDQ5Nlx0ICAgICAgICBjb25zdCBhdXRoVG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShga2Vrb3BvbHlfdG9rZW5fJHtnYW1lSWR9YCkgfHwgJ3RlbXAtdG9rZW4nO1xuICAgNDk3XHRcbiAgIDQ5OFx0ICAgICAgICAvLyBDb25uZWN0IHRvIHRoZSBzb2NrZXQgd2l0aCBwcm9wZXIgYXV0aGVudGljYXRpb25cbiAgIDQ5OVx0ICAgICAgICBpZiAoc29ja2V0U2VydmljZT8uY29ubmVjdCkge1xuICAgNTAwXHQgICAgICAgICAgc29ja2V0U2VydmljZS5jb25uZWN0KGdhbWVJZCwgcGxheWVySWQsIGF1dGhUb2tlbik7XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAxNjY0XG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFCb3BoVFhlQmpxemdzNXNXUkxRUExqIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMiIsImZvbGRlclJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0wM1QwMzowNjowOS44NDRaIiwicmVzcG9uc2VfdGV4dCI6IiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI5NWZkNmY3OC00ZmJmLTRkYWUtYTFjNC1lMGE1YjEwZTk0ZDAiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDEyUnZaWW04TEs3MnhGVkFEWHVmZDJRIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJ2aWV3XCIsIFwicGF0aFwiOiBcImtla29wb2x5LWZyb250ZW5kL3NyYy9jb21wb25lbnRzL2dhbWUvR2FtZUJvYXJkLmpzeFwiLCBcInZpZXdfcmFuZ2VcIjogWzgwMCwgOTAwXX0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiIifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIGtla29wb2x5LWZyb250ZW5kL3NyYy9jb21wb25lbnRzL2dhbWUvR2FtZUJvYXJkLmpzeDpcbiAgIDcwMFx0ICAgICAgfVxuICAgNzAxXHRcbiAgIDcwMlx0ICAgICAgY29uc3Qgc3BhY2UgPSBnZXRTcGFjZURhdGFCeVBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgIDcwM1x0ICAgICAgcmV0dXJuIHNwYWNlPy5uYW1lIHx8IGBTcGFjZSAke3Bvc2l0aW9ufWA7XG4gICA3MDRcdCAgICB9IGNhdGNoIChlcnJvcikge1xuICAgNzA1XHQgICAgICByZXR1cm4gJ1Vua25vd24nO1xuICAgNzA2XHQgICAgfVxuICAgNzA3XHQgIH07XG4gICA3MDhcdFxuICAgNzA5XHQgIC8vIEdldCB2aWV3cG9ydCBzaXplIGZvciByZXNwb25zaXZlIGFkanVzdG1lbnRzXG4gICA3MTBcdCAgY29uc3QgaXNNb2JpbGUgPSB1c2VCcmVha3BvaW50VmFsdWUoeyBiYXNlOiB0cnVlLCBtZDogZmFsc2UgfSk7XG4gICA3MTFcdFxuICAgNzEyXHQgIC8vIEZ1bmN0aW9uIHRvIGFuaW1hdGUgcGxheWVyIG1vdmVtZW50IHN0ZXAgYnkgc3RlcFxuICAgNzEzXHQgIGNvbnN0IGFuaW1hdGVQbGF5ZXJNb3ZlbWVudCA9IChwbGF5ZXJJZCwgc3RhcnRQb3NpdGlvbiwgc3RlcHMsIGRpcmVjdFBvc2l0aW9uID0gbnVsbCkgPT4ge1xuICAgNzE0XHQgICAgLy8gRGVmYXVsdCB0byBwb3NpdGlvbiAxIChTVEFSVCkgaWYgc3RhcnRQb3NpdGlvbiBpcyB1bmRlZmluZWRcbiAgIDcxNVx0ICAgIGNvbnN0IGN1cnJlbnRQb3NpdGlvbiA9IHN0YXJ0UG9zaXRpb24gfHwgMTtcbiAgIDcxNlx0XG4gICA3MTdcdCAgICAvLyBDbGVhciBhbnkgZXhpc3RpbmcgYW5pbWF0aW9uXG4gICA3MThcdCAgICBzZXRBbmltYXRpb25TdGVwKDApO1xuICAgNzE5XHRcbiAgIDcyMFx0ICAgIC8vIENhbGN1bGF0ZSBhbGwgcG9zaXRpb25zIHRoZSBwbGF5ZXIgd2lsbCBtb3ZlIHRocm91Z2hcbiAgIDcyMVx0ICAgIGNvbnN0IHBhdGggPSBbXTtcbiAgIDcyMlx0XG4gICA3MjNcdCAgICBpZiAoZGlyZWN0UG9zaXRpb24gIT09IG51bGwpIHtcbiAgIDcyNFx0ICAgICAgLy8gRGlyZWN0IG1vdmVtZW50IHRvIGEgc3BlY2lmaWMgcG9zaXRpb24gKGUuZy4sIGdvaW5nIHRvIGphaWwpXG4gICA3MjVcdCAgICAgIHBhdGgucHVzaChkaXJlY3RQb3NpdGlvbik7XG4gICA3MjZcdCAgICB9IGVsc2Uge1xuICAgNzI3XHQgICAgICAvLyBXZSBuZWVkIHRvIGhhbmRsZSB0aGUgYm9hcmQgbGF5b3V0IGNvcnJlY3RseVxuICAgNzI4XHQgICAgICAvLyBUaGUgYm9hcmQgcG9zaXRpb25zIGFyZSBmcm9tIDAgdG8gMjUgd2l0aCBwb3NpdGlvbiAxIGJlaW5nIFNUQVJUXG4gICA3MjlcdCAgICAgIGxldCBjdXJyZW50UG9zID0gcGFyc2VJbnQoY3VycmVudFBvc2l0aW9uKTtcbiAgIDczMFx0XG4gICA3MzFcdCAgICAgIC8vIEdlbmVyYXRlIHRoZSBwYXRoIG9mIHBvc2l0aW9uc1xuICAgNzMyXHQgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBzdGVwczsgaSsrKSB7XG4gICA3MzNcdCAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgIDczNFx0ICAgICAgICAgIC8vIEFkZCBjdXJyZW50IHBvc2l0aW9uIGFzIGZpcnN0IHN0ZXBcbiAgIDczNVx0ICAgICAgICAgIHBhdGgucHVzaChjdXJyZW50UG9zKTtcbiAgIDczNlx0ICAgICAgICAgIGNvbnRpbnVlO1xuICAgNzM3XHQgICAgICAgIH1cbiAgIDczOFx0XG4gICA3MzlcdCAgICAgICAgLy8gTW92ZSB0byBuZXh0IHBvc2l0aW9uXG4gICA3NDBcdCAgICAgICAgY3VycmVudFBvcyArPSAxO1xuICAgNzQxXHRcbiAgIDc0Mlx0ICAgICAgICAvLyBJZiB3ZSBnbyBiZXlvbmQgcG9zaXRpb24gMjUsIHdyYXAgYmFjayB0byBwb3NpdGlvbiAxXG4gICA3NDNcdCAgICAgICAgaWYgKGN1cnJlbnRQb3MgPiAyNSkge1xuICAgNzQ0XHQgICAgICAgICAgY3VycmVudFBvcyA9IDE7XG4gICA3NDVcdCAgICAgICAgfVxuICAgNzQ2XHRcbiAgIDc0N1x0ICAgICAgICAvLyBBZGQgdGhpcyBwb3NpdGlvbiB0byB0aGUgcGF0aFxuICAgNzQ4XHQgICAgICAgIHBhdGgucHVzaChjdXJyZW50UG9zKTtcbiAgIDc0OVx0ICAgICAgfVxuICAgNzUwXHQgICAgfVxuICAgNzUxXHRcbiAgIDc1Mlx0ICAgIC8vIFNldCB0aGUgYW5pbWF0aW9uIGRhdGFcbiAgIDc1M1x0ICAgIHNldEFuaW1hdGluZ1BsYXllcihwbGF5ZXJJZCk7XG4gICA3NTRcdCAgICBzZXRBbmltYXRpb25QYXRoKHBhdGgpO1xuICAgNzU1XHRcbiAgIDc1Nlx0ICAgIC8vIFN0YXJ0IHRoZSBhbmltYXRpb25cbiAgIDc1N1x0ICAgIGNvbnN0IGFuaW1hdGVTdGVwID0gKHN0ZXApID0+IHtcbiAgIDc1OFx0ICAgICAgaWYgKHN0ZXAgPj0gcGF0aC5sZW5ndGgpIHtcbiAgIDc1OVx0ICAgICAgICAvLyBBbmltYXRpb24gY29tcGxldGVcbiAgIDc2MFx0ICAgICAgICBzZXRBbmltYXRpbmdQbGF5ZXIobnVsbCk7XG4gICA3NjFcdCAgICAgICAgc2V0QW5pbWF0aW9uUGF0aChbXSk7XG4gICA3NjJcdFxuICAgNzYzXHQgICAgICAgIC8vIFVwZGF0ZSB0aGUgcGxheWVyIHBvc2l0aW9uIGluIFJlZHV4IGFmdGVyIGFuaW1hdGlvbiBjb21wbGV0ZXNcbiAgIDc2NFx0ICAgICAgICBkaXNwYXRjaChtb3ZlUGxheWVyKHtcbiAgIDc2NVx0ICAgICAgICAgIHBsYXllcklkOiBwbGF5ZXJJZCxcbiAgIDc2Nlx0ICAgICAgICAgIG5ld1Bvc2l0aW9uOiBwYXRoW3BhdGgubGVuZ3RoIC0gMV1cbiAgIDc2N1x0ICAgICAgICB9KSk7XG4gICA3NjhcdCAgICAgICAgcmV0dXJuO1xuICAgNzY5XHQgICAgICB9XG4gICA3NzBcdFxuICAgNzcxXHQgICAgICAvLyBVcGRhdGUgdGhlIHBsYXllcidzIHRlbXBvcmFyeSBwb3NpdGlvbiBmb3IgYW5pbWF0aW9uXG4gICA3NzJcdCAgICAgIHNldEFuaW1hdGlvblN0ZXAoc3RlcCk7XG4gICA3NzNcdFxuICAgNzc0XHQgICAgICAvLyBNb3ZlIHRvIG5leHQgc3RlcCBhZnRlciBkZWxheVxuICAgNzc1XHQgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgIDc3Nlx0ICAgICAgICBhbmltYXRlU3RlcChzdGVwICsgMSk7XG4gICA3NzdcdCAgICAgIH0sIDMwMCk7IC8vIDMwMG1zIGRlbGF5IGJldHdlZW4gc3RlcHNcbiAgIDc3OFx0ICAgIH07XG4gICA3NzlcdFxuICAgNzgwXHQgICAgLy8gU3RhcnQgYW5pbWF0aW9uIHdpdGggc3RlcCAwXG4gICA3ODFcdCAgICBhbmltYXRlU3RlcCgwKTtcbiAgIDc4Mlx0ICB9O1xuICAgNzgzXHRcbiAgIDc4NFx0ICAvLyBIYW5kbGUgdGhlIFJvbGwgRGljZSBidXR0b24gY2xpY2tcbiAgIDc4NVx0ICBjb25zdCBoYW5kbGVSb2xsRGljZSA9ICgpID0+IHtcbiAgIDc4Nlx0ICAgIHRyeSB7XG4gICA3ODdcdCAgICAgIC8vIEZpcnN0IGNoZWNrIGlmIGl0J3MgdGhlIGxvY2FsIHBsYXllcidzIHR1cm5cbiAgIDc4OFx0ICAgICAgaWYgKCFzb2NrZXRTZXJ2aWNlLmlzTG9jYWxQbGF5ZXJUdXJuKCkpIHtcbiAgIDc4OVx0ICAgICAgICB0b2FzdCh7XG4gICA3OTBcdCAgICAgICAgICB0aXRsZTogXCJOb3QgeW91ciB0dXJuXCIsXG4gICA3OTFcdCAgICAgICAgICBkZXNjcmlwdGlvbjogYEl0J3MgJHtwbGF5ZXJzLmZpbmQocCA9PiBwLmlkID09PSBjdXJyZW50UGxheWVyKT8ubmFtZSB8fCBcImFub3RoZXIgcGxheWVyXCJ9J3MgdHVybmAsXG4gICA3OTJcdCAgICAgICAgICBzdGF0dXM6IFwid2FybmluZ1wiLFxuICAgNzkzXHQgICAgICAgICAgZHVyYXRpb246IDMwMDAsXG4gICA3OTRcdCAgICAgICAgICBpc0Nsb3NhYmxlOiB0cnVlLFxuICAgNzk1XHQgICAgICAgIH0pO1xuICAgNzk2XHQgICAgICAgIGRpc3BhdGNoKHNldElzUm9sbGluZyhmYWxzZSkpO1xuICAgNzk3XHQgICAgICAgIHJldHVybjtcbiAgIDc5OFx0ICAgICAgfVxuICAgNzk5XHRcbiAgIDgwMFx0ICAgICAgLy8gQ2hlY2sgaWYgcGxheWVyIGlzIGluIGphaWxcblRvdGFsIGxpbmVzIGluIGZpbGU6IDE2NjRcbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUtqZnlvM05idDVueTY1MU1ma2Z5ekEifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIiwiZm9sZGVyUm9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTAzVDAzOjA2OjE0LjMwM1oiLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImJkYzljYjE1LTkwNTQtNDQ2OC05OTdiLThmYWYxZTcxOTY4ZSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUdncWJhVFJGYUR2cThYdER2OWhHQXMiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInZpZXdcIiwgXCJwYXRoXCI6IFwia2Vrb3BvbHktZnJvbnRlbmQvc3JjL3NlcnZpY2VzL3NvY2tldFNlcnZpY2UuanNcIiwgXCJ2aWV3X3JhbmdlXCI6IFsxLCA1MF19IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTGV0J3MgYWxzbyBsb29rIGF0IHRoZSBzb2NrZXRTZXJ2aWNlIGltcGxlbWVudGF0aW9uIHRvIHVuZGVyc3RhbmQgaG93IGl0IGhhbmRsZXMgdGhlIGRpY2Ugcm9sbGluZzpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24ga2Vrb3BvbHktZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvZ2FtZS9HYW1lQm9hcmQuanN4OlxuICAgODAwXHQgICAgICAvLyBDaGVjayBpZiBwbGF5ZXIgaXMgaW4gamFpbFxuICAgODAxXHQgICAgICBpZiAoY3VycmVudFBsYXllckRhdGE/LmluSmFpbCkge1xuICAgODAyXHQgICAgICAgIHRvYXN0KHtcbiAgIDgwM1x0ICAgICAgICAgIHRpdGxlOiBcIllvdSdyZSBpbiBqYWlsIVwiLFxuICAgODA0XHQgICAgICAgICAgZGVzY3JpcHRpb246IGBZb3UgbmVlZCB0byByb2xsIGRvdWJsZXMgb3Igd2FpdCAke2N1cnJlbnRQbGF5ZXJEYXRhLmphaWxUdXJuc30gbW9yZSB0dXJucy5gLFxuICAgODA1XHQgICAgICAgICAgc3RhdHVzOiBcIndhcm5pbmdcIixcbiAgIDgwNlx0ICAgICAgICAgIGR1cmF0aW9uOiAzMDAwLFxuICAgODA3XHQgICAgICAgICAgaXNDbG9zYWJsZTogdHJ1ZSxcbiAgIDgwOFx0ICAgICAgICB9KTtcbiAgIDgwOVx0ICAgICAgICBkaXNwYXRjaChzZXRJc1JvbGxpbmcoZmFsc2UpKTtcbiAgIDgxMFx0ICAgICAgICByZXR1cm47XG4gICA4MTFcdCAgICAgIH1cbiAgIDgxMlx0XG4gICA4MTNcdCAgICAgIC8vIFNldCByb2xsaW5nIHN0YXRlIHRvIHRydWVcbiAgIDgxNFx0ICAgICAgZGlzcGF0Y2goc2V0SXNSb2xsaW5nKHRydWUpKTtcbiAgIDgxNVx0XG4gICA4MTZcdCAgICAgIC8vIENoZWNrIGlmIFdlYlNvY2tldCBpcyBjb25uZWN0ZWQgYmVmb3JlIHRyeWluZyB0byByb2xsIGRpY2VcbiAgIDgxN1x0ICAgICAgaWYgKHNvY2tldFNlcnZpY2Uuc29ja2V0ICYmIHNvY2tldFNlcnZpY2Uuc29ja2V0LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOKSB7XG4gICA4MThcdCAgICAgICAgY29uc29sZS5sb2coJ1tESUNFXSBTZW5kaW5nIHJvbGxfZGljZSByZXF1ZXN0IHRvIHNlcnZlcicpO1xuICAgODE5XHQgICAgICAgIC8vIENhbGwgdGhlIHNvY2tldCBzZXJ2aWNlIHRvIHJvbGwgZGljZVxuICAgODIwXHQgICAgICAgIHNvY2tldFNlcnZpY2Uucm9sbERpY2UoKTtcbiAgIDgyMVx0XG4gICA4MjJcdCAgICAgICAgLy8gU2V0IHVwIGEgdGltZW91dCB0byBoYW5kbGUgcG90ZW50aWFsIFdlYlNvY2tldCBmYWlsdXJlc1xuICAgODIzXHQgICAgICAgIGNvbnN0IHdzVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgODI0XHQgICAgICAgICAgaWYgKGlzUm9sbGluZykge1xuICAgODI1XHQgICAgICAgICAgICBjb25zb2xlLmxvZygnW0RJQ0VdIFdlYlNvY2tldCB0aW1lb3V0LCBmYWxsaW5nIGJhY2sgdG8gbG9jYWwgZGljZSByb2xsJyk7XG4gICA4MjZcdCAgICAgICAgICAgIGhhbmRsZUxvY2FsRGljZVJvbGwoKTtcbiAgIDgyN1x0ICAgICAgICAgICAgZGlzcGF0Y2goc2V0SXNSb2xsaW5nKGZhbHNlKSk7XG4gICA4MjhcdCAgICAgICAgICB9XG4gICA4MjlcdCAgICAgICAgfSwgMzAwMCk7XG4gICA4MzBcdFxuICAgODMxXHQgICAgICAgIC8vIENsZWFuIHVwIHRpbWVvdXQgd2hlbiBjb21wb25lbnQgdW5tb3VudHMgb3Igcm9sbCBjb21wbGV0ZXNcbiAgIDgzMlx0ICAgICAgICByZXR1cm4gKCkgPT4gY2xlYXJUaW1lb3V0KHdzVGltZW91dCk7XG4gICA4MzNcdCAgICAgIH0gZWxzZSB7XG4gICA4MzRcdCAgICAgICAgY29uc29sZS5sb2coJ1tESUNFXSBXZWJTb2NrZXQgbm90IGNvbm5lY3RlZCwgdXNpbmcgbG9jYWwgZGljZSByb2xsJyk7XG4gICA4MzVcdCAgICAgICAgaGFuZGxlTG9jYWxEaWNlUm9sbCgpO1xuICAgODM2XHQgICAgICAgIGRpc3BhdGNoKHNldElzUm9sbGluZyhmYWxzZSkpO1xuICAgODM3XHQgICAgICB9XG4gICA4MzhcdCAgICB9IGNhdGNoIChlcnJvcikge1xuICAgODM5XHQgICAgICBjb25zb2xlLmVycm9yKCdbRElDRV0gRXJyb3Igcm9sbGluZyBkaWNlOicsIGVycm9yKTtcbiAgIDg0MFx0ICAgICAgZGlzcGF0Y2goc2V0SXNSb2xsaW5nKGZhbHNlKSk7XG4gICA4NDFcdFxuICAgODQyXHQgICAgICB0b2FzdCh7XG4gICA4NDNcdCAgICAgICAgdGl0bGU6IFwiRXJyb3Igcm9sbGluZyBkaWNlXCIsXG4gICA4NDRcdCAgICAgICAgZGVzY3JpcHRpb246IGVycm9yLm1lc3NhZ2UgfHwgXCJUaGVyZSB3YXMgYSBwcm9ibGVtIHdpdGggdGhlIGdhbWUgc2VydmVyXCIsXG4gICA4NDVcdCAgICAgICAgc3RhdHVzOiBcImVycm9yXCIsXG4gICA4NDZcdCAgICAgICAgZHVyYXRpb246IDMwMDAsXG4gICA4NDdcdCAgICAgICAgaXNDbG9zYWJsZTogdHJ1ZSxcbiAgIDg0OFx0ICAgICAgfSk7XG4gICA4NDlcdCAgICB9XG4gICA4NTBcdCAgfTtcbiAgIDg1MVx0XG4gICA4NTJcdCAgLy8gSGFuZGxlIGxvY2FsIGRpY2Ugcm9sbCB3aGVuIFdlYlNvY2tldCBpcyBub3QgYXZhaWxhYmxlXG4gICA4NTNcdCAgY29uc3QgaGFuZGxlTG9jYWxEaWNlUm9sbCA9ICgpID0+IHtcbiAgIDg1NFx0ICAgIC8vIEdlbmVyYXRlIHJhbmRvbSBkaWNlIHZhbHVlcyAoMS02KVxuICAgODU1XHQgICAgY29uc3QgZGllMSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDYpICsgMTtcbiAgIDg1Nlx0ICAgIGNvbnN0IGRpZTIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA2KSArIDE7XG4gICA4NTdcdCAgICBjb25zdCBkaWNlVG90YWwgPSBkaWUxICsgZGllMjtcbiAgIDg1OFx0ICAgIGNvbnN0IGlzRG91YmxlcyA9IGRpZTEgPT09IGRpZTI7XG4gICA4NTlcdFxuICAgODYwXHQgICAgLy8gQ2FsY3VsYXRlIG5ldyBwb3NpdGlvblxuICAgODYxXHQgICAgaWYgKGN1cnJlbnRQbGF5ZXJEYXRhKSB7XG4gICA4NjJcdCAgICAgIC8vIEdldCBjdXJyZW50IHBvc2l0aW9uIChkZWZhdWx0IHRvIFNUQVJUL3Bvc2l0aW9uIDEgaWYgdW5kZWZpbmVkKVxuICAgODYzXHQgICAgICBjb25zdCBjdXJyZW50UG9zaXRpb24gPSBjdXJyZW50UGxheWVyRGF0YS5wb3NpdGlvbiB8fCAxO1xuICAgODY0XHRcbiAgIDg2NVx0ICAgICAgLy8gVXBkYXRlIHRoZSBkaWNlIHJvbGwgaW4gUmVkdXhcbiAgIDg2Nlx0ICAgICAgZGlzcGF0Y2godXBkYXRlRGljZVJvbGwoe1xuICAgODY3XHQgICAgICAgIGRpY2U6IFtkaWUxLCBkaWUyXSxcbiAgIDg2OFx0ICAgICAgICBpc0RvdWJsZXMsXG4gICA4NjlcdCAgICAgICAgcGxheWVySWQ6IGN1cnJlbnRQbGF5ZXJEYXRhLmlkXG4gICA4NzBcdCAgICAgIH0pKTtcbiAgIDg3MVx0XG4gICA4NzJcdCAgICAgIC8vIFNob3cgbm90aWZpY2F0aW9uIGZvciBkb3VibGVzXG4gICA4NzNcdCAgICAgIGlmIChpc0RvdWJsZXMpIHtcbiAgIDg3NFx0ICAgICAgICBjb25zdCBkb3VibGVzQ291bnQgPSBjb25zZWN1dGl2ZURvdWJsZXMgKyAxO1xuICAgODc1XHQgICAgICAgIHRvYXN0KHtcbiAgIDg3Nlx0ICAgICAgICAgIHRpdGxlOiBcIkRPVUJMRVMhXCIsXG4gICA4NzdcdCAgICAgICAgICBkZXNjcmlwdGlvbjogYFlvdSByb2xsZWQgZG91YmxlcyAke2RvdWJsZXNDb3VudH0gdGltZSR7ZG91Ymxlc0NvdW50ID4gMSA/ICdzJyA6ICcnfSBpbiBhIHJvdyEgJHtkb3VibGVzQ291bnQgPT09IDIgPyAnT25lIG1vcmUgYW5kIHlvdSBnbyB0byBqYWlsIScgOiAnJ31gLFxuICAgODc4XHQgICAgICAgICAgc3RhdHVzOiBkb3VibGVzQ291bnQgPCAzID8gXCJzdWNjZXNzXCIgOiBcIndhcm5pbmdcIixcbiAgIDg3OVx0ICAgICAgICAgIGR1cmF0aW9uOiA0MDAwLFxuICAgODgwXHQgICAgICAgICAgaXNDbG9zYWJsZTogdHJ1ZSxcbiAgIDg4MVx0ICAgICAgICAgIHBvc2l0aW9uOiBcInRvcFwiXG4gICA4ODJcdCAgICAgICAgfSk7XG4gICA4ODNcdFxuICAgODg0XHQgICAgICAgIC8vIENoZWNrIGlmIHBsYXllciBnb2VzIHRvIGphaWwgKDNyZCBjb25zZWN1dGl2ZSBkb3VibGVzKVxuICAgODg1XHQgICAgICAgIGlmIChkb3VibGVzQ291bnQgPj0gMykge1xuICAgODg2XHQgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICA4ODdcdCAgICAgICAgICAgIGFuaW1hdGVQbGF5ZXJNb3ZlbWVudChjdXJyZW50UGxheWVyRGF0YS5pZCwgY3VycmVudFBvc2l0aW9uLCAwLCAxMSk7XG4gICA4ODhcdCAgICAgICAgICAgIGRpc3BhdGNoKHNldElzUm9sbGluZyhmYWxzZSkpO1xuICAgODg5XHQgICAgICAgICAgfSwgMTUwMCk7XG4gICA4OTBcdFxuICAgODkxXHQgICAgICAgICAgcmV0dXJuOyAvLyBTa2lwIG5vcm1hbCBtb3ZlbWVudFxuICAgODkyXHQgICAgICAgIH1cbiAgIDg5M1x0ICAgICAgfVxuICAgODk0XHRcbiAgIDg5NVx0ICAgICAgLy8gSWYgcGxheWVyIGlzIGluIGphaWwsIGhhbmRsZSBqYWlsIGxvZ2ljXG4gICA4OTZcdCAgICAgIGlmIChjdXJyZW50UGxheWVyRGF0YS5pbkphaWwpIHtcbiAgIDg5N1x0ICAgICAgICBpZiAoaXNEb3VibGVzKSB7XG4gICA4OThcdCAgICAgICAgICAvLyBQbGF5ZXIgcm9sbHMgZG91YmxlcywgZ2V0cyBvdXQgb2YgamFpbFxuICAgODk5XHQgICAgICAgICAgdG9hc3Qoe1xuICAgOTAwXHQgICAgICAgICAgICB0aXRsZTogXCJZb3UncmUgZnJlZSFcIixcblRvdGFsIGxpbmVzIGluIGZpbGU6IDE2NjRcbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTJSdlpZbThMSzcyeEZWQURYdWZkMlEifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIiwiZm9sZGVyUm9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTAzVDAzOjA2OjE4LjQwN1oiLCJyZXNwb25zZV90ZXh0IjoiTGV0J3MgYWxzbyBsb29rIGF0IHRoZSBzb2NrZXRTZXJ2aWNlIGltcGxlbWVudGF0aW9uIHRvIHVuZGVyc3RhbmQgaG93IGl0IGhhbmRsZXMgdGhlIGRpY2Ugcm9sbGluZzpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIxYzc1YzgyNi0wMDEyLTQwMjItYWRiMy01YTllZjNmODU5ZjAiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFGQVJqYTVOdEI0M1ZoQUI5aUdlSzg4IiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJ2aWV3XCIsIFwicGF0aFwiOiBcImtla29wb2x5LWZyb250ZW5kL3NyYy9zZXJ2aWNlcy9zb2NrZXRTZXJ2aWNlLmpzXCIsIFwidmlld19yYW5nZVwiOiBbMTAwMCwgMTEwMF19IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBrZWtvcG9seS1mcm9udGVuZC9zcmMvc2VydmljZXMvc29ja2V0U2VydmljZS5qczpcbiAgICAgMVx0aW1wb3J0IHsgc3RvcmUgfSBmcm9tICcuLi9zdG9yZS9zdG9yZSc7XG4gICAgIDJcdGltcG9ydCB7XG4gICAgIDNcdCAgc2V0SG9zdCxcbiAgICAgNFx0ICBzZXRNYXhQbGF5ZXJzLFxuICAgICA1XHQgIHNldEdhbWVJbmZvLFxuICAgICA2XHQgIHNldEdhbWVTdGFydGVkLFxuICAgICA3XHQgIHNldEdhbWVQaGFzZSxcbiAgICAgOFx0ICBzeW5jR2FtZVN0YXR1cyxcbiAgICAgOVx0ICAvLyBBZGQgdGhlc2UgYWN0aW9ucyBmcm9tIHRoZSBtYWluIGdhbWVTbGljZVxuICAgIDEwXHQgIGFkZEdhbWVNZXNzYWdlLFxuICAgIDExXHQgIHNldFJvb21Db2RlLFxuICAgIDEyXHQgIHNldEN1cnJlbnRQbGF5ZXIsXG4gICAgMTNcdCAgc2V0SXNSb2xsaW5nLFxuICAgIDE0XHQgIHVwZGF0ZURpY2VSb2xsLFxuICAgIDE1XHQgIG1vdmVQbGF5ZXJcbiAgICAxNlx0fSBmcm9tICcuLi9zdG9yZS9nYW1lU2xpY2UnO1xuICAgIDE3XHRpbXBvcnQge1xuICAgIDE4XHQgIGFkZFBsYXllcixcbiAgICAxOVx0ICB1cGRhdGVQbGF5ZXIsXG4gICAgMjBcdCAgdXBkYXRlUGxheWVyUG9zaXRpb24sXG4gICAgMjFcdCAgdXBkYXRlUGxheWVyQmFsYW5jZSxcbiAgICAyMlx0ICBhZGRQbGF5ZXJDYXJkLFxuICAgIDIzXHQgIHJlbW92ZVBsYXllckNhcmQsXG4gICAgMjRcdCAgYWRkUGxheWVyUHJvcGVydHksXG4gICAgMjVcdCAgcmVtb3ZlUGxheWVyUHJvcGVydHksXG4gICAgMjZcdCAgcmVtb3ZlUGxheWVyLFxuICAgIDI3XHQgIHNldFBsYXllclJlYWR5XG4gICAgMjhcdH0gZnJvbSAnLi4vc3RvcmUvcGxheWVyU2xpY2UnO1xuICAgIDI5XHRpbXBvcnQge1xuICAgIDMwXHQgIHNldFNlbGVjdGVkUHJvcGVydHksXG4gICAgMzFcdCAgdXBkYXRlUHJvcGVydHlEZXRhaWxzLFxuICAgIDMyXHR9IGZyb20gJy4uL3N0b3JlL3Byb3BlcnR5U2xpY2UnO1xuICAgIDMzXHRpbXBvcnQge1xuICAgIDM0XHQgIHNldEN1cnJlbnRDYXJkLFxuICAgIDM1XHQgIHNodWZmbGVDYXJkcyxcbiAgICAzNlx0fSBmcm9tICcuLi9zdG9yZS9jYXJkU2xpY2UnO1xuICAgIDM3XHRcbiAgICAzOFx0Ly8gV2UnbGwgdXNlIGlubGluZSBXZWJTb2NrZXQgVVJMIGNvbnN0cnVjdGlvbiBpbnN0ZWFkIG9mIGEgY29uc3RhbnRcbiAgICAzOVx0Ly8gdG8gYXZvaWQgcHJvY2Vzcy5lbnYgaXNzdWVzXG4gICAgNDBcdFxuICAgIDQxXHRjbGFzcyBTb2NrZXRTZXJ2aWNlIHtcbiAgICA0Mlx0ICBzb2NrZXQgPSBudWxsO1xuICAgIDQzXHQgIGxvYmJ5U29ja2V0ID0gbnVsbDtcbiAgICA0NFx0ICBnYW1lSWQgPSBudWxsO1xuICAgIDQ1XHQgIHBsYXllcklkID0gbnVsbDtcbiAgICA0Nlx0ICBzZXNzaW9uSWQgPSBudWxsO1xuICAgIDQ3XHQgIHJlY29ubmVjdEF0dGVtcHRzID0gMDtcbiAgICA0OFx0ICBtYXhSZWNvbm5lY3RBdHRlbXB0cyA9IDU7XG4gICAgNDlcdCAgcmVjb25uZWN0SW50ZXJ2YWwgPSAxMDAwO1xuICAgIDUwXHQgIHJlY29ubmVjdFRpbWVyID0gbnVsbDtcblRvdGFsIGxpbmVzIGluIGZpbGU6IDI2ODJcbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUdncWJhVFJGYUR2cThYdER2OWhHQXMifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIiwiZm9sZGVyUm9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTAzVDAzOjA2OjIyLjU2OFoiLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjI1MjE5YzdlLTA0ODYtNDczNC1iNmI4LTcyMTM3NGYzY2FjZSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVFramZVTEZHdzJtaWYxNkg0V0xhUUEiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInZpZXdcIiwgXCJwYXRoXCI6IFwia2Vrb3BvbHktZnJvbnRlbmQvc3JjL3NlcnZpY2VzL3NvY2tldFNlcnZpY2UuanNcIiwgXCJ2aWV3X3JhbmdlXCI6IFsxNTAwLCAxNjAwXX0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiIifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIGtla29wb2x5LWZyb250ZW5kL3NyYy9zZXJ2aWNlcy9zb2NrZXRTZXJ2aWNlLmpzOlxuICAxMDAwXHRcbiAgMTAwMVx0ICAvLyBIZWxwZXIgbWV0aG9kIHRvIGRldGVybWluZSBpZiB3ZSBuZWVkIHRvIHJlcXVlc3QgYWRkaXRpb25hbCBkYXRhXG4gIDEwMDJcdCAgc2hvdWxkUmVxdWVzdEFkZGl0aW9uYWxEYXRhID0gKGdhbWVTdGF0ZSkgPT4ge1xuICAxMDAzXHQgICAgLy8gQ2hlY2sgZm9yIG1pc3NpbmcgY3JpdGljYWwgZGF0YVxuICAxMDA0XHQgICAgY29uc3QgbWlzc2luZ1BsYXllcnMgPSAhZ2FtZVN0YXRlLnBsYXllcnMgfHwgZ2FtZVN0YXRlLnBsYXllcnMubGVuZ3RoID09PSAwO1xuICAxMDA1XHQgICAgY29uc3QgbWlzc2luZ0JvYXJkU3RhdGUgPSAhZ2FtZVN0YXRlLmJvYXJkU3RhdGU7XG4gIDEwMDZcdCAgICBjb25zdCBtaXNzaW5nR2FtZUluZm8gPSAhZ2FtZVN0YXRlLmdhbWVJbmZvO1xuICAxMDA3XHRcbiAgMTAwOFx0ICAgIC8vIENoZWNrIGlmIHdlJ3JlIGluIGFuIGFjdGl2ZSBnYW1lIGJ1dCBtaXNzaW5nIGRhdGFcbiAgMTAwOVx0ICAgIGNvbnN0IGlzQWN0aXZlR2FtZSA9IGdhbWVTdGF0ZS5zdGF0dXMgPT09ICdBQ1RJVkUnIHx8XG4gIDEwMTBcdCAgICAgICAgICAgICAgICAgICAgICAgIChnYW1lU3RhdGUuZ2FtZUluZm8gJiYgZ2FtZVN0YXRlLmdhbWVJbmZvLnN0YXR1cyA9PT0gJ0FDVElWRScpO1xuICAxMDExXHRcbiAgMTAxMlx0ICAgIGlmIChpc0FjdGl2ZUdhbWUgJiYgKG1pc3NpbmdQbGF5ZXJzIHx8IG1pc3NpbmdCb2FyZFN0YXRlKSkge1xuICAxMDEzXHQgICAgICBjb25zb2xlLmxvZygnW0hBTkRMRV9HQU1FX1NUQVRFXSBBY3RpdmUgZ2FtZSBtaXNzaW5nIGNyaXRpY2FsIGRhdGEsIHdpbGwgcmVxdWVzdCBhZGRpdGlvbmFsIGRhdGEnKTtcbiAgMTAxNFx0ICAgICAgcmV0dXJuIHRydWU7XG4gIDEwMTVcdCAgICB9XG4gIDEwMTZcdFxuICAxMDE3XHQgICAgLy8gQ2hlY2sgaWYgd2UncmUgbWlzc2luZyBob3N0IGluZm9ybWF0aW9uXG4gIDEwMThcdCAgICBjb25zdCBtaXNzaW5nSG9zdElkID0gIWdhbWVTdGF0ZS5nYW1lSW5mbyB8fCAhZ2FtZVN0YXRlLmdhbWVJbmZvLmhvc3RJZDtcbiAgMTAxOVx0ICAgIGlmIChtaXNzaW5nSG9zdElkKSB7XG4gIDEwMjBcdCAgICAgIGNvbnNvbGUubG9nKCdbSEFORExFX0dBTUVfU1RBVEVdIE1pc3NpbmcgaG9zdCBpbmZvcm1hdGlvbiwgd2lsbCByZXF1ZXN0IGFkZGl0aW9uYWwgZGF0YScpO1xuICAxMDIxXHQgICAgICByZXR1cm4gdHJ1ZTtcbiAgMTAyMlx0ICAgIH1cbiAgMTAyM1x0XG4gIDEwMjRcdCAgICByZXR1cm4gZmFsc2U7XG4gIDEwMjVcdCAgfTtcbiAgMTAyNlx0XG4gIDEwMjdcdCAgLy8gUmVxdWVzdCBhZGRpdGlvbmFsIGdhbWUgZGF0YSB3aGVuIG5lZWRlZFxuICAxMDI4XHQgIHJlcXVlc3RBZGRpdGlvbmFsR2FtZURhdGEgPSAoKSA9PiB7XG4gIDEwMjlcdCAgICBjb25zb2xlLmxvZygnW0hBTkRMRV9HQU1FX1NUQVRFXSBSZXF1ZXN0aW5nIGFkZGl0aW9uYWwgZ2FtZSBkYXRhJyk7XG4gIDEwMzBcdFxuICAxMDMxXHQgICAgLy8gT25seSByZXF1ZXN0IGlmIHNvY2tldCBpcyBvcGVuXG4gIDEwMzJcdCAgICBpZiAodGhpcy5zb2NrZXQgJiYgdGhpcy5zb2NrZXQucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pIHtcbiAgMTAzM1x0ICAgICAgLy8gUmVxdWVzdCBmdWxsIGdhbWUgc3RhdGVcbiAgMTAzNFx0ICAgICAgdGhpcy5zZW5kTWVzc2FnZSgnZ2V0X2dhbWVfc3RhdGUnLCB7IGZ1bGw6IHRydWUgfSk7XG4gIDEwMzVcdFxuICAxMDM2XHQgICAgICAvLyBBbHNvIHJlcXVlc3QgYWN0aXZlIHBsYXllcnMgbGlzdFxuICAxMDM3XHQgICAgICB0aGlzLnNlbmRNZXNzYWdlKCdnZXRfYWN0aXZlX3BsYXllcnMnLCB7fSk7XG4gIDEwMzhcdFxuICAxMDM5XHQgICAgICBjb25zb2xlLmxvZygnW0hBTkRMRV9HQU1FX1NUQVRFXSBBZGRpdGlvbmFsIGRhdGEgcmVxdWVzdHMgc2VudCcpO1xuICAxMDQwXHQgICAgfSBlbHNlIHtcbiAgMTA0MVx0ICAgICAgY29uc29sZS53YXJuKCdbSEFORExFX0dBTUVfU1RBVEVdIENhbm5vdCByZXF1ZXN0IGFkZGl0aW9uYWwgZGF0YTogc29ja2V0IG5vdCBvcGVuJyk7XG4gIDEwNDJcdCAgICB9XG4gIDEwNDNcdCAgfTtcbiAgMTA0NFx0XG4gIDEwNDVcdCAgLy8gVXBkYXRlIGFsbCBwbGF5ZXJzJyBob3N0IHN0YXR1cyBiYXNlZCBvbiBob3N0SWRcbiAgMTA0Nlx0ICB1cGRhdGVQbGF5ZXJzSG9zdFN0YXR1cyA9IChob3N0SWQsIHNraXBCcm9hZGNhc3QgPSBmYWxzZSkgPT4ge1xuICAxMDQ3XHQgICAgaWYgKCFob3N0SWQpIHtcbiAgMTA0OFx0ICAgICAgY29uc29sZS53YXJuKCdbVVBEQVRFX0hPU1RfU1RBVFVTXSBObyBob3N0SWQgcHJvdmlkZWQnKTtcbiAgMTA0OVx0ICAgICAgcmV0dXJuO1xuICAxMDUwXHQgICAgfVxuICAxMDUxXHRcbiAgMTA1Mlx0ICAgIGNvbnNvbGUubG9nKCdbVVBEQVRFX0hPU1RfU1RBVFVTXSBVcGRhdGluZyBhbGwgcGxheWVycyBob3N0IHN0YXR1cyBiYXNlZCBvbiBob3N0SWQ6JywgaG9zdElkKTtcbiAgMTA1M1x0XG4gIDEwNTRcdCAgICAvLyBHZXQgY3VycmVudCBwbGF5ZXIgbGlzdCBmcm9tIHRoZSBzdG9yZVxuICAxMDU1XHQgICAgY29uc3QgY3VycmVudFN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgMTA1Nlx0ICAgIGNvbnN0IGV4aXN0aW5nUGxheWVycyA9IGN1cnJlbnRTdGF0ZS5wbGF5ZXJzLnBsYXllcnMgfHwge307XG4gIDEwNTdcdCAgICBjb25zdCB7IGRpc3BhdGNoIH0gPSBzdG9yZTtcbiAgMTA1OFx0XG4gIDEwNTlcdCAgICAvLyBGaXJzdCwgZW5zdXJlIHRoZSBob3N0SWQgaXMgc2V0IGluIHRoZSBnYW1lIHN0YXRlXG4gIDEwNjBcdCAgICBpZiAoY3VycmVudFN0YXRlLmdhbWUuaG9zdElkICE9PSBob3N0SWQpIHtcbiAgMTA2MVx0ICAgICAgY29uc29sZS5sb2coYFtVUERBVEVfSE9TVF9TVEFUVVNdIFVwZGF0aW5nIGdhbWUgc3RhdGUgaG9zdElkOiAke2N1cnJlbnRTdGF0ZS5nYW1lLmhvc3RJZH0g4oaSICR7aG9zdElkfWApO1xuICAxMDYyXHQgICAgICBkaXNwYXRjaChzZXRIb3N0KGhvc3RJZCkpO1xuICAxMDYzXHQgICAgfVxuICAxMDY0XHRcbiAgMTA2NVx0ICAgIC8vIFRyYWNrIGlmIGFueSBwbGF5ZXIncyBob3N0IHN0YXR1cyB3YXMgYWN0dWFsbHkgY2hhbmdlZFxuICAxMDY2XHQgICAgbGV0IGhvc3RTdGF0dXNDaGFuZ2VkID0gZmFsc2U7XG4gIDEwNjdcdFxuICAxMDY4XHQgICAgLy8gVXBkYXRlIGlzSG9zdCBmbGFnIGZvciBhbGwgcGxheWVyc1xuICAxMDY5XHQgICAgT2JqZWN0LmtleXMoZXhpc3RpbmdQbGF5ZXJzKS5mb3JFYWNoKHBsYXllcklkID0+IHtcbiAgMTA3MFx0ICAgICAgY29uc3QgaXNQbGF5ZXJIb3N0ID0gcGxheWVySWQgPT09IGhvc3RJZDtcbiAgMTA3MVx0ICAgICAgY29uc3QgcGxheWVyID0gZXhpc3RpbmdQbGF5ZXJzW3BsYXllcklkXTtcbiAgMTA3Mlx0XG4gIDEwNzNcdCAgICAgIC8vIE9ubHkgdXBkYXRlIGlmIHRoZSBob3N0IHN0YXR1cyBpcyBkaWZmZXJlbnRcbiAgMTA3NFx0ICAgICAgaWYgKHBsYXllci5pc0hvc3QgIT09IGlzUGxheWVySG9zdCkge1xuICAxMDc1XHQgICAgICAgIGNvbnNvbGUubG9nKGBbVVBEQVRFX0hPU1RfU1RBVFVTXSBVcGRhdGluZyBwbGF5ZXIgJHtwbGF5ZXJJZH0gaG9zdCBzdGF0dXM6ICR7cGxheWVyLmlzSG9zdH0g4oaSICR7aXNQbGF5ZXJIb3N0fWApO1xuICAxMDc2XHQgICAgICAgIGhvc3RTdGF0dXNDaGFuZ2VkID0gdHJ1ZTtcbiAgMTA3N1x0XG4gIDEwNzhcdCAgICAgICAgLy8gUHJlc2VydmUgb3RoZXIgaW1wb3J0YW50IHBsYXllciBwcm9wZXJ0aWVzIHdoZW4gdXBkYXRpbmcgaG9zdCBzdGF0dXNcbiAgMTA3OVx0ICAgICAgICBkaXNwYXRjaCh1cGRhdGVQbGF5ZXIoe1xuICAxMDgwXHQgICAgICAgICAgcGxheWVySWQsXG4gIDEwODFcdCAgICAgICAgICB1cGRhdGVzOiB7XG4gIDEwODJcdCAgICAgICAgICAgIGlzSG9zdDogaXNQbGF5ZXJIb3N0LFxuICAxMDgzXHQgICAgICAgICAgICAvLyBFeHBsaWNpdGx5IHByZXNlcnZlIHRoZXNlIHByb3BlcnRpZXMgdG8gcHJldmVudCB0aGVtIGZyb20gYmVpbmcgcmVzZXRcbiAgMTA4NFx0ICAgICAgICAgICAgaXNSZWFkeTogcGxheWVyLmlzUmVhZHksXG4gIDEwODVcdCAgICAgICAgICAgIG5hbWU6IHBsYXllci5uYW1lLFxuICAxMDg2XHQgICAgICAgICAgICB0b2tlbjogcGxheWVyLnRva2VuLFxuICAxMDg3XHQgICAgICAgICAgICBlbW9qaTogcGxheWVyLmVtb2ppLFxuICAxMDg4XHQgICAgICAgICAgICBjb2xvcjogcGxheWVyLmNvbG9yXG4gIDEwODlcdCAgICAgICAgICB9XG4gIDEwOTBcdCAgICAgICAgfSkpO1xuICAxMDkxXHQgICAgICB9XG4gIDEwOTJcdCAgICB9KTtcbiAgMTA5M1x0XG4gIDEwOTRcdCAgICAvLyBPbmx5IHJlcXVlc3QgYWN0aXZlIHBsYXllcnMgbGlzdCBpZiBob3N0IHN0YXR1cyBhY3R1YWxseSBjaGFuZ2VkIGFuZCB3ZSdyZSBub3Qgc2tpcHBpbmcgYnJvYWRjYXN0XG4gIDEwOTVcdCAgICBpZiAoaG9zdFN0YXR1c0NoYW5nZWQgJiYgIXNraXBCcm9hZGNhc3QpIHtcbiAgMTA5Nlx0ICAgICAgLy8gUmVxdWVzdCBhY3RpdmUgcGxheWVycyBsaXN0IGZyb20gc2VydmVyIHRvIGVuc3VyZSBhbGwgY2xpZW50cyBhcmUgaW4gc3luY1xuICAxMDk3XHQgICAgICAvLyBCdXQgYWRkIGEgc21hbGwgZGVsYXkgdG8gcHJldmVudCBtZXNzYWdlIGZsb29kXG4gIDEwOThcdCAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAxMDk5XHQgICAgICAgIGlmICh0aGlzLnNvY2tldCAmJiB0aGlzLnNvY2tldC5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuT1BFTikge1xuICAxMTAwXHQgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZSgnZ2V0X2FjdGl2ZV9wbGF5ZXJzJywge30pO1xuVG90YWwgbGluZXMgaW4gZmlsZTogMjY4MlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxRkFSamE1TnRCNDNWaEFCOWlHZUs4OCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIiLCJmb2xkZXJSb290IjoiL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMiJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMDNUMDM6MDY6MjYuMzA0WiIsInJlc3BvbnNlX3RleHQiOiIiLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiNTcwN2NhZTQtOTQ3MS00MTQ3LTgxNzAtYjQ2NWZkZDllZGNhIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxNGlhWkZrZ1JTeHpCMlJMOGY1S2hKWCIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCJrZWtvcG9seS1mcm9udGVuZC9zcmMvc2VydmljZXMvc29ja2V0U2VydmljZS5qc1wiLCBcInZpZXdfcmFuZ2VcIjogWzIwMDAsIDIxMDBdfSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24ga2Vrb3BvbHktZnJvbnRlbmQvc3JjL3NlcnZpY2VzL3NvY2tldFNlcnZpY2UuanM6XG4gIDE1MDBcdCAgICBjb25zdCBob3N0SWQgPSBjdXJyZW50U3RhdGUuZ2FtZS5ob3N0SWQ7XG4gIDE1MDFcdFxuICAxNTAyXHQgICAgLy8gQWRkIGEgZ2FtZSBtZXNzYWdlIHRvIGluZGljYXRlIHRoZSBnYW1lIGhhcyBzdGFydGVkXG4gIDE1MDNcdCAgICBkaXNwYXRjaChhZGRHYW1lTWVzc2FnZSh7XG4gIDE1MDRcdCAgICAgIHR5cGU6ICdTWVNURU0nLFxuICAxNTA1XHQgICAgICBjb250ZW50OiAnR2FtZSBoYXMgc3RhcnRlZCEgTmF2aWdhdGluZyB0byBnYW1lIGJvYXJkLi4uJyxcbiAgMTUwNlx0ICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpXG4gIDE1MDdcdCAgICB9KSk7XG4gIDE1MDhcdFxuICAxNTA5XHQgICAgY29uc29sZS5sb2coJ1tHQU1FX1NUQVJURURdIFVwZGF0ZWQgZ2FtZVNsaWNlIHN0YXRlIHRvIHBsYXlpbmcgcGhhc2UnKTtcbiAgMTUxMFx0XG4gIDE1MTFcdCAgICAvLyBTZXQgdXAgcmV0cnkgbWVjaGFuaXNtIHRvIGVuc3VyZSBnYW1lIGJvYXJkIGFwcGVhcnNcbiAgMTUxMlx0ICAgIHRoaXMuc2V0dXBHYW1lU3RhcnRSZXRyeUNoZWNrKCk7XG4gIDE1MTNcdFxuICAxNTE0XHQgICAgLy8gRW5zdXJlIHRoZSBob3N0IGdldHMgdGhlIGZpcnN0IHR1cm5cbiAgMTUxNVx0ICAgIGlmIChob3N0SWQpIHtcbiAgMTUxNlx0ICAgICAgY29uc29sZS5sb2coYFtUVVJOX01BTkFHRU1FTlRdIFNldHRpbmcgaW5pdGlhbCB0dXJuIHRvIGhvc3QgcGxheWVyOiAke2hvc3RJZH1gKTtcbiAgMTUxN1x0ICAgICAgZGlzcGF0Y2goc2V0Q3VycmVudFBsYXllcihob3N0SWQpKTtcbiAgMTUxOFx0XG4gIDE1MTlcdCAgICAgIC8vIFNlbmQgYSBtZXNzYWdlIHRvIHRoZSBzZXJ2ZXIgdG8gc2V0IHRoZSBpbml0aWFsIHR1cm5cbiAgMTUyMFx0ICAgICAgaWYgKHRoaXMuc29ja2V0ICYmIHRoaXMuc29ja2V0LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOKSB7XG4gIDE1MjFcdCAgICAgICAgdGhpcy5zZW5kTWVzc2FnZSgnc2V0X2N1cnJlbnRfdHVybicsIHtcbiAgMTUyMlx0ICAgICAgICAgIHBsYXllcklkOiBob3N0SWQsXG4gIDE1MjNcdCAgICAgICAgICBnYW1lSWQ6IHRoaXMuZ2FtZUlkXG4gIDE1MjRcdCAgICAgICAgfSk7XG4gIDE1MjVcdCAgICAgIH1cbiAgMTUyNlx0ICAgIH0gZWxzZSB7XG4gIDE1MjdcdCAgICAgIGNvbnNvbGUud2FybignW1RVUk5fTUFOQUdFTUVOVF0gTm8gaG9zdCBJRCBmb3VuZCB3aGVuIHN0YXJ0aW5nIGdhbWUsIGNhbm5vdCBzZXQgaW5pdGlhbCB0dXJuJyk7XG4gIDE1MjhcdCAgICB9XG4gIDE1MjlcdFxuICAxNTMwXHQgICAgLy8gTG9nIHRoZSBjdXJyZW50IGdhbWUgc3RhdGUgYWZ0ZXIgdXBkYXRlXG4gIDE1MzFcdCAgICBjb25zb2xlLmxvZygnW0dBTUVfU1RBUlRFRF0gR2FtZSBzdGF0ZSBhZnRlciB1cGRhdGU6Jywge1xuICAxNTMyXHQgICAgICBnYW1lU3RhcnRlZDogY3VycmVudFN0YXRlLmdhbWUuZ2FtZVN0YXJ0ZWQsXG4gIDE1MzNcdCAgICAgIGdhbWVQaGFzZTogY3VycmVudFN0YXRlLmdhbWUuZ2FtZVBoYXNlLFxuICAxNTM0XHQgICAgICBob3N0SWQ6IGhvc3RJZCxcbiAgMTUzNVx0ICAgICAgY3VycmVudFBsYXllcjogY3VycmVudFN0YXRlLmdhbWUuY3VycmVudFBsYXllcixcbiAgMTUzNlx0ICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgMTUzN1x0ICAgIH0pO1xuICAxNTM4XHRcbiAgMTUzOVx0ICAgIC8vIFN0b3JlIGluIGxvY2FsU3RvcmFnZSBhcyBhIGJhY2t1cCBtZWNoYW5pc21cbiAgMTU0MFx0ICAgIHRyeSB7XG4gIDE1NDFcdCAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdrZWtvcG9seV9nYW1lX3N0YXJ0ZWQnLCAndHJ1ZScpO1xuICAxNTQyXHQgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgna2Vrb3BvbHlfZ2FtZV9pZCcsIHRoaXMuZ2FtZUlkKTtcbiAgMTU0M1x0ICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2tla29wb2x5X25hdmlnYXRpb25fdGltZXN0YW1wJywgRGF0ZS5ub3coKS50b1N0cmluZygpKTtcbiAgMTU0NFx0ICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2tla29wb2x5X2dhbWVfcGhhc2UnLCAncGxheWluZycpO1xuICAxNTQ1XHQgICAgfSBjYXRjaCAoZSkge1xuICAxNTQ2XHQgICAgICBjb25zb2xlLndhcm4oJ1tHQU1FX1NUQVJURURdIENvdWxkIG5vdCB1c2UgbG9jYWxTdG9yYWdlOicsIGUpO1xuICAxNTQ3XHQgICAgfVxuICAxNTQ4XHRcbiAgMTU0OVx0ICAgIC8vIEJyb2FkY2FzdCB0byBhbGwgY2xpZW50cyB0aGF0IHRoZSBnYW1lIGhhcyBzdGFydGVkXG4gIDE1NTBcdCAgICBpZiAodGhpcy5zb2NrZXQgJiYgdGhpcy5zb2NrZXQucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pIHtcbiAgMTU1MVx0ICAgICAgY29uc29sZS5sb2coJ1tHQU1FX1NUQVJURURdIEJyb2FkY2FzdGluZyBnYW1lIHN0YXJ0ZWQgdG8gYWxsIGNsaWVudHMnKTtcbiAgMTU1Mlx0ICAgICAgdGhpcy5zZW5kTWVzc2FnZSgnYnJvYWRjYXN0X2dhbWVfc3RhcnRlZCcsIHtcbiAgMTU1M1x0ICAgICAgICBnYW1lSWQ6IHRoaXMuZ2FtZUlkLFxuICAxNTU0XHQgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKVxuICAxNTU1XHQgICAgICB9KTtcbiAgMTU1Nlx0ICAgIH1cbiAgMTU1N1x0XG4gIDE1NThcdCAgICAvLyBSZXF1ZXN0IHVwZGF0ZWQgZ2FtZSBzdGF0ZSBhbmQgcGxheWVyIGxpc3RcbiAgMTU1OVx0ICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAxNTYwXHQgICAgICBpZiAodGhpcy5zb2NrZXQgJiYgdGhpcy5zb2NrZXQucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pIHtcbiAgMTU2MVx0ICAgICAgICBjb25zb2xlLmxvZygnW0dBTUVfU1RBUlRFRF0gUmVxdWVzdGluZyB1cGRhdGVkIGdhbWUgc3RhdGUgYW5kIHBsYXllciBsaXN0Jyk7XG4gIDE1NjJcdCAgICAgICAgdGhpcy5zZW5kTWVzc2FnZSgnZ2V0X2dhbWVfc3RhdGUnLCB7fSk7XG4gIDE1NjNcdCAgICAgICAgdGhpcy5zZW5kTWVzc2FnZSgnZ2V0X2FjdGl2ZV9wbGF5ZXJzJywge30pO1xuICAxNTY0XHQgICAgICB9XG4gIDE1NjVcdCAgICB9LCA1MDApO1xuICAxNTY2XHRcbiAgMTU2N1x0ICAgIC8vIEZvcmNlIG5hdmlnYXRpb24gdG8gZ2FtZSBib2FyZCBhZnRlciBhIHNob3J0IGRlbGF5XG4gIDE1NjhcdCAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgMTU2OVx0ICAgICAgY29uc3QgY3VycmVudExvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lO1xuICAxNTcwXHQgICAgICBpZiAoIWN1cnJlbnRMb2NhdGlvbi5pbmNsdWRlcygnL2dhbWUvJykpIHtcbiAgMTU3MVx0ICAgICAgICBjb25zb2xlLmxvZygnW0dBTUVfU1RBUlRFRF0gRm9yY2luZyBuYXZpZ2F0aW9uIHRvIGdhbWUgYm9hcmQnKTtcbiAgMTU3Mlx0XG4gIDE1NzNcdCAgICAgICAgLy8gVHJ5IHRvIHVzZSB0aGUgbmF2aWdhdGVUb0dhbWUgZnVuY3Rpb24gaWYgYXZhaWxhYmxlXG4gIDE1NzRcdCAgICAgICAgaWYgKHdpbmRvdy5uYXZpZ2F0ZVRvR2FtZSAmJiB0eXBlb2Ygd2luZG93Lm5hdmlnYXRlVG9HYW1lID09PSAnZnVuY3Rpb24nKSB7XG4gIDE1NzVcdCAgICAgICAgICBjb25zb2xlLmxvZygnW0dBTUVfU1RBUlRFRF0gVXNpbmcgbmF2aWdhdGVUb0dhbWUgZnVuY3Rpb24nKTtcbiAgMTU3Nlx0ICAgICAgICAgIHdpbmRvdy5uYXZpZ2F0ZVRvR2FtZSh0aGlzLmdhbWVJZCk7XG4gIDE1NzdcdCAgICAgICAgfSBlbHNlIHtcbiAgMTU3OFx0ICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIGRpcmVjdCBsb2NhdGlvbiBjaGFuZ2VcbiAgMTU3OVx0ICAgICAgICAgIHRyeSB7XG4gIDE1ODBcdCAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbR0FNRV9TVEFSVEVEXSBVc2luZyBkaXJlY3QgbG9jYXRpb24gY2hhbmdlJyk7XG4gIDE1ODFcdCAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYC9nYW1lLyR7dGhpcy5nYW1lSWR9YDtcbiAgMTU4Mlx0ICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgMTU4M1x0ICAgICAgICAgICAgY29uc29sZS53YXJuKCdbR0FNRV9TVEFSVEVEXSBOYXZpZ2F0aW9uIGZhaWxlZDonLCBlKTtcbiAgMTU4NFx0ICAgICAgICAgIH1cbiAgMTU4NVx0ICAgICAgICB9XG4gIDE1ODZcdCAgICAgIH0gZWxzZSB7XG4gIDE1ODdcdCAgICAgICAgY29uc29sZS5sb2coJ1tHQU1FX1NUQVJURURdIEFscmVhZHkgb24gZ2FtZSBib2FyZCwgbm8gbmF2aWdhdGlvbiBuZWVkZWQnKTtcbiAgMTU4OFx0ICAgICAgfVxuICAxNTg5XHQgICAgfSwgNTAwKTtcbiAgMTU5MFx0XG4gIDE1OTFcdCAgICAvLyBTZXQgdXAgYSBzZWNvbmQgbmF2aWdhdGlvbiBhdHRlbXB0IGFzIGEgYmFja3VwXG4gIDE1OTJcdCAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgMTU5M1x0ICAgICAgY29uc3QgY3VycmVudExvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lO1xuICAxNTk0XHQgICAgICBpZiAoIWN1cnJlbnRMb2NhdGlvbi5pbmNsdWRlcygnL2dhbWUvJykpIHtcbiAgMTU5NVx0ICAgICAgICBjb25zb2xlLmxvZygnW0dBTUVfU1RBUlRFRF0gU2Vjb25kIGF0dGVtcHQgYXQgZm9yY2luZyBuYXZpZ2F0aW9uIHRvIGdhbWUgYm9hcmQnKTtcbiAgMTU5Nlx0ICAgICAgICB0cnkge1xuICAxNTk3XHQgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBgL2dhbWUvJHt0aGlzLmdhbWVJZH1gO1xuICAxNTk4XHQgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgMTU5OVx0ICAgICAgICAgIGNvbnNvbGUud2FybignW0dBTUVfU1RBUlRFRF0gU2Vjb25kIG5hdmlnYXRpb24gYXR0ZW1wdCBmYWlsZWQ6JywgZSk7XG4gIDE2MDBcdCAgICAgICAgfVxuVG90YWwgbGluZXMgaW4gZmlsZTogMjY4MlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxUWtqZlVMRkd3Mm1pZjE2SDRXTGFRQSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIiLCJmb2xkZXJSb290IjoiL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMiJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMDNUMDM6MDY6MzAuNTQ1WiIsInJlc3BvbnNlX3RleHQiOiIiLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiNGFhNDMzZjItYmVlOC00MmUzLTlhZGUtNzFmMDFiZDNiOTAyIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxUVl2NXhMSkZ4S0NmQmtRaU5MaHNIOSIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCJrZWtvcG9seS1mcm9udGVuZC9zcmMvc2VydmljZXMvc29ja2V0U2VydmljZS5qc1wiLCBcInZpZXdfcmFuZ2VcIjogWzIyMDAsIDIzMDBdfSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24ga2Vrb3BvbHktZnJvbnRlbmQvc3JjL3NlcnZpY2VzL3NvY2tldFNlcnZpY2UuanM6XG4gIDIwMDBcdCAgICBjb25zb2xlLmxvZyhgW0dBTUVfU1RBUlRfUkVUUlldIENoZWNrICMke3RoaXMuZ2FtZVN0YXJ0UmV0cnlDb3VudCArIDF9OiBDdXJyZW50IGxvY2F0aW9uOiAke2N1cnJlbnRMb2NhdGlvbn0sIEdhbWUgc3RhdGU6YCwge1xuICAyMDAxXHQgICAgICBnYW1lU3RhcnRlZDogZ2FtZVN0YXRlLmdhbWVTdGFydGVkLFxuICAyMDAyXHQgICAgICBnYW1lUGhhc2U6IGdhbWVTdGF0ZS5nYW1lUGhhc2UsXG4gIDIwMDNcdCAgICAgIHBsYXllcklkOiB0aGlzLnBsYXllcklkLFxuICAyMDA0XHQgICAgICBpc0hvc3Q6IHRoaXMucGxheWVySWQgPT09IGdhbWVTdGF0ZS5ob3N0SWQsXG4gIDIwMDVcdCAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gIDIwMDZcdCAgICB9KTtcbiAgMjAwN1x0XG4gIDIwMDhcdCAgICAvLyBDaGVjayBpZiB3ZSdyZSBhbHJlYWR5IG9uIHRoZSBnYW1lIGJvYXJkIHBhZ2VcbiAgMjAwOVx0ICAgIGNvbnN0IGlzT25HYW1lQm9hcmQgPSBjdXJyZW50TG9jYXRpb24uaW5jbHVkZXMoJy9nYW1lLycpO1xuICAyMDEwXHRcbiAgMjAxMVx0ICAgIC8vIEVYVFJFTUVMWSBhZ2dyZXNzaXZlIHRyYW5zaXRpb24gbG9naWMgLSB0cmFuc2l0aW9uIGlmIEFOWSBvZiB0aGVzZSBjb25kaXRpb25zIGFyZSBtZXQ6XG4gIDIwMTJcdCAgICAvLyAxLiBnYW1lU3RhcnRlZCBpcyB0cnVlIChyZWdhcmRsZXNzIG9mIHBoYXNlKVxuICAyMDEzXHQgICAgLy8gMi4gZ2FtZVBoYXNlIGlzICdwbGF5aW5nJyAocmVnYXJkbGVzcyBvZiBnYW1lU3RhcnRlZClcbiAgMjAxNFx0ICAgIC8vIDMuIFdlIGhhdmUgbG9jYWxTdG9yYWdlIGZsYWcgKHJlZ2FyZGxlc3Mgb2YgdGltZXN0YW1wKVxuICAyMDE1XHQgICAgLy8gNC4gQW55IG90aGVyIHBsYXllciBoYXMgc3RhcnRlZCB0aGUgZ2FtZSAoY2hlY2sgdmlhIGxvY2FsU3RvcmFnZSlcbiAgMjAxNlx0ICAgIGNvbnN0IHNob3VsZFRyYW5zaXRpb25Ub0dhbWUgPVxuICAyMDE3XHQgICAgICBnYW1lU3RhdGUuZ2FtZVN0YXJ0ZWQgfHxcbiAgMjAxOFx0ICAgICAgZ2FtZVN0YXRlLmdhbWVQaGFzZSA9PT0gJ3BsYXlpbmcnIHx8XG4gIDIwMTlcdCAgICAgIGhhc1N0b3JhZ2VGbGFnIHx8XG4gIDIwMjBcdCAgICAgIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdrZWtvcG9seV9nYW1lX3N0YXJ0ZWQnKSA9PT0gJ3RydWUnO1xuICAyMDIxXHRcbiAgMjAyMlx0ICAgIC8vIExvZyB0aGUgcm91dGluZyBjb25kaXRpb25zXG4gIDIwMjNcdCAgICBjb25zb2xlLmxvZyhgW0dBTUVfU1RBUlRfUkVUUlldIFJvdXRpbmcgY29uZGl0aW9uczogaXNPbkdhbWVCb2FyZD0ke2lzT25HYW1lQm9hcmR9LCBnYW1lU3RhcnRlZD0ke2dhbWVTdGF0ZS5nYW1lU3RhcnRlZH0sIGdhbWVQaGFzZT0ke2dhbWVTdGF0ZS5nYW1lUGhhc2V9LCBoYXNTdG9yYWdlRmxhZz0ke2hhc1N0b3JhZ2VGbGFnfSwgc2hvdWxkVHJhbnNpdGlvblRvR2FtZT0ke3Nob3VsZFRyYW5zaXRpb25Ub0dhbWV9YCk7XG4gIDIwMjRcdFxuICAyMDI1XHQgICAgLy8gSWYgd2UncmUgbm90IG9uIHRoZSBnYW1lIGJvYXJkLCBmb3JjZSBuYXZpZ2F0aW9uIHJlZ2FyZGxlc3Mgb2YgY29uZGl0aW9uc1xuICAyMDI2XHQgICAgLy8gVGhpcyBlbnN1cmVzIGFsbCBwbGF5ZXJzIHdpbGwgZXZlbnR1YWxseSBuYXZpZ2F0ZSB0byB0aGUgZ2FtZSBib2FyZFxuICAyMDI3XHQgICAgaWYgKCFpc09uR2FtZUJvYXJkICYmIHRoaXMuZ2FtZVN0YXJ0UmV0cnlDb3VudCA8IHRoaXMubWF4R2FtZVN0YXJ0UmV0cmllcykge1xuICAyMDI4XHQgICAgICAvLyBGb3JjZSB0aGUgZ2FtZSBzdGF0ZSB0byBiZSBpbiBwbGF5aW5nIG1vZGVcbiAgMjAyOVx0ICAgICAgc3RvcmUuZGlzcGF0Y2goc2V0R2FtZVN0YXJ0ZWQodHJ1ZSkpO1xuICAyMDMwXHQgICAgICBzdG9yZS5kaXNwYXRjaChzZXRHYW1lUGhhc2UoJ3BsYXlpbmcnKSk7XG4gIDIwMzFcdCAgICAgIHN0b3JlLmRpc3BhdGNoKHN5bmNHYW1lU3RhdHVzKCdQTEFZSU5HJykpO1xuICAyMDMyXHRcbiAgMjAzM1x0ICAgICAgLy8gRm9yY2UgbG9jYWxTdG9yYWdlIGZsYWdzXG4gIDIwMzRcdCAgICAgIHRyeSB7XG4gIDIwMzVcdCAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2tla29wb2x5X2dhbWVfc3RhcnRlZCcsICd0cnVlJyk7XG4gIDIwMzZcdCAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2tla29wb2x5X2dhbWVfaWQnLCBnYW1lSWQgfHwgdGhpcy5nYW1lSWQpO1xuICAyMDM3XHQgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdrZWtvcG9seV9uYXZpZ2F0aW9uX3RpbWVzdGFtcCcsIERhdGUubm93KCkudG9TdHJpbmcoKSk7XG4gIDIwMzhcdCAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2tla29wb2x5X2dhbWVfcGhhc2UnLCAncGxheWluZycpO1xuICAyMDM5XHQgICAgICB9IGNhdGNoIChlKSB7XG4gIDIwNDBcdCAgICAgICAgY29uc29sZS53YXJuKCdbR0FNRV9TVEFSVF9SRVRSWV0gQ291bGQgbm90IHVzZSBsb2NhbFN0b3JhZ2U6JywgZSk7XG4gIDIwNDFcdCAgICAgIH1cbiAgMjA0Mlx0ICAgICAgY29uc29sZS5sb2coYFtHQU1FX1NUQVJUX1JFVFJZXSBHYW1lIGJvYXJkIG5vdCB2aXNpYmxlIHlldCwgcmUtZGlzcGF0Y2hpbmcgZ2FtZSBzdGF0ZSBhY3Rpb25zIChhdHRlbXB0ICR7dGhpcy5nYW1lU3RhcnRSZXRyeUNvdW50ICsgMX0vJHt0aGlzLm1heEdhbWVTdGFydFJldHJpZXN9KWApO1xuICAyMDQzXHQgICAgICBjb25zb2xlLmxvZyhgW0dBTUVfU1RBUlRfUkVUUlldIFBsYXllciAke3RoaXMucGxheWVySWR9IGF0dGVtcHRpbmcgdG8gdHJhbnNpdGlvbiB0byBnYW1lIGJvYXJkYCk7XG4gIDIwNDRcdFxuICAyMDQ1XHQgICAgICAvLyBVc2UgdGhlIHN5bmNocm9uaXphdGlvbiBmdW5jdGlvbiB0byBlbnN1cmUgY29uc2lzdGVudCBzdGF0ZVxuICAyMDQ2XHQgICAgICAvLyBVc2UgJ1BMQVlJTkcnIHN0YXR1cyB0byBpbmRpY2F0ZSB3ZSdyZSB0cmFuc2l0aW9uaW5nIHRvIHRoZSBnYW1lIGJvYXJkXG4gIDIwNDdcdCAgICAgIHRoaXMuc3luY0dhbWVTdGF0ZUFjcm9zc1NsaWNlcygnUExBWUlORycpO1xuICAyMDQ4XHRcbiAgMjA0OVx0ICAgICAgLy8gVHJ5IG5hdmlnYXRpb24gd2l0aCBtdWx0aXBsZSBtZXRob2RzIGluIHNlcXVlbmNlXG4gIDIwNTBcdCAgICAgIGNvbnN0IG5hdmlnYXRlVG9HYW1lQm9hcmQgPSAoKSA9PiB7XG4gIDIwNTFcdCAgICAgICAgY29uc29sZS5sb2coYFtHQU1FX1NUQVJUX1JFVFJZXSBBdHRlbXB0aW5nIG5hdmlnYXRpb24gZm9yIHBsYXllciAke3RoaXMucGxheWVySWR9YCk7XG4gIDIwNTJcdFxuICAyMDUzXHQgICAgICAgIC8vIFNldCB0aGUgbmF2aWdhdGlvbiBmbGFncyB0byBwcmVzZXJ2ZSBjb25uZWN0aW9uXG4gIDIwNTRcdCAgICAgICAgdGhpcy5pc05hdmlnYXRpbmcgPSB0cnVlO1xuICAyMDU1XHQgICAgICAgIHRoaXMucHJlc2VydmVDb25uZWN0aW9uID0gdHJ1ZTtcbiAgMjA1Nlx0ICAgICAgICBjb25zb2xlLmxvZygnW0dBTUVfU1RBUlRfUkVUUlldIFNldCBjb25uZWN0aW9uIHByZXNlcnZhdGlvbiBmbGFncyBmb3IgbmF2aWdhdGlvbicpO1xuICAyMDU3XHRcbiAgMjA1OFx0ICAgICAgICAvLyAxLiBUcnkgUmVhY3QgUm91dGVyIG5hdmlnYXRpb24gdmlhIHdpbmRvdyBmdW5jdGlvblxuICAyMDU5XHQgICAgICAgIGlmICh3aW5kb3cubmF2aWdhdGVUb0dhbWUgJiYgdHlwZW9mIHdpbmRvdy5uYXZpZ2F0ZVRvR2FtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAyMDYwXHQgICAgICAgICAgY29uc29sZS5sb2coJ1tHQU1FX1NUQVJUX1JFVFJZXSBVc2luZyBuYXZpZ2F0ZVRvR2FtZSBmdW5jdGlvbicpO1xuICAyMDYxXHQgICAgICAgICAgd2luZG93Lm5hdmlnYXRlVG9HYW1lKGdhbWVJZCB8fCB0aGlzLmdhbWVJZCk7XG4gIDIwNjJcdCAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgMjA2M1x0ICAgICAgICB9XG4gIDIwNjRcdFxuICAyMDY1XHQgICAgICAgIC8vIDIuIFRyeSBkaXJlY3QgbG9jYXRpb24gY2hhbmdlXG4gIDIwNjZcdCAgICAgICAgdHJ5IHtcbiAgMjA2N1x0ICAgICAgICAgIGNvbnN0IG5hdlRhcmdldCA9IGAvZ2FtZS8ke2dhbWVJZCB8fCB0aGlzLmdhbWVJZH1gO1xuICAyMDY4XHQgICAgICAgICAgY29uc29sZS5sb2coYFtHQU1FX1NUQVJUX1JFVFJZXSBVc2luZyBkaXJlY3QgbG9jYXRpb24gY2hhbmdlIHRvICR7bmF2VGFyZ2V0fWApO1xuICAyMDY5XHQgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBuYXZUYXJnZXQ7XG4gIDIwNzBcdCAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgMjA3MVx0ICAgICAgICB9IGNhdGNoIChlKSB7XG4gIDIwNzJcdCAgICAgICAgICBjb25zb2xlLndhcm4oJ1tHQU1FX1NUQVJUX1JFVFJZXSBOYXZpZ2F0aW9uIGZhaWxlZDonLCBlKTtcbiAgMjA3M1x0ICAgICAgICB9XG4gIDIwNzRcdFxuICAyMDc1XHQgICAgICAgIHJldHVybiBmYWxzZTtcbiAgMjA3Nlx0ICAgICAgfTtcbiAgMjA3N1x0XG4gIDIwNzhcdCAgICAgIC8vIEV4ZWN1dGUgbmF2aWdhdGlvblxuICAyMDc5XHQgICAgICBjb25zdCBuYXZpZ2F0aW9uU3VjY2Vzc2Z1bCA9IG5hdmlnYXRlVG9HYW1lQm9hcmQoKTtcbiAgMjA4MFx0XG4gIDIwODFcdCAgICAgIC8vIFJlcXVlc3QgdXBkYXRlZCBnYW1lIHN0YXRlIGZyb20gc2VydmVyXG4gIDIwODJcdCAgICAgIGlmICh0aGlzLnNvY2tldCAmJiB0aGlzLnNvY2tldC5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuT1BFTikge1xuICAyMDgzXHQgICAgICAgIGNvbnNvbGUubG9nKCdbR0FNRV9TVEFSVF9SRVRSWV0gUmVxdWVzdGluZyB1cGRhdGVkIGdhbWUgc3RhdGUgZnJvbSBzZXJ2ZXInKTtcbiAgMjA4NFx0ICAgICAgICB0aGlzLnNlbmRNZXNzYWdlKCdnZXRfZ2FtZV9zdGF0ZScsIHsgZnVsbDogdHJ1ZSB9KTtcbiAgMjA4NVx0ICAgICAgICB0aGlzLnNlbmRNZXNzYWdlKCdjaGVja19nYW1lX3N0YXJ0ZWQnLCB7IGdhbWVJZDogdGhpcy5nYW1lSWQgfSk7XG4gIDIwODZcdCAgICAgIH1cbiAgMjA4N1x0XG4gIDIwODhcdCAgICAgIC8vIEluY3JlbWVudCByZXRyeSBjb3VudGVyXG4gIDIwODlcdCAgICAgIHRoaXMuZ2FtZVN0YXJ0UmV0cnlDb3VudCsrO1xuICAyMDkwXHRcbiAgMjA5MVx0ICAgICAgLy8gSWYgbmF2aWdhdGlvbiB3YXMgc3VjY2Vzc2Z1bCwgd2UnbGwgdHJ5IGZld2VyIGFkZGl0aW9uYWwgcmV0cmllc1xuICAyMDkyXHQgICAgICBpZiAobmF2aWdhdGlvblN1Y2Nlc3NmdWwpIHtcbiAgMjA5M1x0ICAgICAgICBjb25zb2xlLmxvZygnW0dBTUVfU1RBUlRfUkVUUlldIE5hdmlnYXRpb24gYXBwZWFycyBzdWNjZXNzZnVsLCByZWR1Y2luZyByZW1haW5pbmcgcmV0cmllcycpO1xuICAyMDk0XHQgICAgICAgIHRoaXMuZ2FtZVN0YXJ0UmV0cnlDb3VudCA9IE1hdGgubWF4KHRoaXMuZ2FtZVN0YXJ0UmV0cnlDb3VudCwgTWF0aC5mbG9vcih0aGlzLm1heEdhbWVTdGFydFJldHJpZXMgKiAwLjcpKTtcbiAgMjA5NVx0ICAgICAgfVxuICAyMDk2XHRcbiAgMjA5N1x0ICAgICAgLy8gU2NoZWR1bGUgbmV4dCByZXRyeSB3aXRoIGluY3JlYXNpbmcgZGVsYXkgYnV0IGNhcCB0aGUgbWF4aW11bSBkZWxheVxuICAyMDk4XHQgICAgICBjb25zdCBiYXNlRGVsYXkgPSA1MDA7XG4gIDIwOTlcdCAgICAgIGNvbnN0IG1heERlbGF5ID0gMjAwMDsgLy8gQ2FwIGF0IDIgc2Vjb25kcyBmb3IgZmFzdGVyIHJldHJpZXNcbiAgMjEwMFx0ICAgICAgY29uc3QgbmV4dERlbGF5ID0gTWF0aC5taW4oYmFzZURlbGF5ICogTWF0aC5wb3coMS4zLCB0aGlzLmdhbWVTdGFydFJldHJ5Q291bnQpLCBtYXhEZWxheSk7XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAyNjgyXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDE0aWFaRmtnUlN4ekIyUkw4ZjVLaEpYIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMiIsImZvbGRlclJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0wM1QwMzowNjozNC41NDRaIiwicmVzcG9uc2VfdGV4dCI6IiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJjZDhiZmViMi0yZWZhLTQyYjItOWFhNy04YzJkMmQwYzYxOWEiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFHdnF1VHF5YjRMNmIxcW5ZUDlMOEpXIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJ2aWV3XCIsIFwicGF0aFwiOiBcImtla29wb2x5LWZyb250ZW5kL3NyYy9zZXJ2aWNlcy9zb2NrZXRTZXJ2aWNlLmpzXCIsIFwidmlld19yYW5nZVwiOiBbMTIwMCwgMTMwMF19IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTm93LCBsZXQncyBsb29rIGF0IHRoZSBzcGVjaWZpYyBkaWNlIHJvbGxpbmcgZnVuY3Rpb25hbGl0eSBpbiB0aGUgc29ja2V0U2VydmljZTpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24ga2Vrb3BvbHktZnJvbnRlbmQvc3JjL3NlcnZpY2VzL3NvY2tldFNlcnZpY2UuanM6XG4gIDIyMDBcdCAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgMjIwMVx0ICAgICAgICBjb25zb2xlLndhcm4oJ1tHQU1FX1NUQVRFX1BPTExJTkddIEVycm9yIGFjY2Vzc2luZyBsb2NhbFN0b3JhZ2U6JywgZSk7XG4gIDIyMDJcdCAgICAgIH1cbiAgMjIwM1x0XG4gIDIyMDRcdCAgICAgIC8vIElmIGdhbWUgaXMgc3RhcnRlZCBpbiBSZWR1eCwgdXBkYXRlIG91ciBpbnRlcm5hbCBzdGF0ZSBhbmQgbmF2aWdhdGVcbiAgMjIwNVx0ICAgICAgaWYgKGdhbWVTdGFydGVkKSB7XG4gIDIyMDZcdCAgICAgICAgY29uc29sZS5sb2coJ1tHQU1FX1NUQVRFX1BPTExJTkddIEdhbWUgYWxyZWFkeSBzdGFydGVkLCBzdG9wcGluZyBwb2xsaW5nJyk7XG4gIDIyMDdcdFxuICAyMjA4XHQgICAgICAgIC8vIFJlcXVlc3QgdXBkYXRlZCBnYW1lIHN0YXRlIGZyb20gc2VydmVyXG4gIDIyMDlcdCAgICAgICAgaWYgKHRoaXMuc29ja2V0ICYmIHRoaXMuc29ja2V0LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOKSB7XG4gIDIyMTBcdCAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlKCdnZXRfZ2FtZV9zdGF0ZScsIHsgZnVsbDogdHJ1ZSB9KTtcbiAgMjIxMVx0ICAgICAgICB9XG4gIDIyMTJcdFxuICAyMjEzXHQgICAgICAgIC8vIE5hdmlnYXRlIHRvIGdhbWUgYm9hcmRcbiAgMjIxNFx0ICAgICAgICB0aGlzLm5hdmlnYXRlVG9HYW1lQm9hcmQodGhpcy5nYW1lSWQpO1xuICAyMjE1XHRcbiAgMjIxNlx0ICAgICAgICAvLyBTdG9wIHBvbGxpbmdcbiAgMjIxN1x0ICAgICAgICBpZiAodGhpcy5nYW1lU3RhdGVQb2xsaW5nVGltZXIpIHtcbiAgMjIxOFx0ICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5nYW1lU3RhdGVQb2xsaW5nVGltZXIpO1xuICAyMjE5XHQgICAgICAgICAgdGhpcy5nYW1lU3RhdGVQb2xsaW5nVGltZXIgPSBudWxsO1xuICAyMjIwXHQgICAgICAgIH1cbiAgMjIyMVx0XG4gIDIyMjJcdCAgICAgICAgcmV0dXJuIHRydWU7XG4gIDIyMjNcdCAgICAgIH1cbiAgMjIyNFx0XG4gIDIyMjVcdCAgICAgIC8vIFJlcXVlc3QgdXBkYXRlZCBnYW1lIHN0YXRlIGZyb20gc2VydmVyXG4gIDIyMjZcdCAgICAgIGlmICh0aGlzLnNvY2tldCAmJiB0aGlzLnNvY2tldC5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuT1BFTikge1xuICAyMjI3XHQgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2UoJ2dldF9nYW1lX3N0YXRlJywge30pO1xuICAyMjI4XHRcbiAgMjIyOVx0ICAgICAgICAvLyBBbHNvIHJlcXVlc3QgYWN0aXZlIHBsYXllcnMgaW4gY2FzZSBob3N0IGluZm9ybWF0aW9uIGhhcyBjaGFuZ2VkXG4gIDIyMzBcdCAgICAgICAgdGhpcy5zZW5kTWVzc2FnZSgnZ2V0X2FjdGl2ZV9wbGF5ZXJzJywge30pO1xuICAyMjMxXHQgICAgICB9XG4gIDIyMzJcdFxuICAyMjMzXHQgICAgICByZXR1cm4gZmFsc2U7XG4gIDIyMzRcdCAgICB9O1xuICAyMjM1XHRcbiAgMjIzNlx0ICAgIC8vIFJ1biBpbml0aWFsIGNoZWNrXG4gIDIyMzdcdCAgICBjb25zdCBnYW1lU3RhcnRlZCA9IGNoZWNrR2FtZVN0YXRlKCk7XG4gIDIyMzhcdFxuICAyMjM5XHQgICAgLy8gSWYgZ2FtZSBhbHJlYWR5IHN0YXJ0ZWQsIG5vIG5lZWQgdG8gc2V0IHVwIHBvbGxpbmdcbiAgMjI0MFx0ICAgIGlmICghZ2FtZVN0YXJ0ZWQpIHtcbiAgMjI0MVx0ICAgICAgIC8vIFNldCB1cCBwb2xsaW5nIGF0IDMtc2Vjb25kIGludGVydmFsc1xuICAyMjQyXHQgICAgICAgLyogLS0tIFRlbXBvcmFyaWx5IGRpc2FibGUgcG9sbGluZyBpbnRlcnZhbCB0byByZWR1Y2UgbG9nIHNwYW0gLS0tXG4gIDIyNDNcdCAgICAgICB0aGlzLmdhbWVTdGF0ZVBvbGxpbmdUaW1lciA9IHNldEludGVydmFsKGNoZWNrR2FtZVN0YXRlLCAzMDAwMCk7IC8vIEluY3JlYXNlIGludGVydmFsIHNpZ25pZmljYW50bHkgaWYgcmUtZW5hYmxlZFxuICAyMjQ0XHQgICAgICAgKi9cbiAgMjI0NVx0ICAgICAgIGNvbnNvbGUubG9nKCdbR0FNRV9TVEFURV9QT0xMSU5HXSBQb2xsaW5nIGludGVydmFsIGN1cnJlbnRseSBkaXNhYmxlZC4nKTtcbiAgMjI0Nlx0ICAgICAgIC8vIC0tLS0tLS0tLVxuICAyMjQ3XHQgICAgfVxuICAyMjQ4XHQgIH07XG4gIDIyNDlcdFxuICAyMjUwXHQgIC8vIEhlbHBlciBtZXRob2QgdG8gbmF2aWdhdGUgdG8gdGhlIGdhbWUgYm9hcmRcbiAgMjI1MVx0ICBuYXZpZ2F0ZVRvR2FtZUJvYXJkID0gKGdhbWVJZCkgPT4ge1xuICAyMjUyXHQgICAgaWYgKCFnYW1lSWQpIHtcbiAgMjI1M1x0ICAgICAgY29uc29sZS53YXJuKCdbTkFWSUdBVElPTl0gQ2Fubm90IG5hdmlnYXRlIHRvIGdhbWUgYm9hcmQ6IG5vIGdhbWVJZCBwcm92aWRlZCcpO1xuICAyMjU0XHQgICAgICByZXR1cm4gZmFsc2U7XG4gIDIyNTVcdCAgICB9XG4gIDIyNTZcdFxuICAyMjU3XHQgICAgY29uc29sZS5sb2coYFtOQVZJR0FUSU9OXSBBdHRlbXB0aW5nIHRvIG5hdmlnYXRlIHRvIGdhbWUgYm9hcmQgZm9yIGdhbWUgJHtnYW1lSWR9YCk7XG4gIDIyNThcdFxuICAyMjU5XHQgICAgLy8gU2V0IHRoZSBuYXZpZ2F0aW9uIGZsYWdzIHRvIHByZXNlcnZlIGNvbm5lY3Rpb25cbiAgMjI2MFx0ICAgIHRoaXMuaXNOYXZpZ2F0aW5nID0gdHJ1ZTtcbiAgMjI2MVx0ICAgIHRoaXMucHJlc2VydmVDb25uZWN0aW9uID0gdHJ1ZTtcbiAgMjI2Mlx0ICAgIGNvbnNvbGUubG9nKCdbTkFWSUdBVElPTl0gU2V0IGNvbm5lY3Rpb24gcHJlc2VydmF0aW9uIGZsYWdzIGZvciBuYXZpZ2F0aW9uJyk7XG4gIDIyNjNcdFxuICAyMjY0XHQgICAgLy8gVHJ5IG11bHRpcGxlIGFwcHJvYWNoZXMgaW4gc2VxdWVuY2VcbiAgMjI2NVx0XG4gIDIyNjZcdCAgICAvLyBBcHByb2FjaCAxOiBVc2UgUmVhY3QgUm91dGVyIHZpYSBleHBvc2VkIHdpbmRvdyBmdW5jdGlvblxuICAyMjY3XHQgICAgaWYgKHdpbmRvdy5uYXZpZ2F0ZVRvR2FtZSAmJiB0eXBlb2Ygd2luZG93Lm5hdmlnYXRlVG9HYW1lID09PSAnZnVuY3Rpb24nKSB7XG4gIDIyNjhcdCAgICAgIGNvbnNvbGUubG9nKCdbTkFWSUdBVElPTl0gVXNpbmcgbmF2aWdhdGVUb0dhbWUgd2luZG93IGZ1bmN0aW9uJyk7XG4gIDIyNjlcdCAgICAgIHdpbmRvdy5uYXZpZ2F0ZVRvR2FtZShnYW1lSWQpO1xuICAyMjcwXHQgICAgICByZXR1cm4gdHJ1ZTtcbiAgMjI3MVx0ICAgIH1cbiAgMjI3Mlx0XG4gIDIyNzNcdCAgICAvLyBBcHByb2FjaCAyOiBVc2UgZGlyZWN0IGxvY2F0aW9uIGNoYW5nZVxuICAyMjc0XHQgICAgaWYgKCF3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuaW5jbHVkZXMoYC9nYW1lLyR7Z2FtZUlkfWApKSB7XG4gIDIyNzVcdCAgICAgIHRyeSB7XG4gIDIyNzZcdCAgICAgICAgY29uc29sZS5sb2coYFtOQVZJR0FUSU9OXSBVc2luZyBkaXJlY3QgbG9jYXRpb24gY2hhbmdlIHRvIC9nYW1lLyR7Z2FtZUlkfWApO1xuICAyMjc3XHQgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYC9nYW1lLyR7Z2FtZUlkfWA7XG4gIDIyNzhcdCAgICAgICAgcmV0dXJuIHRydWU7XG4gIDIyNzlcdCAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgMjI4MFx0ICAgICAgICBjb25zb2xlLndhcm4oJ1tOQVZJR0FUSU9OXSBEaXJlY3QgbmF2aWdhdGlvbiBmYWlsZWQ6JywgZSk7XG4gIDIyODFcdCAgICAgIH1cbiAgMjI4Mlx0ICAgIH0gZWxzZSB7XG4gIDIyODNcdCAgICAgIGNvbnNvbGUubG9nKGBbTkFWSUdBVElPTl0gQWxyZWFkeSBvbiBnYW1lIGJvYXJkIGF0ICR7d2luZG93LmxvY2F0aW9uLnBhdGhuYW1lfWApO1xuICAyMjg0XHQgICAgICByZXR1cm4gdHJ1ZTtcbiAgMjI4NVx0ICAgIH1cbiAgMjI4Nlx0XG4gIDIyODdcdCAgICByZXR1cm4gZmFsc2U7XG4gIDIyODhcdCAgfTtcbiAgMjI4OVx0XG4gIDIyOTBcdCAgLy8gSGFuZGxlIHN5bmNocm9uaXphdGlvbiBlcnJvcnNcbiAgMjI5MVx0ICBoYW5kbGVTeW5jRXJyb3IgPSAoZXJyb3JUeXBlLCBlcnJvciwgZGF0YSA9IG51bGwpID0+IHtcbiAgMjI5Mlx0ICAgIGNvbnNvbGUuZXJyb3IoYFtTWU5DX0VSUk9SXSAke2Vycm9yVHlwZX0gZXJyb3I6YCwgZXJyb3IpO1xuICAyMjkzXHRcbiAgMjI5NFx0ICAgIC8vIExvZyBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudCBzdGF0ZVxuICAyMjk1XHQgICAgY29uc3QgY3VycmVudFN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgMjI5Nlx0ICAgIGNvbnNvbGUubG9nKCdbU1lOQ19FUlJPUl0gQ3VycmVudCBnYW1lIHN0YXRlOicsIHtcbiAgMjI5N1x0ICAgICAgZ2FtZVN0YXJ0ZWQ6IGN1cnJlbnRTdGF0ZS5nYW1lLmdhbWVTdGFydGVkLFxuICAyMjk4XHQgICAgICBnYW1lUGhhc2U6IGN1cnJlbnRTdGF0ZS5nYW1lLmdhbWVQaGFzZSxcbiAgMjI5OVx0ICAgICAgaG9zdElkOiBjdXJyZW50U3RhdGUuZ2FtZS5ob3N0SWQsXG4gIDIzMDBcdCAgICAgIHBsYXllckNvdW50OiBPYmplY3Qua2V5cyhjdXJyZW50U3RhdGUucGxheWVycy5wbGF5ZXJzIHx8IHt9KS5sZW5ndGgsXG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAyNjgyXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFRWXY1eExKRnhLQ2ZCa1FpTkxoc0g5In19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMiIsImZvbGRlclJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0wM1QwMzowNjozOC42OTBaIiwicmVzcG9uc2VfdGV4dCI6Ik5vdywgbGV0J3MgbG9vayBhdCB0aGUgc3BlY2lmaWMgZGljZSByb2xsaW5nIGZ1bmN0aW9uYWxpdHkgaW4gdGhlIHNvY2tldFNlcnZpY2U6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiYjVhMTU1YWMtZDBhOC00YWQ4LTkwMDMtY2Q3YjI2ZjM0ZmM0IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxM2tEb2dNbVhZR0Q2aTh0UWFYOVF5RCIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCJrZWtvcG9seS1mcm9udGVuZC9zcmMvc2VydmljZXMvc29ja2V0U2VydmljZS5qc1wiLCBcInZpZXdfcmFuZ2VcIjogWzgwMCwgOTAwXX0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiIifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIGtla29wb2x5LWZyb250ZW5kL3NyYy9zZXJ2aWNlcy9zb2NrZXRTZXJ2aWNlLmpzOlxuICAxMjAwXHQgICAgICAgIG5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgMTIwMVx0ICAgICAgfVxuICAxMjAyXHQgICAgICBpZiAocGxheWVyLmlzUmVhZHkgIT09IHVuZGVmaW5lZCAmJiBleGlzdGluZ1BsYXllci5pc1JlYWR5ICE9PSBwbGF5ZXIuaXNSZWFkeSkge1xuICAxMjAzXHQgICAgICAgIHVwZGF0ZXMuaXNSZWFkeSA9IHBsYXllci5pc1JlYWR5O1xuICAxMjA0XHQgICAgICAgIG5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgMTIwNVx0ICAgICAgfVxuICAxMjA2XHQgICAgICAgLy8gQWRkIG90aGVyIGZpZWxkcyBoZXJlIGlmIHBsYXllcl9qb2luZWQgc3BlY2lmaWNhbGx5IHByb3ZpZGVzIHVuaXF1ZSB1cGRhdGVzXG4gIDEyMDdcdFxuICAxMjA4XHQgICAgICBpZiAobmVlZHNVcGRhdGUpIHtcbiAgMTIwOVx0ICAgICAgICAgY29uc29sZS5sb2coYFtQTEFZRVJfRElTUExBWV0gVXBkYXRpbmcgZXhpc3RpbmcgcGxheWVyICR7cGxheWVyLmlkfSB3aXRoOmAsIHVwZGF0ZXMpO1xuICAxMjEwXHQgICAgICAgICBkaXNwYXRjaCh1cGRhdGVQbGF5ZXIoe1xuICAxMjExXHQgICAgICAgICAgICAgcGxheWVySWQ6IHBsYXllci5pZCxcbiAgMTIxMlx0ICAgICAgICAgICAgIHVwZGF0ZXM6IHVwZGF0ZXNcbiAgMTIxM1x0ICAgICAgICAgfSkpO1xuICAxMjE0XHQgICAgICAgICAvLyBJZiBob3N0IHN0YXR1cyBjaGFuZ2VkLCBlbnN1cmUgY29uc2lzdGVuY3kgYWNyb3NzIGFsbCBwbGF5ZXJzXG4gIDEyMTVcdCAgICAgICAgIGlmICh1cGRhdGVzLmlzSG9zdCAhPT0gdW5kZWZpbmVkKSB7XG4gIDEyMTZcdCAgICAgICAgICAgIHRoaXMudXBkYXRlUGxheWVyc0hvc3RTdGF0dXMoaG9zdElkLCB0cnVlKTsgLy8gU2tpcCBicm9hZGNhc3QgZnJvbSBoZXJlXG4gIDEyMTdcdCAgICAgICAgIH1cbiAgMTIxOFx0ICAgICAgfSBlbHNlIHtcbiAgMTIxOVx0ICAgICAgICAgY29uc29sZS5sb2coYFtQTEFZRVJfRElTUExBWV0gTm8gbmVjZXNzYXJ5IHVwZGF0ZXMgZm9yIGV4aXN0aW5nIHBsYXllciAke3BsYXllci5pZH0gZnJvbSBqb2luIG1lc3NhZ2UuYCk7XG4gIDEyMjBcdCAgICAgIH1cbiAgMTIyMVx0XG4gIDEyMjJcdCAgICAgIC8vIEV4aXQgZWFybHksIGxldCBoYW5kbGVBY3RpdmVQbGF5ZXJzIG1hbmFnZSB0aGUgZnVsbCBzdGF0ZSBzeW5jXG4gIDEyMjNcdCAgICAgIHJldHVybjtcbiAgMTIyNFx0ICAgIH1cbiAgMTIyNVx0XG4gIDEyMjZcdCAgICAvLyAtLS0gUGxheWVyIGRvZXMgTk9UIGV4aXN0LCBwcm9jZWVkIHdpdGggYWRkaW5nIC0tLVxuICAxMjI3XHQgICAgY29uc29sZS5sb2coYFtQTEFZRVJfRElTUExBWV0gUGxheWVyICR7cGxheWVyLmlkfSBkb2VzIG5vdCBleGlzdC4gQWRkaW5nIG5ldyBwbGF5ZXIuYCk7XG4gIDEyMjhcdFxuICAxMjI5XHQgICAgLy8gRGV0ZXJtaW5lIGlmIHRoaXMgcGxheWVyIHNob3VsZCBiZSB0aGUgaG9zdCB1c2luZyBlbmhhbmNlZCBsb2dpY1xuICAxMjMwXHQgICAgbGV0IGlzUGxheWVySG9zdCA9IGZhbHNlO1xuICAxMjMxXHRcbiAgMTIzMlx0ICAgIC8vIENhc2UgMTogUGxheWVyIGlzIGV4cGxpY2l0bHkgbWFya2VkIGFzIGhvc3QgaW4gdGhlIG1lc3NhZ2VcbiAgMTIzM1x0ICAgIGlmIChwbGF5ZXIuaXNIb3N0ID09PSB0cnVlKSB7XG4gIDEyMzRcdCAgICAgIGlzUGxheWVySG9zdCA9IHRydWU7XG4gIDEyMzVcdCAgICAgIC8vIFVwZGF0ZSBnYW1lIHN0YXRlIGhvc3RJZCB0byBtYXRjaCB0aGlzIHBsYXllclxuICAxMjM2XHQgICAgICBjb25zb2xlLmxvZyhgW0hPU1RfTUFOQUdFTUVOVF0gUGxheWVyICR7cGxheWVyLmlkfSBpcyBtYXJrZWQgYXMgaG9zdCBpbiBtZXNzYWdlLCBzZXR0aW5nIGFzIGhvc3QuYCk7XG4gIDEyMzdcdCAgICAgIGRpc3BhdGNoKHNldEhvc3QocGxheWVyLmlkKSk7XG4gIDEyMzhcdCAgICAgIGhvc3RJZCA9IHBsYXllci5pZDsgLy8gVXBkYXRlIGxvY2FsIGhvc3RJZFxuICAxMjM5XHQgICAgfVxuICAxMjQwXHQgICAgLy8gQ2FzZSAyOiBQbGF5ZXIgSUQgbWF0Y2hlcyB0aGUgaG9zdElkIGluIGdhbWUgc3RhdGUgKHNob3VsZCBiZSByYXJlIGlmIHBsYXllciBkb2Vzbid0IGV4aXN0LCBidXQgcG9zc2libGUgcmFjZSlcbiAgMTI0MVx0ICAgIGVsc2UgaWYgKHBsYXllci5pZCA9PT0gaG9zdElkKSB7XG4gIDEyNDJcdCAgICAgIGlzUGxheWVySG9zdCA9IHRydWU7XG4gIDEyNDNcdCAgICAgIGNvbnNvbGUubG9nKGBbSE9TVF9NQU5BR0VNRU5UXSBQbGF5ZXIgJHtwbGF5ZXIuaWR9IG1hdGNoZXMgZXhpc3RpbmcgaG9zdElkICR7aG9zdElkfS5gKTtcbiAgMTI0NFx0ICAgIH1cbiAgMTI0NVx0ICAgIC8vIENhc2UgMzogTm8gaG9zdElkIGlzIHNldCBhbmQgbm8gcGxheWVycyBleGlzdCB5ZXRcbiAgMTI0Nlx0ICAgIGVsc2UgaWYgKCFob3N0SWQgJiYgT2JqZWN0LmtleXMoZXhpc3RpbmdQbGF5ZXJzKS5sZW5ndGggPT09IDApIHtcbiAgMTI0N1x0ICAgICAgaXNQbGF5ZXJIb3N0ID0gdHJ1ZTtcbiAgMTI0OFx0ICAgICAgY29uc29sZS5sb2coYFtIT1NUX01BTkFHRU1FTlRdIE5vIGhvc3Qgc2V0IGFuZCBubyBleGlzdGluZyBwbGF5ZXJzLCBzZXR0aW5nICR7cGxheWVyLmlkfSBhcyBob3N0LmApO1xuICAxMjQ5XHQgICAgICBkaXNwYXRjaChzZXRIb3N0KHBsYXllci5pZCkpO1xuICAxMjUwXHQgICAgICBob3N0SWQgPSBwbGF5ZXIuaWQ7IC8vIFVwZGF0ZSBsb2NhbCBob3N0SWRcbiAgMTI1MVx0ICAgIH1cbiAgMTI1Mlx0XG4gIDEyNTNcdCAgICBjb25zb2xlLmxvZyhgW0hPU1RfTUFOQUdFTUVOVF0gRGV0ZXJtaW5lZCBob3N0IHN0YXR1cyBmb3IgbmV3IHBsYXllciAke3BsYXllci5pZH06ICR7aXNQbGF5ZXJIb3N0fWApO1xuICAxMjU0XHRcbiAgMTI1NVx0ICAgIC8vIE1ha2Ugc3VyZSBwbGF5ZXIgaGFzIGFsbCByZXF1aXJlZCBmaWVsZHNcbiAgMTI1Nlx0ICAgIGNvbnN0IHBsYXllckRhdGEgPSB7XG4gIDEyNTdcdCAgICAgIC8vIERlZmF1bHQgdmFsdWVzIGZvciBtaXNzaW5nIGZpZWxkc1xuICAxMjU4XHQgICAgICBpZDogcGxheWVyLmlkLFxuICAxMjU5XHQgICAgICBwb3NpdGlvbjogMCxcbiAgMTI2MFx0ICAgICAgYmFsYW5jZTogMTUwMCxcbiAgMTI2MVx0ICAgICAgcHJvcGVydGllczogW10sXG4gIDEyNjJcdCAgICAgIHN0YXR1czogJ0FDVElWRScsXG4gIDEyNjNcdFxuICAxMjY0XHQgICAgICAvLyBQcmlvcml0aXplIG5ldyBkYXRhIGZyb20gdGhlIG1lc3NhZ2UgZm9yIGRpc3BsYXkgcHJvcGVydGllc1xuICAxMjY1XHQgICAgICBuYW1lOiBwbGF5ZXIubmFtZSB8fCBgUGxheWVyICR7cGxheWVyLmlkLnN1YnN0cmluZygwLCA0KX1gLFxuICAxMjY2XHQgICAgICB0b2tlbjogcGxheWVyLnRva2VuIHx8ICcnLFxuICAxMjY3XHQgICAgICBlbW9qaTogcGxheWVyLmVtb2ppIHx8ICfwn5GkJyxcbiAgMTI2OFx0ICAgICAgY29sb3I6IHBsYXllci5jb2xvciB8fCAnZ3JheS41MDAnLFxuICAxMjY5XHRcbiAgMTI3MFx0ICAgICAgLy8gSGFuZGxlIHJlYWR5IHN0YXRlXG4gIDEyNzFcdCAgICAgIGlzUmVhZHk6IHBsYXllci5pc1JlYWR5ICE9PSB1bmRlZmluZWQgPyBwbGF5ZXIuaXNSZWFkeSA6IGZhbHNlLFxuICAxMjcyXHRcbiAgMTI3M1x0ICAgICAgLy8gQWx3YXlzIGVuc3VyZSBpc0hvc3QgaXMgc2V0IGNvcnJlY3RseSBiYXNlZCBvbiBhYm92ZSBsb2dpY1xuICAxMjc0XHQgICAgICBpc0hvc3Q6IGlzUGxheWVySG9zdFxuICAxMjc1XHQgICAgfTtcbiAgMTI3Nlx0XG4gIDEyNzdcdCAgICAvLyBFbnN1cmUgcHJvcGVydGllcyBpcyBhbiBhcnJheVxuICAxMjc4XHQgICAgaWYgKCFBcnJheS5pc0FycmF5KHBsYXllckRhdGEucHJvcGVydGllcykpIHtcbiAgMTI3OVx0ICAgICAgcGxheWVyRGF0YS5wcm9wZXJ0aWVzID0gW107XG4gIDEyODBcdCAgICB9XG4gIDEyODFcdFxuICAxMjgyXHQgICAgLy8gTG9nIHRoZSBwbGF5ZXIgYmVpbmcgYWRkZWRcbiAgMTI4M1x0ICAgIGNvbnNvbGUubG9nKGBbUExBWUVSX0RJU1BMQVldIEFkZGluZyBuZXcgcGxheWVyOmAsIHBsYXllckRhdGEpO1xuICAxMjg0XHRcbiAgMTI4NVx0ICAgIC8vIEFkZCB0aGUgcGxheWVyIHRvIHRoZSBzdG9yZVxuICAxMjg2XHQgICAgZGlzcGF0Y2goYWRkUGxheWVyKHtcbiAgMTI4N1x0ICAgICAgcGxheWVySWQ6IHBsYXllci5pZCxcbiAgMTI4OFx0ICAgICAgcGxheWVyRGF0YTogcGxheWVyRGF0YVxuICAxMjg5XHQgICAgfSkpO1xuICAxMjkwXHRcbiAgMTI5MVx0ICAgIC8vIElmIHRoaXMgbmV3IHBsYXllciB3YXMgc2V0IGFzIGhvc3QsIHVwZGF0ZSBhbGwgcGxheWVycycgc3RhdHVzXG4gIDEyOTJcdCAgICAvLyBBdm9pZCBicm9hZGNhc3QgYXMgdGhpcyBjbGllbnQgaW5pdGlhdGVkIHRoZSB1cGRhdGUgaW1wbGljaXRseVxuICAxMjkzXHQgICAgaWYgKGlzUGxheWVySG9zdCkge1xuICAxMjk0XHQgICAgICAgdGhpcy51cGRhdGVQbGF5ZXJzSG9zdFN0YXR1cyhob3N0SWQsIHRydWUpO1xuICAxMjk1XHQgICAgfVxuICAxMjk2XHQgIH07XG4gIDEyOTdcdFxuICAxMjk4XHQgIGhhbmRsZVBsYXllclVwZGF0ZWQgPSAoeyBwbGF5ZXJJZCwgdXBkYXRlcyB9KSA9PiB7XG4gIDEyOTlcdCAgICBzdG9yZS5kaXNwYXRjaCh1cGRhdGVQbGF5ZXIoeyBwbGF5ZXJJZCwgdXBkYXRlcyB9KSk7XG4gIDEzMDBcdCAgfTtcblRvdGFsIGxpbmVzIGluIGZpbGU6IDI2ODJcbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUd2cXVUcXliNEw2YjFxbllQOUw4SlcifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIiwiZm9sZGVyUm9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTAzVDAzOjA2OjQzLjA4OFoiLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjBlYTA3N2JlLWNjMTktNDAxYi04ZjA3LWM2NjMwZDNkYzdmMCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVBKVWt1NFdOY3c5ZkpHdWhncHRzQXciLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInZpZXdcIiwgXCJwYXRoXCI6IFwia2Vrb3BvbHktZnJvbnRlbmQvc3JjL3NlcnZpY2VzL3NvY2tldFNlcnZpY2UuanNcIiwgXCJ2aWV3X3JhbmdlXCI6IFsxMzAwLCAxNDAwXX0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJMZXQncyBmaW5kIHRoZSBgaGFuZGxlRGljZVJvbGxlZGAgZnVuY3Rpb24gaW4gdGhlIHNvY2tldFNlcnZpY2U6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIGtla29wb2x5LWZyb250ZW5kL3NyYy9zZXJ2aWNlcy9zb2NrZXRTZXJ2aWNlLmpzOlxuICAgODAwXHRcbiAgIDgwMVx0ICAgICAgICAgICAgLy8gRGlyZWN0bHkgdXBkYXRlIHRoZSBnYW1lIHN0YXRlIHdpdGggZnVsZmlsbGVkIGFjdGlvblxuICAgODAyXHQgICAgICAgICAgICBkaXNwYXRjaCh7XG4gICA4MDNcdCAgICAgICAgICAgICAgdHlwZTogJ2dhbWUvc3RhcnRHYW1lQXN5bmMvZnVsZmlsbGVkJyxcbiAgIDgwNFx0ICAgICAgICAgICAgICBwYXlsb2FkOiB0cnVlLFxuICAgODA1XHQgICAgICAgICAgICAgIG1ldGE6IHsgcmVxdWVzdElkOiBkYXRhLnR5cGUsIGFyZzogdW5kZWZpbmVkIH1cbiAgIDgwNlx0ICAgICAgICAgICAgfSk7XG4gICA4MDdcdFxuICAgODA4XHQgICAgICAgICAgICAvLyBTdG9yZSBpbiBsb2NhbFN0b3JhZ2UgYXMgYSBiYWNrdXAgbWVjaGFuaXNtXG4gICA4MDlcdCAgICAgICAgICAgIHRyeSB7XG4gICA4MTBcdCAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2tla29wb2x5X2dhbWVfc3RhcnRlZCcsICd0cnVlJyk7XG4gICA4MTFcdCAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2tla29wb2x5X2dhbWVfaWQnLCB0aGlzLmdhbWVJZCk7XG4gICA4MTJcdCAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2tla29wb2x5X25hdmlnYXRpb25fdGltZXN0YW1wJywgRGF0ZS5ub3coKS50b1N0cmluZygpKTtcbiAgIDgxM1x0ICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgna2Vrb3BvbHlfZ2FtZV9zdGF0dXMnLCAnQUNUSVZFJyk7XG4gICA4MTRcdCAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgIDgxNVx0ICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tSRUNPVkVSRURdIENvdWxkIG5vdCB1c2UgbG9jYWxTdG9yYWdlOicsIGUpO1xuICAgODE2XHQgICAgICAgICAgICB9XG4gICA4MTdcdFxuICAgODE4XHQgICAgICAgICAgICAvLyBTZXQgdXAgcmV0cnkgbWVjaGFuaXNtIHRvIGVuc3VyZSBnYW1lIGJvYXJkIGFwcGVhcnNcbiAgIDgxOVx0ICAgICAgICAgICAgdGhpcy5zZXR1cEdhbWVTdGFydFJldHJ5Q2hlY2soKTtcbiAgIDgyMFx0XG4gICA4MjFcdCAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbUkVDT1ZFUkVEXSBHYW1lIHN0YXRlIHVwZGF0ZWQgdG8gQUNUSVZFIGZyb20gcmVjb3ZlcmVkICR7ZGF0YS50eXBlfSBtZXNzYWdlYCk7XG4gICA4MjJcdCAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbUkVDT1ZFUkVEXSBQbGF5ZXIgJHt0aGlzLnBsYXllcklkfSBwcm9jZXNzZWQgcmVjb3ZlcmVkICR7ZGF0YS50eXBlfSBldmVudC4gQ3VycmVudCBnYW1lIHN0YXRlOmAsIHtcbiAgIDgyM1x0ICAgICAgICAgICAgICBnYW1lU3RhcnRlZDogc3RvcmUuZ2V0U3RhdGUoKS5nYW1lLmdhbWVTdGFydGVkLFxuICAgODI0XHQgICAgICAgICAgICAgIGdhbWVQaGFzZTogc3RvcmUuZ2V0U3RhdGUoKS5nYW1lLmdhbWVQaGFzZSxcbiAgIDgyNVx0ICAgICAgICAgICAgICBzdGF0dXM6IHN0b3JlLmdldFN0YXRlKCkuZ2FtZS5zdGF0dXNcbiAgIDgyNlx0ICAgICAgICAgICAgfSk7XG4gICA4MjdcdFxuICAgODI4XHQgICAgICAgICAgICAvLyBSZXF1ZXN0IHVwZGF0ZWQgZ2FtZSBzdGF0ZSBhbmQgcGxheWVyIGxpc3RcbiAgIDgyOVx0ICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICA4MzBcdCAgICAgICAgICAgICAgaWYgKHRoaXMuc29ja2V0ICYmIHRoaXMuc29ja2V0LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOKSB7XG4gICA4MzFcdCAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW1JFQ09WRVJFRF0gUmVxdWVzdGluZyB1cGRhdGVkIGdhbWUgc3RhdGUgYW5kIHBsYXllciBsaXN0Jyk7XG4gICA4MzJcdCAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlKCdnZXRfZ2FtZV9zdGF0ZScsIHsgZnVsbDogdHJ1ZSB9KTtcbiAgIDgzM1x0ICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2UoJ2dldF9hY3RpdmVfcGxheWVycycsIHt9KTtcbiAgIDgzNFx0ICAgICAgICAgICAgICB9XG4gICA4MzVcdCAgICAgICAgICAgIH0sIDUwMCk7XG4gICA4MzZcdCAgICAgICAgICB9XG4gICA4MzdcdCAgICAgICAgICBicmVhaztcbiAgIDgzOFx0XG4gICA4MzlcdCAgICAgICAgY2FzZSAnaG9zdF92ZXJpZmljYXRpb25fc3VjY2Vzcyc6XG4gICA4NDBcdCAgICAgICAgICBjb25zb2xlLmxvZygnW1JFQ09WRVJFRF0gSG9zdCB2ZXJpZmljYXRpb24gc3VjY2VzcyBtZXNzYWdlIHJlY292ZXJlZCcpO1xuICAgODQxXHQgICAgICAgICAgLy8gVGhlIGhvc3Qgd2FzIHZlcmlmaWVkLCBub3cgd2UgY2FuIHByb2NlZWQgd2l0aCBnYW1lIHN0YXJ0IGxvZ2ljXG4gICA4NDJcdCAgICAgICAgICAvLyBUaGlzIGlzIGhhbmRsZWQgYXV0b21hdGljYWxseSBzaW5jZSB0aGUgZ2FtZTpzdGFydCBtZXNzYWdlIHNob3VsZCBmb2xsb3dcbiAgIDg0M1x0ICAgICAgICAgIGJyZWFrO1xuICAgODQ0XHRcbiAgIDg0NVx0ICAgICAgICBkZWZhdWx0OlxuICAgODQ2XHQgICAgICAgICAgY29uc29sZS5sb2coJ1VuaGFuZGxlZCByZWNvdmVyZWQgbWVzc2FnZSB0eXBlOicsIGRhdGEudHlwZSk7XG4gICA4NDdcdCAgICAgIH1cbiAgIDg0OFx0ICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICA4NDlcdCAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHByb2Nlc3NpbmcgcmVjb3ZlcmVkIG1lc3NhZ2U6JywgZXJyb3IpO1xuICAgODUwXHQgICAgfVxuICAgODUxXHQgIH07XG4gICA4NTJcdFxuICAgODUzXHQgIC8vIEVuaGFuY2VkIGdhbWUgc3RhdGUgaGFuZGxlciB3aXRoIHBhcnRpYWwgdXBkYXRlIHN1cHBvcnQgYW5kIHJldHJ5IG1lY2hhbmlzbVxuICAgODU0XHQgIGhhbmRsZUdhbWVTdGF0ZSA9IChnYW1lU3RhdGUpID0+IHtcbiAgIDg1NVx0ICAgIGNvbnN0IHsgZGlzcGF0Y2ggfSA9IHN0b3JlO1xuICAgODU2XHQgICAgY29uc29sZS5sb2coJ1tIQU5ETEVfR0FNRV9TVEFURV0gUHJvY2Vzc2luZyBnYW1lIHN0YXRlOicsIGdhbWVTdGF0ZSk7XG4gICA4NTdcdFxuICAgODU4XHQgICAgLy8gVHJhY2sgaWYgdGhpcyBpcyBhIHBhcnRpYWwgdXBkYXRlXG4gICA4NTlcdCAgICBjb25zdCBpc1BhcnRpYWxVcGRhdGUgPSBnYW1lU3RhdGUucGFydGlhbCA9PT0gdHJ1ZTtcbiAgIDg2MFx0ICAgIGNvbnNvbGUubG9nKGBbSEFORExFX0dBTUVfU1RBVEVdIFVwZGF0ZSB0eXBlOiAke2lzUGFydGlhbFVwZGF0ZSA/ICdQYXJ0aWFsJyA6ICdGdWxsJ31gKTtcbiAgIDg2MVx0XG4gICA4NjJcdCAgICAvLyBQcm9jZXNzIGJhc2ljIGdhbWUgc3RhdGUgcHJvcGVydGllc1xuICAgODYzXHQgICAgLy8gV2Ugbm8gbG9uZ2VyIG5lZWQgdG8gdXBkYXRlIHRoZSBzbGljZXMvZ2FtZVNsaWNlIHByb3BlcnRpZXNcbiAgIDg2NFx0ICAgIC8vIEluc3RlYWQsIHVwZGF0ZSB0aGUgbWFpbiBnYW1lU2xpY2Ugd2l0aCBlcXVpdmFsZW50IGluZm9ybWF0aW9uXG4gICA4NjVcdCAgICBpZiAoZ2FtZVN0YXRlLmdhbWVJZCkge1xuICAgODY2XHQgICAgICBkaXNwYXRjaChzZXRSb29tQ29kZShnYW1lU3RhdGUuZ2FtZUlkKSk7XG4gICA4NjdcdCAgICB9XG4gICA4NjhcdCAgICBpZiAoZ2FtZVN0YXRlLnN0YXR1cykge1xuICAgODY5XHQgICAgICAvLyBNYXAgdGhlIHN0YXR1cyB0byB0aGUgYXBwcm9wcmlhdGUgZ2FtZVBoYXNlXG4gICA4NzBcdCAgICAgIGlmIChnYW1lU3RhdGUuc3RhdHVzID09PSAnQUNUSVZFJykge1xuICAgODcxXHQgICAgICAgIGRpc3BhdGNoKHN5bmNHYW1lU3RhdHVzKCdBQ1RJVkUnKSk7XG4gICA4NzJcdCAgICAgIH0gZWxzZSBpZiAoZ2FtZVN0YXRlLnN0YXR1cyA9PT0gJ0NPTVBMRVRFRCcpIHtcbiAgIDg3M1x0ICAgICAgICBkaXNwYXRjaChzZXRHYW1lUGhhc2UoJ2VuZGVkJykpO1xuICAgODc0XHQgICAgICB9XG4gICA4NzVcdCAgICB9XG4gICA4NzZcdCAgICBpZiAoZ2FtZVN0YXRlLmN1cnJlbnRUdXJuKSB7XG4gICA4NzdcdCAgICAgIGRpc3BhdGNoKHNldEN1cnJlbnRQbGF5ZXIoZ2FtZVN0YXRlLmN1cnJlbnRUdXJuKSk7XG4gICA4NzhcdCAgICB9XG4gICA4NzlcdFxuICAgODgwXHQgICAgLy8gUHJvY2VzcyBnYW1lSW5mbyBpZiBhdmFpbGFibGVcbiAgIDg4MVx0ICAgIGlmIChnYW1lU3RhdGUuZ2FtZUluZm8pIHtcbiAgIDg4Mlx0ICAgICAgY29uc29sZS5sb2coJ1tIQU5ETEVfR0FNRV9TVEFURV0gUHJvY2Vzc2luZyBnYW1lSW5mbzonLCBnYW1lU3RhdGUuZ2FtZUluZm8pO1xuICAgODgzXHQgICAgICBkaXNwYXRjaChzZXRHYW1lSW5mbyhnYW1lU3RhdGUuZ2FtZUluZm8pKTtcbiAgIDg4NFx0XG4gICA4ODVcdCAgICAgIC8vIFVwZGF0ZSBob3N0IElEIGlmIHByZXNlbnQgaW4gZ2FtZUluZm8gLSBzZXJ2ZXIgaXMgdGhlIHNvdXJjZSBvZiB0cnV0aFxuICAgODg2XHQgICAgICBpZiAoZ2FtZVN0YXRlLmdhbWVJbmZvLmhvc3RJZCkge1xuICAgODg3XHQgICAgICAgIGNvbnNvbGUubG9nKCdbSEFORExFX0dBTUVfU1RBVEVdIFNldHRpbmcgaG9zdCBJRCBmcm9tIGdhbWVJbmZvOicsIGdhbWVTdGF0ZS5nYW1lSW5mby5ob3N0SWQpO1xuICAgODg4XHQgICAgICAgIGRpc3BhdGNoKHNldEhvc3QoZ2FtZVN0YXRlLmdhbWVJbmZvLmhvc3RJZCkpO1xuICAgODg5XHRcbiAgIDg5MFx0ICAgICAgICAvLyBVcGRhdGUgaXNIb3N0IGZsYWcgZm9yIGFsbCBwbGF5ZXJzIGJhc2VkIG9uIGhvc3RJZFxuICAgODkxXHQgICAgICAgIHRoaXMudXBkYXRlUGxheWVyc0hvc3RTdGF0dXMoZ2FtZVN0YXRlLmdhbWVJbmZvLmhvc3RJZCk7XG4gICA4OTJcdCAgICAgIH1cbiAgIDg5M1x0ICAgIH1cbiAgIDg5NFx0XG4gICA4OTVcdCAgICAvLyBDaGVjayBpZiBnYW1lIHN0YXRlIGluZGljYXRlcyB0aGUgZ2FtZSBoYXMgc3RhcnRlZFxuICAgODk2XHQgICAgaWYgKGdhbWVTdGF0ZS5zdGF0dXMgPT09ICdBQ1RJVkUnIHx8XG4gICA4OTdcdCAgICAgICAgKGdhbWVTdGF0ZS5nYW1lSW5mbyAmJiBnYW1lU3RhdGUuZ2FtZUluZm8uZ2FtZVN0YXJ0ZWQgPT09IHRydWUpIHx8XG4gICA4OThcdCAgICAgICAgKGdhbWVTdGF0ZS5nYW1lSW5mbyAmJiBnYW1lU3RhdGUuZ2FtZUluZm8uc3RhdHVzID09PSAnQUNUSVZFJykgfHxcbiAgIDg5OVx0ICAgICAgICAoZ2FtZVN0YXRlLmdhbWVTdGFydGVkID09PSB0cnVlKSB8fFxuICAgOTAwXHQgICAgICAgIChnYW1lU3RhdGUuZ2FtZVBoYXNlID09PSAncGxheWluZycpKSB7XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAyNjgyXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDEza0RvZ01tWFlHRDZpOHRRYVg5UXlEIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL2hvbWUvbWcvRGVza3RvcC9LRUtFTFNfR0FNRV9WMiIsImZvbGRlclJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0wM1QwMzowNjo0Ny41ODJaIiwicmVzcG9uc2VfdGV4dCI6IkxldCdzIGZpbmQgdGhlIGBoYW5kbGVEaWNlUm9sbGVkYCBmdW5jdGlvbiBpbiB0aGUgc29ja2V0U2VydmljZTpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic2VudCIsInJlcXVlc3RfaWQiOiJ0ZW1wLWZlLTdhMWMwM2Y1LTI0NjMtNDMxZC1hZGMxLTBjMWFmZTU4YWVlZSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBrZWtvcG9seS1mcm9udGVuZC9zcmMvc2VydmljZXMvc29ja2V0U2VydmljZS5qczpcbiAgMTMwMFx0ICB9O1xuICAxMzAxXHRcbiAgMTMwMlx0ICBoYW5kbGVQbGF5ZXJNb3ZlZCA9ICh7IHBsYXllcklkLCBwb3NpdGlvbiB9KSA9PiB7XG4gIDEzMDNcdCAgICBzdG9yZS5kaXNwYXRjaCh1cGRhdGVQbGF5ZXJQb3NpdGlvbih7IHBsYXllcklkLCBwb3NpdGlvbiB9KSk7XG4gIDEzMDRcdCAgfTtcbiAgMTMwNVx0XG4gIDEzMDZcdCAgaGFuZGxlUGxheWVyQmFsYW5jZSA9ICh7IHBsYXllcklkLCBhbW91bnQsIG9wZXJhdGlvbiB9KSA9PiB7XG4gIDEzMDdcdCAgICBzdG9yZS5kaXNwYXRjaCh1cGRhdGVQbGF5ZXJCYWxhbmNlKHsgcGxheWVySWQsIGFtb3VudCwgb3BlcmF0aW9uIH0pKTtcbiAgMTMwOFx0ICB9O1xuICAxMzA5XHRcbiAgMTMxMFx0ICBoYW5kbGVQcm9wZXJ0eU93bmVyID0gKHsgcHJvcGVydHlJZCwgb3duZXJJZCwgcHJldmlvdXNPd25lcklkIH0pID0+IHtcbiAgMTMxMVx0ICAgIGNvbnN0IHsgZGlzcGF0Y2ggfSA9IHN0b3JlO1xuICAxMzEyXHQgICAgY29uc29sZS5sb2coYFtQUk9QRVJUWV0gUHJvcGVydHkgJHtwcm9wZXJ0eUlkfSBvd25lcnNoaXAgY2hhbmdlZCBmcm9tICR7cHJldmlvdXNPd25lcklkfSB0byAke293bmVySWR9YCk7XG4gIDEzMTNcdFxuICAxMzE0XHQgICAgLy8gR2V0IHByb3BlcnR5IG5hbWUgZnJvbSBib2FyZENvbmZpZ1xuICAxMzE1XHQgICAgY29uc3QgeyBjb25maWdCb2FyZFNwYWNlcyB9ID0gcmVxdWlyZSgnLi4vY29yZS9tb2RlbHMvYm9hcmRDb25maWcnKTtcbiAgMTMxNlx0ICAgIGNvbnN0IHByb3BlcnR5U3BhY2UgPSBjb25maWdCb2FyZFNwYWNlcy5maW5kKHMgPT4gcy5pZCA9PT0gcHJvcGVydHlJZCk7XG4gIDEzMTdcdCAgICBjb25zdCBwcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eVNwYWNlID8gcHJvcGVydHlTcGFjZS5uYW1lIDogYFByb3BlcnR5ICR7cHJvcGVydHlJZH1gO1xuICAxMzE4XHRcbiAgMTMxOVx0ICAgIC8vIFVwZGF0ZSBwcm9wZXJ0eSBvd25lciBpbiB0aGUgc3RvcmVcbiAgMTMyMFx0ICAgIGRpc3BhdGNoKGJ1eVByb3BlcnR5KHtcbiAgMTMyMVx0ICAgICAgcGxheWVySWQ6IG93bmVySWQsXG4gIDEzMjJcdCAgICAgIHByb3BlcnR5SWQ6IHByb3BlcnR5SWRcbiAgMTMyM1x0ICAgIH0pKTtcbiAgMTMyNFx0XG4gIDEzMjVcdCAgICAvLyBBZGQgYSBnYW1lIG1lc3NhZ2UgYWJvdXQgdGhlIHByb3BlcnR5IHB1cmNoYXNlXG4gIDEzMjZcdCAgICBpZiAob3duZXJJZCkge1xuICAxMzI3XHQgICAgICBjb25zdCBjdXJyZW50U3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAxMzI4XHQgICAgICBjb25zdCBwbGF5ZXIgPSBjdXJyZW50U3RhdGUucGxheWVycy5wbGF5ZXJzW293bmVySWRdO1xuICAxMzI5XHQgICAgICBjb25zdCBwbGF5ZXJOYW1lID0gcGxheWVyID8gcGxheWVyLm5hbWUgOiBgUGxheWVyICR7b3duZXJJZH1gO1xuICAxMzMwXHRcbiAgMTMzMVx0ICAgICAgZGlzcGF0Y2goYWRkR2FtZU1lc3NhZ2Uoe1xuICAxMzMyXHQgICAgICAgIHR5cGU6ICdQUk9QRVJUWScsXG4gIDEzMzNcdCAgICAgICAgcGxheWVySWQ6IG93bmVySWQsXG4gIDEzMzRcdCAgICAgICAgY29udGVudDogYCR7cGxheWVyTmFtZX0gcHVyY2hhc2VkICR7cHJvcGVydHlOYW1lfWAsXG4gIDEzMzVcdCAgICAgICAgZGF0YToge1xuICAxMzM2XHQgICAgICAgICAgcHJvcGVydHlJZCxcbiAgMTMzN1x0ICAgICAgICAgIHByb3BlcnR5TmFtZSxcbiAgMTMzOFx0ICAgICAgICAgIHByZXZpb3VzT3duZXJJZFxuICAxMzM5XHQgICAgICAgIH0sXG4gIDEzNDBcdCAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpXG4gIDEzNDFcdCAgICAgIH0pKTtcbiAgMTM0Mlx0ICAgIH1cbiAgMTM0M1x0ICB9O1xuICAxMzQ0XHRcbiAgMTM0NVx0ICBoYW5kbGVQbGF5ZXJDYXJkID0gKHsgcGxheWVySWQsIGNhcmQsIGFjdGlvbiB9KSA9PiB7XG4gIDEzNDZcdCAgICBjb25zdCB7IGRpc3BhdGNoIH0gPSBzdG9yZTtcbiAgMTM0N1x0ICAgIGlmIChhY3Rpb24gPT09ICdhZGQnKSB7XG4gIDEzNDhcdCAgICAgIGRpc3BhdGNoKGFkZFBsYXllckNhcmQoeyBwbGF5ZXJJZCwgY2FyZCB9KSk7XG4gIDEzNDlcdCAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gJ3JlbW92ZScpIHtcbiAgMTM1MFx0ICAgICAgZGlzcGF0Y2gocmVtb3ZlUGxheWVyQ2FyZCh7IHBsYXllcklkLCBjYXJkSWQ6IGNhcmQuY2FyZElkIH0pKTtcbiAgMTM1MVx0ICAgIH1cbiAgMTM1Mlx0ICB9O1xuICAxMzUzXHRcbiAgMTM1NFx0ICBoYW5kbGVQbGF5ZXJQcm9wZXJ0eSA9ICh7IHBsYXllcklkLCBwcm9wZXJ0eUlkLCBhY3Rpb24gfSkgPT4ge1xuICAxMzU1XHQgICAgY29uc3QgeyBkaXNwYXRjaCB9ID0gc3RvcmU7XG4gIDEzNTZcdCAgICBpZiAoYWN0aW9uID09PSAnYWRkJykge1xuICAxMzU3XHQgICAgICBkaXNwYXRjaChhZGRQbGF5ZXJQcm9wZXJ0eSh7IHBsYXllcklkLCBwcm9wZXJ0eUlkIH0pKTtcbiAgMTM1OFx0ICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSAncmVtb3ZlJykge1xuICAxMzU5XHQgICAgICBkaXNwYXRjaChyZW1vdmVQbGF5ZXJQcm9wZXJ0eSh7IHBsYXllcklkLCBwcm9wZXJ0eUlkIH0pKTtcbiAgMTM2MFx0ICAgIH1cbiAgMTM2MVx0ICB9O1xuICAxMzYyXHRcbiAgMTM2M1x0ICBoYW5kbGVQcm9wZXJ0eVVwZGF0ZWQgPSAoeyBwcm9wZXJ0eUlkLCB1cGRhdGVzIH0pID0+IHtcbiAgMTM2NFx0ICAgIHN0b3JlLmRpc3BhdGNoKHVwZGF0ZVByb3BlcnR5KHsgcHJvcGVydHlJZCwgdXBkYXRlcyB9KSk7XG4gIDEzNjVcdCAgfTtcbiAgMTM2Nlx0XG4gIDEzNjdcdCAgLy8gVGhpcyBmdW5jdGlvbiBpcyBhIGR1cGxpY2F0ZSBvZiB0aGUgb25lIGFib3ZlIGFuZCBoYXMgYmVlbiBtZXJnZWRcbiAgMTM2OFx0XG4gIDEzNjlcdCAgaGFuZGxlUHJvcGVydHlFbmdhZ2VtZW50cyA9ICh7IHByb3BlcnR5SWQsIGFjdGlvbiB9KSA9PiB7XG4gIDEzNzBcdCAgICBjb25zdCB7IGRpc3BhdGNoIH0gPSBzdG9yZTtcbiAgMTM3MVx0ICAgIGlmIChhY3Rpb24gPT09ICdhZGQnKSB7XG4gIDEzNzJcdCAgICAgIGRpc3BhdGNoKGFkZEVuZ2FnZW1lbnQoeyBwcm9wZXJ0eUlkIH0pKTtcbiAgMTM3M1x0ICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSAncmVtb3ZlJykge1xuICAxMzc0XHQgICAgICBkaXNwYXRjaChyZW1vdmVFbmdhZ2VtZW50KHsgcHJvcGVydHlJZCB9KSk7XG4gIDEzNzVcdCAgICB9XG4gIDEzNzZcdCAgfTtcbiAgMTM3N1x0XG4gIDEzNzhcdCAgaGFuZGxlUHJvcGVydHlDaGVja21hcmsgPSAoeyBwcm9wZXJ0eUlkIH0pID0+IHtcbiAgMTM3OVx0ICAgIHN0b3JlLmRpc3BhdGNoKHRvZ2dsZUJsdWVDaGVja21hcmsoeyBwcm9wZXJ0eUlkIH0pKTtcbiAgMTM4MFx0ICB9O1xuICAxMzgxXHRcbiAgMTM4Mlx0ICBoYW5kbGVQcm9wZXJ0eU1vcnRnYWdlID0gKHsgcHJvcGVydHlJZCB9KSA9PiB7XG4gIDEzODNcdCAgICBzdG9yZS5kaXNwYXRjaCh0b2dnbGVNb3J0Z2FnZSh7IHByb3BlcnR5SWQgfSkpO1xuICAxMzg0XHQgIH07XG4gIDEzODVcdFxuICAxMzg2XHQgIGhhbmRsZVByb3BlcnR5RWZmZWN0ID0gKHsgcHJvcGVydHlJZCwgZWZmZWN0IH0pID0+IHtcbiAgMTM4N1x0ICAgIHN0b3JlLmRpc3BhdGNoKGFkZFNwZWNpYWxFZmZlY3QoeyBwcm9wZXJ0eUlkLCBlZmZlY3QgfSkpO1xuICAxMzg4XHQgIH07XG4gIDEzODlcdFxuICAxMzkwXHQgIGhhbmRsZURpY2VSb2xsZWQgPSAoZGF0YSkgPT4ge1xuICAxMzkxXHQgICAgY29uc3QgeyBkaXNwYXRjaCB9ID0gc3RvcmU7XG4gIDEzOTJcdFxuICAxMzkzXHQgICAgLy8gQWx3YXlzIGdldCBkaWNlIHZhbHVlcyBhcyBhbiBhcnJheSBhbmQgZW5zdXJlIHRoZXkgYXJlIHZhbGlkIG51bWJlcnNcbiAgMTM5NFx0ICAgIGxldCBkaWNlID0gQXJyYXkuaXNBcnJheShkYXRhLmRpY2UpID8gZGF0YS5kaWNlIDogW2RhdGEuZGljZTEsIGRhdGEuZGljZTJdO1xuICAxMzk1XHRcbiAgMTM5Nlx0ICAgIC8vIFZhbGlkYXRlIGRpY2UgdmFsdWVzIC0gZW5zdXJlIHRoZXkgYXJlIG51bWJlcnMgYmV0d2VlbiAxLTZcbiAgMTM5N1x0ICAgIGRpY2UgPSBkaWNlLm1hcCh2YWx1ZSA9PiB7XG4gIDEzOThcdCAgICAgIC8vIENvbnZlcnQgdG8gbnVtYmVyIGlmIGl0J3MgYSBzdHJpbmdcbiAgMTM5OVx0ICAgICAgY29uc3QgbnVtVmFsdWUgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gcGFyc2VJbnQodmFsdWUsIDEwKSA6IHZhbHVlO1xuICAxNDAwXHRcblRvdGFsIGxpbmVzIGluIGZpbGU6IDI2ODJcbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVBKVWt1NFdOY3c5ZkpHdWhncHRzQXcifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvaG9tZS9tZy9EZXNrdG9wL0tFS0VMU19HQU1FX1YyIiwiZm9sZGVyUm9vdCI6Ii9ob21lL21nL0Rlc2t0b3AvS0VLRUxTX0dBTUVfVjIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTAzVDAzOjA2OjUxLjkwMloifV0sImZlZWRiYWNrU3RhdGVzIjp7InRlbXAtZmUtZWJiNGFhOTUtYzM2Yy00OWQxLThhYjEtZWFhZjhiZjQwNDVlIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0wMjZhZGNkMi1kOTcxLTRjOWMtYjM3OC1jZjY3MDI2MGQ0ZGMiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTFlNDdhNmUyLWEyY2ItNDc2Ni05ZjU4LTYyNmU2NzQwY2RmZCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtYmUzMjVhNWMtMTVlOS00NjZkLWJiOWYtNzk4NGEzOTQ3NjdkIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0zNjU1MDQ3Ny0xMDhiLTQxZmMtYjJiYS02YmNhYzQ2ZDE5Y2YiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTRhZDFhN2JhLWRjMjctNGI5OS1iYjYwLTE2MzVlNzQ4ODJjMiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtYzcyNjZhMDAtNmY5Yy00MTQ5LWFjYTAtMzVjMWQyYTBiNzllIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0yY2I1ZTIzYy0wOWUyLTRmNmQtYjkzMi1iYjYwODkzNzQyYjEiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTBmMDBlYjQyLTY2NGQtNDc0OC1hYjFlLWUyOWNhYWJhNDIyNCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNTVmODUyMGUtNTAyZS00ZjMzLWI3ZmMtNWY1MjYzMDU0MjcxIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1lNjc4M2I5YS0zYTRkLTQ5OTYtYTExNS03NjdlNGQ0NDhlODIiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWM2OGMwNjE5LWFhOTEtNGVhMy05MjFlLTNlZjIxMjIwZDM1ZCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNDJiODIzZWItNTAwYS00MGU0LWI1MmYtZmQ5MzVlZTkyNWEzIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS05ZjQwYWRiZS00MDUzLTQ5OGItYTYzNC1hZDdkMzhiOTIwZWEiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWZiODJmZTUwLTBjNTktNGY5NS04ZmE4LTdmN2E2YzY1MWM0YSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtMDFmYWI0MmMtNzc2NS00OWJlLWE1OTMtMGE5ZjIzYzliODg5Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS00MGU1YmFhOC03ZmQzLTRjYTYtODA3YS1mYjhmODU2NTI5MWYiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTRiZThhOTM4LWQzMmUtNDMzMS1iZGY3LWE5ZjU4YTM1MDA2OSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZmM2ODczNWUtYjI2MC00MjJhLTkyMDMtNTYxZWE1ZmRkZTdjIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0yMzE1YjgwZS1iMzk3LTRhYzktOTk5Ni03NWY2YTAwNDE0MjAiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWI4NzM1NzVjLTYyMjQtNGJmZC05MjRiLWExYjY3NGM3MjE4NSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtYzc2NTM3OTQtOTk1Ni00MWZhLTk5YTItZjg0YTYyMmI5Y2I5Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS01YmRlZjRhYS1lZjU1LTRkMzMtOGYzZi01NTRhZGYxYjY0YzUiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTVlZDNhOGU3LTQ4ZmItNDA5ZC1iNzY4LTQ2NmY2OWMyYWQ5MSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZDdmYjE3YmQtNzRmNC00ZTdiLThhOWQtNGU3ODk2ZTlhMWRkIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS00NDQwZGU1YS1kMmE1LTQyMWQtOTAzOS00MDI0YjRmYTc0MzIiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTBmYjEzYTQ3LTk0NmItNGFkZC1iMTc3LWYyOGEyZWRkYjU5ZiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtMGIxZTA5N2YtMWI4OC00ZmEyLTkxYWYtMTcwOWIxMGJlOTUwIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0wZTE4OTJkOC05MTdjLTQ5ZjQtYWRmNC1iMGRjMTBkMjNkNmIiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWQyYzcyYTZlLTE5NzQtNGQ3Ni1hY2I2LTAyZGQ1YjFlZGNhMSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtMWIwMjkwYzQtYTM2Ni00MDA4LWJmYjQtM2Q1NjNmMzEzMDQxIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1jMDk1YmQ4ZS1kYjg1LTQwNDEtYmI4ZC03MGRmMDdjNzM4YzAiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTU1ZGNkMGI3LTA2N2MtNDkwNC1hNjUwLWI0ZjQ0OTgzZTFmYSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZDExYjcwOWQtZDhlNS00ZTFjLTgyNDgtOTI5NWQwNmRiNzg5Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1mYzZmM2Q3Mi1jZjk0LTRmMjctYjVlNy0yMWI1ZjE0ZWVlZjEiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTI0Yjg1OGFhLTc5ZTAtNDJkYS1iZjc5LWJhMWZlZjU1MTc5YiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtOTM2NTQ0YTktZjA4OC00MWI0LWFjNWEtM2MwN2JiMDAwODg3Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS03YTFjMDNmNS0yNDYzLTQzMWQtYWRjMS0wYzFhZmU1OGFlZWUiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9fSwidG9vbFVzZVN0YXRlcyI6eyIzY2ViYjgyZi1iNWE1LTQ1M2QtOTFlNy1mNzBhZTNjOTk1N2U7dG9vbHVfdnJ0eF8wMUFrRXdqMVZMN3pBTTRuZEtweUpmWVciOnsicmVxdWVzdElkIjoiM2NlYmI4MmYtYjVhNS00NTNkLTkxZTctZjcwYWUzYzk5NTdlIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMUFrRXdqMVZMN3pBTTRuZEtweUpmWVciLCJwaGFzZSI6NiwicmVzdWx0Ijp7ImlzRXJyb3IiOnRydWUsInRleHQiOiJUb29sIFwiY29kZWJhc2UtcmV0cmlldmFsXCIgZG9lcyBub3QgZXhpc3QifX0sIjdiZTJlYzdhLTljOWUtNDI5YS04MmUxLTA3NGViNGFhYTI0YTt0b29sdV92cnR4XzAxS2hXRnZBN2J0UmJSOVR5ZUNIYlRaVyI6eyJyZXF1ZXN0SWQiOiI3YmUyZWM3YS05YzllLTQyOWEtODJlMS0wNzRlYjRhYWEyNGEiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxS2hXRnZBN2J0UmJSOVR5ZUNIYlRaVyIsInBoYXNlIjo2LCJyZXN1bHQiOnsiaXNFcnJvciI6dHJ1ZSwidGV4dCI6IlRvb2wgXCJsYXVuY2gtcHJvY2Vzc1wiIGRvZXMgbm90IGV4aXN0In19LCI1M2ZkNmVjYy02Y2M3LTQ3MmQtYTM1OC1iNGEzM2M2ZWMwYmM7dG9vbHVfdnJ0eF8wMUhCOUdpWTV4VTdRNEJtM1YyYnZWeUQiOnsicmVxdWVzdElkIjoiNTNmZDZlY2MtNmNjNy00NzJkLWEzNTgtYjRhMzNjNmVjMGJjIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMUhCOUdpWTV4VTdRNEJtM1YyYnZWeUQiLCJwaGFzZSI6NiwicmVzdWx0Ijp7ImlzRXJyb3IiOnRydWUsInRleHQiOiJUb29sIFwiY29kZWJhc2UtcmV0cmlldmFsXCIgZG9lcyBub3QgZXhpc3QifX0sImFmYTg0Yjk5LWM0OTQtNDIwOS1hMjk0LTEyYzNlYzhiYTcwZjt0b29sdV92cnR4XzAxUUNpaWZmc01vNkVZckRFdVM2ZFhocSI6eyJyZXF1ZXN0SWQiOiJhZmE4NGI5OS1jNDk0LTQyMDktYTI5NC0xMmMzZWM4YmE3MGYiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxUUNpaWZmc01vNkVZckRFdVM2ZFhocSIsInBoYXNlIjo2LCJyZXN1bHQiOnsiaXNFcnJvciI6dHJ1ZSwidGV4dCI6IlRvb2wgXCJzdHItcmVwbGFjZS1lZGl0b3JcIiBkb2VzIG5vdCBleGlzdCJ9fSwiMDE1MDg0YzQtYmI2Yi00OTUyLTk2OGMtZDU1ZTRjYjhiMDhkO3Rvb2x1X3ZydHhfMDFUbWFQRG9nRGhnUTl6TVpoYXJEQWsxIjp7InJlcXVlc3RJZCI6IjAxNTA4NGM0LWJiNmItNDk1Mi05NjhjLWQ1NWU0Y2I4YjA4ZCIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFUbWFQRG9nRGhnUTl6TVpoYXJEQWsxIiwicGhhc2UiOjYsInJlc3VsdCI6eyJpc0Vycm9yIjp0cnVlLCJ0ZXh0IjoiVG9vbCBcImxpc3QtcHJvY2Vzc2VzXCIgZG9lcyBub3QgZXhpc3QifX0sIjVjNGVjNjc2LWE3YTctNDRkNy1iZmM0LWRlMTRlMDY5NGFhMDt0b29sdV92cnR4XzAxOHk1eWduS3BwUng0WXdzUUt5Wk43NCI6eyJyZXF1ZXN0SWQiOiI1YzRlYzY3Ni1hN2E3LTQ0ZDctYmZjNC1kZTE0ZTA2OTRhYTAiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxOHk1eWduS3BwUng0WXdzUUt5Wk43NCIsInBoYXNlIjo2LCJyZXN1bHQiOnsiaXNFcnJvciI6dHJ1ZSwidGV4dCI6IlRvb2wgXCJ3ZWItc2VhcmNoXCIgZG9lcyBub3QgZXhpc3QifX0sImFlMDNhMmY4LTc0ZjctNGE4OC1hOTI5LTBhOTBkMTdmZWExNDt0b29sdV92cnR4XzAxUmlqN0Y0cEVSbkR2YXllQmdjVEVjUCI6eyJyZXF1ZXN0SWQiOiJhZTAzYTJmOC03NGY3LTRhODgtYTkyOS0wYTkwZDE3ZmVhMTQiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxUmlqN0Y0cEVSbkR2YXllQmdjVEVjUCIsInBoYXNlIjo2LCJyZXN1bHQiOnsiaXNFcnJvciI6dHJ1ZSwidGV4dCI6IlRvb2wgXCJzdHItcmVwbGFjZS1lZGl0b3JcIiBkb2VzIG5vdCBleGlzdCJ9fSwiZmY0OWQ0MDItZjNhMS00ODU2LTg5M2UtYmZkN2FmZTE2NzE5O3Rvb2x1X3ZydHhfMDFDUnBWZ2hiOHA5OE14RU5ZdDI1aGs0Ijp7InJlcXVlc3RJZCI6ImZmNDlkNDAyLWYzYTEtNDg1Ni04OTNlLWJmZDdhZmUxNjcxOSIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFDUnBWZ2hiOHA5OE14RU5ZdDI1aGs0IiwicGhhc2UiOjYsInJlc3VsdCI6eyJpc0Vycm9yIjp0cnVlLCJ0ZXh0IjoiVG9vbCBcImxhdW5jaC1wcm9jZXNzXCIgZG9lcyBub3QgZXhpc3QifX0sImY4MGExNzk4LTRkOTMtNGRhYS1hNzBhLTI5ZjcwNTFhMzlkYjt0b29sdV92cnR4XzAxMWFzM0FtZjZBNG5mbWpDNU1nQmdodSI6eyJyZXF1ZXN0SWQiOiJmODBhMTc5OC00ZDkzLTRkYWEtYTcwYS0yOWY3MDUxYTM5ZGIiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxMWFzM0FtZjZBNG5mbWpDNU1nQmdodSIsInBoYXNlIjo2LCJyZXN1bHQiOnsiaXNFcnJvciI6dHJ1ZSwidGV4dCI6IlRvb2wgXCJjb2RlYmFzZS1yZXRyaWV2YWxcIiBkb2VzIG5vdCBleGlzdCJ9fSwiODQwZmJmNTUtODhhMS00ODc2LThlNzgtYTA1MzkwYTZkMzRlO3Rvb2x1X3ZydHhfMDFQaHkzQ3E3UWtQWVI0Y2d5eXFWRnZvIjp7InJlcXVlc3RJZCI6Ijg0MGZiZjU1LTg4YTEtNDg3Ni04ZTc4LWEwNTM5MGE2ZDM0ZSIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFQaHkzQ3E3UWtQWVI0Y2d5eXFWRnZvIiwicGhhc2UiOjYsInJlc3VsdCI6eyJpc0Vycm9yIjp0cnVlLCJ0ZXh0IjoiVG9vbCBcInN0ci1yZXBsYWNlLWVkaXRvclwiIGRvZXMgbm90IGV4aXN0In19LCJjYzM3OWNkNS04ZGJhLTQwNTMtOTk5MC04YjVhNzhjNTdjNGE7dG9vbHVfdnJ0eF8wMUdvVzVWVG1IQnl3REV5dXZIQ0hEWWMiOnsicmVxdWVzdElkIjoiY2MzNzljZDUtOGRiYS00MDUzLTk5OTAtOGI1YTc4YzU3YzRhIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMUdvVzVWVG1IQnl3REV5dXZIQ0hEWWMiLCJwaGFzZSI6NiwicmVzdWx0Ijp7ImlzRXJyb3IiOnRydWUsInRleHQiOiJUb29sIFwibGF1bmNoLXByb2Nlc3NcIiBkb2VzIG5vdCBleGlzdCJ9fSwiYzY2ZDYzMmItMDMxMi00ZDMyLTk5NDgtZGY4Y2U3NTAwZGYxO3Rvb2x1X3ZydHhfMDFDNXlhTFE4R1dHYmRaRWZGaVdEazdDIjp7InJlcXVlc3RJZCI6ImM2NmQ2MzJiLTAzMTItNGQzMi05OTQ4LWRmOGNlNzUwMGRmMSIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFDNXlhTFE4R1dHYmRaRWZGaVdEazdDIiwicGhhc2UiOjYsInJlc3VsdCI6eyJpc0Vycm9yIjp0cnVlLCJ0ZXh0IjoiVG9vbCBcInNhdmUtZmlsZVwiIGRvZXMgbm90IGV4aXN0In19LCJjMTk3ODMyMi1hNzlhLTRmYjYtYTAyMy0xMDVjNDUzMmVlNWE7dG9vbHVfdnJ0eF8wMVBoeUNWdlBTVmFCRFhUaFZLdEVCYksiOnsicmVxdWVzdElkIjoiYzE5NzgzMjItYTc5YS00ZmI2LWEwMjMtMTA1YzQ1MzJlZTVhIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMVBoeUNWdlBTVmFCRFhUaFZLdEVCYksiLCJwaGFzZSI6NiwicmVzdWx0Ijp7ImlzRXJyb3IiOnRydWUsInRleHQiOiJUb29sIFwibGF1bmNoLXByb2Nlc3NcIiBkb2VzIG5vdCBleGlzdCJ9fSwiMTE3YzQxZGYtYTZkOC00NWJkLTgyNjAtNDc2MjEyZTM0YTczO3Rvb2x1X3ZydHhfMDFDclMxb1dmM0J1TnJialVMaVhOOFA2Ijp7InJlcXVlc3RJZCI6IjExN2M0MWRmLWE2ZDgtNDViZC04MjYwLTQ3NjIxMmUzNGE3MyIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFDclMxb1dmM0J1TnJialVMaVhOOFA2IiwicGhhc2UiOjYsInJlc3VsdCI6eyJpc0Vycm9yIjp0cnVlLCJ0ZXh0IjoiVG9vbCBcInN0ci1yZXBsYWNlLWVkaXRvclwiIGRvZXMgbm90IGV4aXN0In19LCIxNTljY2QyZS1hZjUwLTQ0NjctYjg0My03MjE3Mzc3ZDg3YjU7dG9vbHVfdnJ0eF8wMVc2cEREWmFpMXhRVDFvazlzSzQzalMiOnsicmVxdWVzdElkIjoiMTU5Y2NkMmUtYWY1MC00NDY3LWI4NDMtNzIxNzM3N2Q4N2I1IiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMVc2cEREWmFpMXhRVDFvazlzSzQzalMiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBrZWtvcG9seS1mcm9udGVuZC9zcmMvY29tcG9uZW50cy9kaWNlL0RpY2VSb2xsZXIuanN4XG4uLi5cblxuICByZXR1cm4gKFxuICAgIDxtb3Rpb24uZGl2XG4gICAgICBhbmltYXRlPXt7XG4gICAgICAgIHJvdGF0ZVg6IGlzUm9sbGluZyA/IFswLCAzNjBdIDogMCxcbiAgICAgICAgcm90YXRlWTogaXNSb2xsaW5nID8gWzAsIDM2MF0gOiAwLFxuICAgICAgfX1cbiAgICAgIHRyYW5zaXRpb249e3tcbiAgICAgICAgZHVyYXRpb246IDAuNixcbiAgICAgICAgcmVwZWF0OiBpc1JvbGxpbmcgPyBJbmZpbml0eSA6IDAsXG4gICAgICAgIGVhc2U6IFwiZWFzZUluT3V0XCJcbiAgICAgIH19XG4gICAgPlxuICAgICAgPEJveFxuICAgICAgICB3aWR0aD1cIjYwcHhcIlxuICAgICAgICBoZWlnaHQ9XCI2MHB4XCJcbiAgICAgICAgYmc9XCJ3aGl0ZVwiXG4gICAgICAgIGJvcmRlclJhZGl1cz1cIm1kXCJcbiAgICAgICAgYm94U2hhZG93PVwibWRcIlxuICAgICAgICBwb3NpdGlvbj1cInJlbGF0aXZlXCJcbiAgICAgICAgZGlzcGxheT1cImZsZXhcIlxuICAgICAgICBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiXG4gICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICBib3JkZXI9XCIxcHggc29saWRcIlxuICAgICAgICBib3JkZXJDb2xvcj1cImdyYXkuMjAwXCJcbiAgICAgID5cbiAgICAgICAge2RvdHMubWFwKChkb3QsIGluZGV4KSA9PiAoXG4gICAgICAgICAgPEJveFxuICAgICAgICAgICAga2V5PXtpbmRleH1cbiAgICAgICAgICAgIHBvc2l0aW9uPVwiYWJzb2x1dGVcIlxuICAgICAgICAgICAgd2lkdGg9XCIxMnB4XCJcbiAgICAgICAgICAgIGhlaWdodD1cIjEycHhcIlxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzPVwiZnVsbFwiXG4gICAgICAgICAgICBiZz1cIiMzMzNcIlxuICAgICAgICAgICAgey4uLmdldERvdFBvc2l0aW9uKGRvdC5wb3NpdGlvbil9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSl9XG4gICAgICA8L0JveD5cbiAgICA8L21vdGlvbi5kaXY+XG4gICk7XG59O1xuLi4uXG5cbi8qKlxuICogRGljZVJvbGxlciBjb21wb25lbnRcbiAqIFNob3dzIHR3byBkaWNlIGFuZCBoYW5kbGVzIHJvbGxpbmcgbG9naWNcbiAqL1xuY29uc3QgRGljZVJvbGxlciA9ICh7IGlzQ3VycmVudFR1cm4gPSB0cnVlLCBvblJvbGwsIG9uR29Ub0phaWwgfSkgPT4ge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIFxuICAvLyBJbiBhIHJlYWwgaW1wbGVtZW50YXRpb24sIHdlIHdvdWxkIGdldCB0aGVzZSBmcm9tIFJlZHV4XG4gIC8vIGNvbnN0IGRpY2VWYWx1ZXMgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5nYW1lLmRpY2VWYWx1ZXMpO1xuICAvLyBjb25zdCBpc1JvbGxpbmcgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5nYW1lLmlzUm9sbGluZyk7XG4gIFxuICAvLyBGb3IgZGVtbyBwdXJwb3Nlc1xuICBjb25zdCBbZGljZVZhbHVlcywgc2V0RGljZVZhbHVlc10gPSB1c2VTdGF0ZShbMSwgMV0pO1xuICBjb25zdCBbaXNSb2xsaW5nLCBzZXRJc1JvbGxpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbcm9sbEhpc3RvcnksIHNldFJvbGxIaXN0b3J5XSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3QgW2NvbnNlY3V0aXZlRG91Ymxlcywgc2V0Q29uc2VjdXRpdmVEb3VibGVzXSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCB7IGlzT3Blbiwgb25PcGVuLCBvbkNsb3NlIH0gPSB1c2VEaXNjbG9zdXJlKCk7XG5cbiAgLy8gSGFuZGxlIHJvbGwgYnV0dG9uIGNsaWNrXG4gIGNvbnN0IGhhbmRsZVJvbGwgPSAoKSA9PiB7XG4gICAgaWYgKCFpc0N1cnJlbnRUdXJuIHx8IGlzUm9sbGluZykgcmV0dXJuO1xuICAgIFxuICAgIHNldElzUm9sbGluZyh0cnVlKTtcbiAgICBcbiAgICAvLyBJbiBhIHJlYWwgYXBwbGljYXRpb24sIHdlJ2QgZGlzcGF0Y2ggYW4gYWN0aW9uIHRvIHJvbGwgdGhlIGRpY2UgdmlhIHNvY2tldFxuICAgIC8vIGRpc3BhdGNoKHJvbGxEaWNlKCkpO1xuICAgIFxuICAgIC8vIEZvciBkZW1vIHB1cnBvc2VzLCBzaW11bGF0ZSBhIGRpY2Ugcm9sbCBsb2NhbGx5XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjb25zdCBkaWUxID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNikgKyAxO1xuICAgICAgY29uc3QgZGllMiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDYpICsgMTtcbiAgICAgIGNvbnN0IGlzRG91YmxlcyA9IGRpZTEgPT09IGRpZTI7XG4gICAgICBcbiAgICAgIHNldERpY2VWYWx1ZXMoW2RpZTEsIGRpZTJdKTtcbiAgICAgIFxuICAgICAgLy8gVXBkYXRlIGNvbnNlY3V0aXZlIGRvdWJsZXMgY291bnRcbiAgICAgIGlmIChpc0RvdWJsZXMpIHtcbiAgICAgICAgc2V0Q29uc2VjdXRpdmVEb3VibGVzKHByZXYgPT4gcHJldiArIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0Q29uc2VjdXRpdmVEb3VibGVzKDApO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBDaGVjayBmb3IgdGhyZWUgY29uc2VjdXRpdmUgZG91Ymxlc1xuICAgICAgaWYgKGNvbnNlY3V0aXZlRG91YmxlcyA9PT0gMiAmJiBpc0RvdWJsZXMpIHtcbiAgICAgICAgc2V0Q29uc2VjdXRpdmVEb3VibGVzKDApO1xuICAgICAgICBpZiAob25Hb1RvSmFpbCkge1xuICAgICAgICAgIG9uR29Ub0phaWwoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICBzZXRSb2xsSGlzdG9yeShwcmV2ID0+IFtcbiAgICAgICAgeyByb2xsOiBbZGllMSwgZGllMl0sIHN1bTogZGllMSArIGRpZTIsIGlzRG91YmxlcyB9LFxuICAgICAgICAuLi5wcmV2LnNsaWNlKDAsIDQpIC8vIEtlZXAgb25seSB0aGUgNSBtb3N0IHJlY2VudCByb2xsc1xuICAgICAgXSk7XG4gICAgICBzZXRJc1JvbGxpbmcoZmFsc2UpO1xuICAgICAgXG4gICAgICAvLyBDYWxsIHRoZSBvblJvbGwgY2FsbGJhY2sgd2l0aCB0aGUgZGljZSB2YWx1ZXNcbiAgICAgIGlmIChvblJvbGwpIHtcbiAgICAgICAgb25Sb2xsKGRpZTEsIGRpZTIsIGlzRG91Ymxlcyk7XG4gICAgICB9XG4uLi5cblxuICByZXR1cm4gKFxuICAgIDxCb3ggcD17NH0gYmc9XCJicmFuZC41MFwiIGJvcmRlclJhZGl1cz1cIm1kXCIgYm94U2hhZG93PVwic21cIj5cbiAgICAgIDxGbGV4IGp1c3RpZnk9XCJzcGFjZS1iZXR3ZWVuXCIgYWxpZ249XCJjZW50ZXJcIiBtYj17NH0+XG4gICAgICAgIDxUZXh0IGZvbnRXZWlnaHQ9XCJib2xkXCI+RGljZTwvVGV4dD5cbiAgICAgICAge3JvbGxIaXN0b3J5Lmxlbmd0aCA+IDAgJiYgKFxuICAgICAgICAgIDxUZXh0IFxuICAgICAgICAgICAgZm9udFNpemU9XCJzbVwiIFxuICAgICAgICAgICAgY29sb3I9XCJibHVlLjUwMFwiIFxuICAgICAgICAgICAgY3Vyc29yPVwicG9pbnRlclwiIFxuICAgICAgICAgICAgb25DbGljaz17c2hvd0hpc3Rvcnl9XG4gICAgICAgICAgICBfaG92ZXI9e3sgdGV4dERlY29yYXRpb246ICd1bmRlcmxpbmUnIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgUm9sbCBIaXN0b3J5XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICApfVxuICAgICAgPC9GbGV4PlxuICAgICAgXG4gICAgICA8RmxleCBqdXN0aWZ5PVwiY2VudGVyXCIgbWI9ezR9PlxuICAgICAgICA8SFN0YWNrIHNwYWNpbmc9ezR9PlxuICAgICAgICAgIDxEaWUgdmFsdWU9e2RpY2VWYWx1ZXNbMF19IGlzUm9sbGluZz17aXNSb2xsaW5nfSAvPlxuICAgICAgICAgIDxEaWUgdmFsdWU9e2RpY2VWYWx1ZXNbMV19IGlzUm9sbGluZz17aXNSb2xsaW5nfSAvPlxuICAgICAgICA8L0hTdGFjaz5cbiAgICAgIDwvRmxleD5cbiAgICAgIFxuICAgICAgeyFpc1JvbGxpbmcgJiYgZGljZVZhbHVlc1swXSA9PT0gZGljZVZhbHVlc1sxXSAmJiAoXG4gICAgICAgIDxBbGVydCBzdGF0dXM9XCJzdWNjZXNzXCIgbWI9ezJ9IGJvcmRlclJhZGl1cz1cIm1kXCI+XG4gICAgICAgICAgPEFsZXJ0SWNvbiAvPlxuICAgICAgICAgIDxUZXh0IGZvbnRXZWlnaHQ9XCJib2xkXCI+RE9VQkxFUyEge2NvbnNlY3V0aXZlRG91YmxlcyA+IDAgJiYgYCgke2NvbnNlY3V0aXZlRG91Ymxlc30gY29uc2VjdXRpdmUpYH08L1RleHQ+XG4gICAgICAgIDwvQWxlcnQ+XG4gICAgICApfVxuICAgICAgXG4gICAgICA8VGV4dCB0ZXh0QWxpZ249XCJjZW50ZXJcIiBtYj17NH0+XG4gICAgICAgIHtpc1JvbGxpbmcgPyAnUm9sbGluZy4uLicgOiBgUm9sbDogJHtkaWNlVmFsdWVzWzBdICsgZGljZVZhbHVlc1sxXX1gfVxuICAgICAgPC9UZXh0PlxuICAgICAgXG4gICAgICA8QnV0dG9uIFxuICAgICAgICBjb2xvclNjaGVtZT1cInRlYWxcIlxuICAgICAgICBpc0Rpc2FibGVkPXshaXNDdXJyZW50VHVybiB8fCBpc1JvbGxpbmd9XG4gICAgICAgIG9uQ2xpY2s9e2hhbmRsZVJvbGx9XG4gICAgICAgIHdpZHRoPVwiMTAwJVwiXG4gICAgICA+XG4gICAgICAgIHtpc1JvbGxpbmcgPyAnUm9sbGluZy4uLicgOiAnUm9sbCBEaWNlJ31cbiAgICAgIDwvQnV0dG9uPlxuICAgICAgXG4gICAgICB7LyogUm9sbCBIaXN0b3J5IE1vZGFsICovfVxuICAgICAgPE1vZGFsIGlzT3Blbj17aXNPcGVufSBvbkNsb3NlPXtvbkNsb3NlfSBzaXplPVwic21cIj5cbiAgICAgICAgPE1vZGFsT3ZlcmxheSAvPlxuICAgICAgICA8TW9kYWxDb250ZW50PlxuICAgICAgICAgIDxNb2RhbEhlYWRlcj5Sb2xsIEhpc3Rvcnk8L01vZGFsSGVhZGVyPlxuICAgICAgICAgIDxNb2RhbENsb3NlQnV0dG9uIC8+XG4gICAgICAgICAgPE1vZGFsQm9keT5cbiAgICAgICAgICAgIHtyb2xsSGlzdG9yeS5sZW5ndGggPiAwID8gKFxuICAgICAgICAgICAgICByb2xsSGlzdG9yeS5tYXAoKHJvbGwsIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgPEZsZXggXG4gICAgICAgICAgICAgICAgICBrZXk9e2luZGV4fSBcbiAgICAgICAgICAgICAgICAgIGp1c3RpZnk9XCJzcGFjZS1iZXR3ZWVuXCIgXG4gICAgICAgICAgICAgICAgICBwPXsyfSBcbiAgICAgICAgICAgICAgICAgIGJvcmRlckJvdHRvbT17aW5kZXggPCByb2xsSGlzdG9yeS5sZW5ndGggLSAxID8gJzFweCBzb2xpZCcgOiAnbm9uZSd9XG4gICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcj1cImdyYXkuMTAwXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8VGV4dD5Sb2xsIHtyb2xsSGlzdG9yeS5sZW5ndGggLSBpbmRleH06PC9UZXh0PlxuICAgICAgICAgICAgICAgICAgPEhTdGFjaz5cbiAgICAgICAgICAgICAgICAgICAgPFRleHQ+e3JvbGwucm9sbFswXX0gKyB7cm9sbC5yb2xsWzFdfSA9IHtyb2xsLnN1bX08L1RleHQ+XG4gICAgICAgICAgICAgICAgICAgIHtyb2xsLmlzRG91YmxlcyAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgPFRleHQgY29sb3I9XCJncmVlbi41MDBcIiBmb250V2VpZ2h0PVwiYm9sZFwiPkRPVUJMRVMhPC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgPC9IU3RhY2s+XG4gICAgICAgICAgICAgICAgPC9GbGV4PlxuICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPFRleHQ+Tm8gcm9sbHMgeWV0PC9UZXh0PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L01vZGFsQm9keT5cbiAgICAgICAgPC9Nb2RhbENvbnRlbnQ+XG4gICAgICA8L01vZGFsPlxuICAgIDwvQm94PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRGljZVJvbGxlcjsuLi5cblBhdGg6IGtla29wb2x5LWZyb250ZW5kL3NyYy9jb21wb25lbnRzL2dhbWUvR2FtZUJvYXJkLmpzeFxuLi4uXG5cbiAgLy8gSGFuZGxlIHRoZSBSb2xsIERpY2UgYnV0dG9uIGNsaWNrXG4gIGNvbnN0IGhhbmRsZVJvbGxEaWNlID0gKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBGaXJzdCBjaGVjayBpZiBpdCdzIHRoZSBsb2NhbCBwbGF5ZXIncyB0dXJuXG4gICAgICBpZiAoIXNvY2tldFNlcnZpY2UuaXNMb2NhbFBsYXllclR1cm4oKSkge1xuICAgICAgICB0b2FzdCh7XG4gICAgICAgICAgdGl0bGU6IFwiTm90IHlvdXIgdHVyblwiLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBgSXQncyAke3BsYXllcnMuZmluZChwID0+IHAuaWQgPT09IGN1cnJlbnRQbGF5ZXIpPy5uYW1lIHx8IFwiYW5vdGhlciBwbGF5ZXJcIn0ncyB0dXJuYCxcbiAgICAgICAgICBzdGF0dXM6IFwid2FybmluZ1wiLFxuICAgICAgICAgIGR1cmF0aW9uOiAzMDAwLFxuICAgICAgICAgIGlzQ2xvc2FibGU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICBkaXNwYXRjaChzZXRJc1JvbGxpbmcoZmFsc2UpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBpZiBwbGF5ZXIgaXMgaW4gamFpbFxuICAgICAgaWYgKGN1cnJlbnRQbGF5ZXJEYXRhPy5pbkphaWwpIHtcbiAgICAgICAgdG9hc3Qoe1xuICAgICAgICAgIHRpdGxlOiBcIllvdSdyZSBpbiBqYWlsIVwiLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBgWW91IG5lZWQgdG8gcm9sbCBkb3VibGVzIG9yIHdhaXQgJHtjdXJyZW50UGxheWVyRGF0YS5qYWlsVHVybnN9IG1vcmUgdHVybnMuYCxcbiAgICAgICAgICBzdGF0dXM6IFwid2FybmluZ1wiLFxuICAgICAgICAgIGR1cmF0aW9uOiAzMDAwLFxuICAgICAgICAgIGlzQ2xvc2FibGU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICBkaXNwYXRjaChzZXRJc1JvbGxpbmcoZmFsc2UpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXQgcm9sbGluZyBzdGF0ZSB0byB0cnVlXG4gICAgICBkaXNwYXRjaChzZXRJc1JvbGxpbmcodHJ1ZSkpO1xuXG4gICAgICAvLyBDaGVjayBpZiBXZWJTb2NrZXQgaXMgY29ubmVjdGVkIGJlZm9yZSB0cnlpbmcgdG8gcm9sbCBkaWNlXG4gICAgICBpZiAoc29ja2V0U2VydmljZS5zb2NrZXQgJiYgc29ja2V0U2VydmljZS5zb2NrZXQucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1tESUNFXSBTZW5kaW5nIHJvbGxfZGljZSByZXF1ZXN0IHRvIHNlcnZlcicpO1xuICAgICAgICAvLyBDYWxsIHRoZSBzb2NrZXQgc2VydmljZSB0byByb2xsIGRpY2VcbiAgICAgICAgc29ja2V0U2VydmljZS5yb2xsRGljZSgpO1xuXG4gICAgICAgIC8vIFNldCB1cCBhIHRpbWVvdXQgdG8gaGFuZGxlIHBvdGVudGlhbCBXZWJTb2NrZXQgZmFpbHVyZXNcbiAgICAgICAgY29uc3Qgd3NUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgaWYgKGlzUm9sbGluZykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tESUNFXSBXZWJTb2NrZXQgdGltZW91dCwgZmFsbGluZyBiYWNrIHRvIGxvY2FsIGRpY2Ugcm9sbCcpO1xuICAgICAgICAgICAgaGFuZGxlTG9jYWxEaWNlUm9sbCgpO1xuICAgICAgICAgICAgZGlzcGF0Y2goc2V0SXNSb2xsaW5nKGZhbHNlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAzMDAwKTtcblxuICAgICAgICAvLyBDbGVhbiB1cCB0aW1lb3V0IHdoZW4gY29tcG9uZW50IHVubW91bnRzIG9yIHJvbGwgY29tcGxldGVzXG4gICAgICAgIHJldHVybiAoKSA9PiBjbGVhclRpbWVvdXQod3NUaW1lb3V0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbRElDRV0gV2ViU29ja2V0IG5vdCBjb25uZWN0ZWQsIHVzaW5nIGxvY2FsIGRpY2Ugcm9sbCcpO1xuICAgICAgICBoYW5kbGVMb2NhbERpY2VSb2xsKCk7XG4gICAgICAgIGRpc3BhdGNoKHNldElzUm9sbGluZyhmYWxzZSkpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbRElDRV0gRXJyb3Igcm9sbGluZyBkaWNlOicsIGVycm9yKTtcbiAgICAgIGRpc3BhdGNoKHNldElzUm9sbGluZyhmYWxzZSkpO1xuXG4gICAgICB0b2FzdCh7XG4gICAgICAgIHRpdGxlOiBcIkVycm9yIHJvbGxpbmcgZGljZVwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogZXJyb3IubWVzc2FnZSB8fCBcIlRoZXJlIHdhcyBhIHByb2JsZW0gd2l0aCB0aGUgZ2FtZSBzZXJ2ZXJcIixcbiAgICAgICAgc3RhdHVzOiBcImVycm9yXCIsXG4gICAgICAgIGR1cmF0aW9uOiAzMDAwLFxuICAgICAgICBpc0Nsb3NhYmxlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEhhbmRsZSBsb2NhbCBkaWNlIHJvbGwgd2hlbiBXZWJTb2NrZXQgaXMgbm90IGF2YWlsYWJsZVxuICBjb25zdCBoYW5kbGVMb2NhbERpY2VSb2xsID0gKCkgPT4ge1xuICAgIC8vIEdlbmVyYXRlIHJhbmRvbSBkaWNlIHZhbHVlcyAoMS02KVxuICAgIGNvbnN0IGRpZTEgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA2KSArIDE7XG4gICAgY29uc3QgZGllMiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDYpICsgMTtcbiAgICBjb25zdCBkaWNlVG90YWwgPSBkaWUxICsgZGllMjtcbiAgICBjb25zdCBpc0RvdWJsZXMgPSBkaWUxID09PSBkaWUyO1xuLi4uXG5cbiAgICAgICAgICAgICAgey8qIEdhbWUgQ29udHJvbHMgKi99XG4gICAgICAgICAgICAgIDxGbGV4IGdhcD17Mn0+XG4gICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgZmxleD17MX1cbiAgICAgICAgICAgICAgICAgIGJnPVwiI0M2N0M1Q1wiXG4gICAgICAgICAgICAgICAgICBjb2xvcj1cIndoaXRlXCJcbiAgICAgICAgICAgICAgICAgIF9ob3Zlcj17eyBiZzogJyNCNTZCNEInIH19XG4gICAgICAgICAgICAgICAgICBzaXplPXt7IGJhc2U6IFwibWRcIiwgbWQ6IFwibGdcIiB9fVxuICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlUm9sbERpY2V9XG4gICAgICAgICAgICAgICAgICBpc0xvYWRpbmc9e2lzUm9sbGluZ31cbiAgICAgICAgICAgICAgICAgIGxvYWRpbmdUZXh0PVwiUm9sbGluZy4uLlwiXG4gICAgICAgICAgICAgICAgICBpc0Rpc2FibGVkPXtpc1JvbGxpbmcgfHwgIXNvY2tldFNlcnZpY2U/LmlzTG9jYWxQbGF5ZXJUdXJuPy4oKX1cbiAgICAgICAgICAgICAgICAgIHRpdGxlPXshc29ja2V0Q29ubmVjdGVkID8gXCJVc2luZyBsb2NhbCBkaWNlIHJvbGwgKG9mZmxpbmUgbW9kZSlcIiA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgIXNvY2tldFNlcnZpY2U/LmlzTG9jYWxQbGF5ZXJUdXJuPy4oKSA/IFwiTm90IHlvdXIgdHVyblwiIDogXCJSb2xsIGRpY2VcIn1cbiAgICAgICAgICAgICAgICAgIG9wYWNpdHk9eyFzb2NrZXRTZXJ2aWNlPy5pc0xvY2FsUGxheWVyVHVybj8uKCkgPyAwLjYgOiAxfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHshc29ja2V0Q29ubmVjdGVkID8gXCJSb2xsIERpY2UgKE9mZmxpbmUpXCIgOiBcIlJvbGwgRGljZVwifVxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgIGZsZXg9ezF9XG4gICAgICAgICAgICAgICAgICBiZz1cIiNCNEJENERcIlxuICAgICAgICAgICAgICAgICAgY29sb3I9XCJ3aGl0ZVwiXG4gICAgICAgICAgICAgICAgICBfaG92ZXI9e3sgYmc6ICcjQTNBQzNDJyB9fVxuICAgICAgICAgICAgICAgICAgc2l6ZT17eyBiYXNlOiBcIm1kXCIsIG1kOiBcImxnXCIgfX1cbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvY2tldFNlcnZpY2U/LmlzTG9jYWxQbGF5ZXJUdXJuPy4oKSkge1xuICAgICAgICAgICAgICAgICAgICAgIHNvY2tldFNlcnZpY2UuZW5kVHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKGVuZFR1cm4oKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4uLi5cblBhdGg6IGtla29wb2x5LWZyb250ZW5kL3NyYy9jb3JlL2VuZ2luZS9EaWNlTWFuYWdlci5qc1xuLyoqXG4gKiBEaWNlTWFuYWdlciBoYW5kbGVzIGRpY2Ugcm9sbGluZyBtZWNoYW5pY3NcbiAqL1xuY2xhc3MgRGljZU1hbmFnZXIge1xuICAvKipcbiAgICogUm9sbCBhIHNpbmdsZSBkaWUgKDEtNilcbiAgICogQHJldHVybnMge251bWJlcn0gLSBEaWUgcmVzdWx0ICgxLTYpXG4gICAqL1xuICByb2xsRGllKCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA2KSArIDE7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBSb2xsIHR3byBkaWNlXG4gICAqIEByZXR1cm5zIHtudW1iZXJbXX0gLSBBcnJheSBvZiB0d28gZGljZSByZXN1bHRzXG4gICAqL1xuICByb2xsRGljZSgpIHtcbiAgICByZXR1cm4gW3RoaXMucm9sbERpZSgpLCB0aGlzLnJvbGxEaWUoKV07XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBDaGVjayBpZiBkaWNlIHJvbGwgaXMgZG91Ymxlc1xuICAgKiBAcGFyYW0ge251bWJlcltdfSBkaWNlUm9sbCAtIEFycmF5IG9mIGRpY2UgdmFsdWVzXG4gICAqIEByZXR1cm5zIHtib29sZWFufSAtIFdoZXRoZXIgcm9sbCBpcyBkb3VibGVzXG4gICAqL1xuICBpc0RvdWJsZXMoZGljZVJvbGwpIHtcbiAgICByZXR1cm4gZGljZVJvbGxbMF0gPT09IGRpY2VSb2xsWzFdO1xuICB9XG4gIFxuICAvKipcbiAgICogR2V0IHRoZSBzdW0gb2YgZGljZSB2YWx1ZXNcbiAgICogQHBhcmFtIHtudW1iZXJbXX0gZGljZVJvbGwgLSBBcnJheSBvZiBkaWNlIHZhbHVlc1xuICAgKiBAcmV0dXJucyB7bnVtYmVyfSAtIFN1bSBvZiBkaWNlIHZhbHVlc1xuICAgKi9cbiAgZ2V0RGljZVRvdGFsKGRpY2VSb2xsKSB7XG4gICAgcmV0dXJuIGRpY2VSb2xsWzBdICsgZGljZVJvbGxbMV07XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBQZXJmb3JtIGEgcm9sbCB3aXRoIHRoZSBnaXZlbiBkaWNlIGNvdW50XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCAtIE51bWJlciBvZiBkaWNlIHRvIHJvbGxcbiAgICogQHJldHVybnMge251bWJlcltdfSAtIEFycmF5IG9mIGRpY2UgcmVzdWx0c1xuICAgKi9cbiAgcm9sbE11bHRpcGxlKGNvdW50KSB7XG4gICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgcmVzdWx0cy5wdXNoKHRoaXMucm9sbERpZSgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBSb2xsIGEgZGllIGZvciBlYWNoIHBsYXllclxuICAgKiBAcGFyYW0ge09iamVjdH0gZ2FtZVN0YXRlIC0gQ3VycmVudCBnYW1lIHN0YXRlXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IC0gTWFwIG9mIHBsYXllciBJRHMgdG8gcm9sbCByZXN1bHRzXG4gICAqL1xuICByb2xsRm9yQWxsUGxheWVycyhnYW1lU3RhdGUpIHtcbiAgICBjb25zdCByZXN1bHRzID0ge307XG4gICAgXG4gICAgT2JqZWN0LmtleXMoZ2FtZVN0YXRlLnBsYXllcnMpLmZvckVhY2gocGxheWVySWQgPT4ge1xuICAgICAgcmVzdWx0c1twbGF5ZXJJZF0gPSB0aGlzLnJvbGxEaWUoKTtcbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfVxuICBcbiAgLyoqXG4gICAqIERldGVybWluZSB0dXJuIG9yZGVyIGJhc2VkIG9uIHJvbGxzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBnYW1lU3RhdGUgLSBDdXJyZW50IGdhbWUgc3RhdGVcbiAgICogQHJldHVybnMge3N0cmluZ1tdfSAtIEFycmF5IG9mIHBsYXllciBJRHMgaW4gdHVybiBvcmRlclxuICAgKi9cbiAgZGV0ZXJtaW5lSW5pdGlhbFR1cm5PcmRlcihnYW1lU3RhdGUpIHtcbiAgICAvLyBSb2xsIGZvciBlYWNoIHBsYXllclxuICAgIGNvbnN0IHBsYXllclJvbGxzID0gW107XG4gICAgXG4gICAgT2JqZWN0LmtleXMoZ2FtZVN0YXRlLnBsYXllcnMpLmZvckVhY2gocGxheWVySWQgPT4ge1xuICAgICAgY29uc3Qgcm9sbCA9IHRoaXMucm9sbERpY2UoKTtcbiAgICAgIGNvbnN0IHRvdGFsID0gcm9sbFswXSArIHJvbGxbMV07XG4gICAgICBcbiAgICAgIHBsYXllclJvbGxzLnB1c2goe1xuICAgICAgICBwbGF5ZXJJZCxcbiAgICAgICAgcm9sbCxcbiAgICAgICAgdG90YWxcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIFxuICAgIC8vIFNvcnQgYnkgaGlnaGVzdCByb2xsXG4gICAgcGxheWVyUm9sbHMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgLy8gU29ydCBieSB0b3RhbCBmaXJzdFxuICAgICAgaWYgKGIudG90YWwgIT09IGEudG90YWwpIHtcbiAgICAgICAgcmV0dXJuIGIudG90YWwgLSBhLnRvdGFsO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBJZiB0aWVkLCBjaGVjayBmb3IgZG91Ymxlc1xuICAgICAgY29uc3QgYUlzRG91YmxlcyA9IGEucm9sbFswXSA9PT0gYS5yb2xsWzFdO1xuICAgICAgY29uc3QgYklzRG91YmxlcyA9IGIucm9sbFswXSA9PT0gYi5yb2xsWzFdO1xuICAgICAgXG4gICAgICBpZiAoYUlzRG91YmxlcyAmJiAhYklzRG91YmxlcykgcmV0dXJuIC0xO1xuICAgICAgaWYgKCFhSXNEb3VibGVzICYmIGJJc0RvdWJsZXMpIHJldHVybiAxO1xuICAgICAgXG4gICAgICAvLyBJZiBzdGlsbCB0aWVkLCB1c2UgcmFuZG9tIG9yZGVyXG4gICAgICByZXR1cm4gTWF0aC5yYW5kb20oKSAtIDAuNTtcbiAgICB9KTtcbiAgICBcbiAgICAvLyBSZXR1cm4gdGhlIHR1cm4gb3JkZXJcbiAgICByZXR1cm4gcGxheWVyUm9sbHMubWFwKHByID0+IHByLnBsYXllcklkKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEaWNlTWFuYWdlcjsuLi5cblBhdGg6IGtla29wb2x5LWZyb250ZW5kL3NyYy9zdG9yZS9nYW1lU2xpY2UuanNcbi4uLlxuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gIHBsYXllcnM6IFtdLFxuICBjdXJyZW50UGxheWVySW5kZXg6IDAsXG4gIGRpY2VSb2xsOiBbMSwgMV0sXG4gIGRpY2VSb2xsZWQ6IGZhbHNlLFxuICBwcm9wZXJ0aWVzOiBbXSxcbiAgZ2FtZU1lc3NhZ2VzOiBbXSxcbiAgY29uc2VjdXRpdmVEb3VibGVzOiAwLFxuICBib2FyZDogYm9hcmRTcGFjZXMsXG4gIGdhbWVTdGFydGVkOiBmYWxzZSxcbiAgZ2FtZVBoYXNlOiAnc2V0dXAnLCAvLyBzZXR1cCwgcGxheWluZywgZW5kZWRcbiAgcm9vbUNvZGU6IG51bGwsXG4gIGhvc3RJZDogbnVsbCxcbiAgbG9hZGluZzogZmFsc2UsXG4gIGVycm9yOiBudWxsLFxuICBsYXN0Um9sbDogeyBkaWNlOiBbMSwgMV0sIGlzRG91YmxlczogZmFsc2UgfSxcbiAgbWF4UGxheWVyczogNiwgLy8gRGVmYXVsdCBtYXggcGxheWVyc1xuICBnYW1lSW5mbzoge30sIC8vIEdhbWUgaW5mbyBmcm9tIHNlcnZlclxuICBpc1JvbGxpbmc6IGZhbHNlLCAvLyBBZGQgaXNSb2xsaW5nIHN0YXRlXG59O1xuLi4uXG4gICAgZW5kR2FtZTogKHN0YXRlKSA9PiB7XG4gICAgICBzdGF0ZS5nYW1lU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgc3RhdGUuZ2FtZVBoYXNlID0gJ2VuZGVkJztcbiAgICB9LFxuICAgIHVwZGF0ZURpY2VSb2xsOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgICAgY29uc3QgeyBkaWNlVmFsdWVzIH0gPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgIHN0YXRlLmRpY2VSb2xsID0gZGljZVZhbHVlcztcbiAgICAgIHN0YXRlLmRpY2VSb2xsZWQgPSB0cnVlO1xuXG4gICAgICAvLyBDaGVjayBmb3IgZG91Ymxlc1xuICAgICAgY29uc3QgaXNEb3VibGVzID0gZGljZVZhbHVlc1swXSA9PT0gZGljZVZhbHVlc1sxXTtcblxuICAgICAgaWYgKGlzRG91Ymxlcykge1xuICAgICAgICBzdGF0ZS5jb25zZWN1dGl2ZURvdWJsZXMgKz0gMTtcblxuICAgICAgICAvLyBBZGQgZG91YmxlcyBub3RpZmljYXRpb25cbiAgICAgICAgc3RhdGUuZ2FtZU1lc3NhZ2VzLnVuc2hpZnQoe1xuICAgICAgICAgIHR5cGU6ICdET1VCTEVTJyxcbiAgICAgICAgICBwbGF5ZXJJZDogc3RhdGUucGxheWVyc1tzdGF0ZS5jdXJyZW50UGxheWVySW5kZXhdLmlkLFxuICAgICAgICAgIGNvbnRlbnQ6IGAke3N0YXRlLnBsYXllcnNbc3RhdGUuY3VycmVudFBsYXllckluZGV4XS5uYW1lfSByb2xsZWQgZG91YmxlcyFgLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGRpY2U6IGRpY2VWYWx1ZXMsXG4gICAgICAgICAgICBjb25zZWN1dGl2ZURvdWJsZXM6IHN0YXRlLmNvbnNlY3V0aXZlRG91Ymxlc1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpXG4gICAgICAgIH0pO1xuLi4uXG4gICAgYWRkR2FtZU1lc3NhZ2U6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgICBzdGF0ZS5nYW1lTWVzc2FnZXMucHVzaCh7XG4gICAgICAgIGlkOiBEYXRlLm5vdygpLFxuICAgICAgICAuLi5hY3Rpb24ucGF5bG9hZFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBjbGVhckdhbWVNZXNzYWdlczogKHN0YXRlKSA9PiB7XG4gICAgICBzdGF0ZS5nYW1lTWVzc2FnZXMgPSBbXTtcbiAgICB9LFxuICAgIHNldE1heFBsYXllcnM6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgICBzdGF0ZS5tYXhQbGF5ZXJzID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgfSxcbiAgICBzZXRHYW1lSW5mbzogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICAgIHN0YXRlLmdhbWVJbmZvID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgfSxcbiAgICBlbmRUdXJuOiAoc3RhdGUpID0+IHtcbiAgICAgIHN0YXRlLmRpY2VSb2xsZWQgPSBmYWxzZTtcbiAgICAgIGNvbnN0IGN1cnJlbnRJbmRleCA9IHN0YXRlLnBsYXllcnMuZmluZEluZGV4KHAgPT4gcC5pZCA9PT0gc3RhdGUuY3VycmVudFBsYXllcik7XG4gICAgICBpZiAoY3VycmVudEluZGV4ID09PSAtMSkgcmV0dXJuOyAvLyBEZWZlbnNpdmVcblxuICAgICAgY29uc3QgaXNEb3VibGVzID0gc3RhdGUuZGljZVJvbGxbMF0gPT09IHN0YXRlLmRpY2VSb2xsWzFdO1xuICAgICAgY29uc3QgY3VycmVudFBsYXllciA9IHN0YXRlLnBsYXllcnNbY3VycmVudEluZGV4XTtcblxuICAgICAgaWYgKCFpc0RvdWJsZXMgfHwgKGN1cnJlbnRQbGF5ZXIgJiYgY3VycmVudFBsYXllci5pbkphaWwpKSB7XG4gICAgICAgIC8vIEFkdmFuY2UgdG8gbmV4dCBwbGF5ZXJcbiAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gKGN1cnJlbnRJbmRleCArIDEpICUgc3RhdGUucGxheWVycy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG5leHRQbGF5ZXIgPSBzdGF0ZS5wbGF5ZXJzW25leHRJbmRleF07XG4gICAgICAgIGlmIChuZXh0UGxheWVyKSB7XG4gICAgICAgICAgc3RhdGUuY3VycmVudFBsYXllciA9IG5leHRQbGF5ZXIuaWQ7XG4gICAgICAgICAgc3RhdGUuZ2FtZU1lc3NhZ2VzLnVuc2hpZnQoe1xuICAgICAgICAgICAgdHlwZTogJ1RVUk5fQ0hBTkdFJyxcbiAgICAgICAgICAgIHBsYXllcklkOiBuZXh0UGxheWVyLmlkLFxuICAgICAgICAgICAgY29udGVudDogYEl0J3Mgbm93ICR7bmV4dFBsYXllci5uYW1lfSdzIHR1cm5gLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIGRvdWJsZXMsIHNhbWUgcGxheWVyIGdldHMgYW5vdGhlciB0dXJuXG4gICAgICAgIHN0YXRlLmdhbWVNZXNzYWdlcy51bnNoaWZ0KHtcbiAgICAgICAgICB0eXBlOiAnRVhUUkFfVFVSTicsXG4gICAgICAgICAgcGxheWVySWQ6IGN1cnJlbnRQbGF5ZXIuaWQsXG4gICAgICAgICAgY29udGVudDogYCR7Y3VycmVudFBsYXllci5uYW1lfSByb2xsZWQgZG91YmxlcyBhbmQgZ2V0cyBhbm90aGVyIHR1cm4hYCxcbiAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRQbGF5ZXJzOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgICAgc3RhdGUucGxheWVycyA9IGFjdGlvbi5wYXlsb2FkO1xuICAgIH0sXG4uLi5cblxuLy8gRXhwb3J0IGFjdGlvbnNcbmV4cG9ydCBjb25zdCB7XG4gIHNldEdhbWVTdGFydGVkLFxuICBzZXRHYW1lUGhhc2UsXG4gIHN5bmNHYW1lU3RhdHVzLFxuICBhZGRQbGF5ZXIsXG4gIHJlbW92ZVBsYXllcixcbiAgc2V0Q3VycmVudFBsYXllcixcbiAgbW92ZVBsYXllcixcbiAgdXBkYXRlUGxheWVyQmFsYW5jZSxcbiAgYnV5UHJvcGVydHksXG4gIG1vcnRnYWdlUHJvcGVydHksXG4gIHVubW9ydGdhZ2VQcm9wZXJ0eSxcbiAgc2V0UGxheWVyUmVhZHksXG4gIHNldFJvb21Db2RlLFxuICBzZXRIb3N0LFxuICBlbmRHYW1lLFxuICB1cGRhdGVEaWNlUm9sbCxcbiAgcmVsZWFzZUZyb21KYWlsLFxuICBkZWNyZW1lbnRKYWlsVHVybnMsXG4gIGFkZEdhbWVNZXNzYWdlLFxuICBjbGVhckdhbWVNZXNzYWdlcyxcbiAgc2V0TWF4UGxheWVycyxcbiAgc2V0R2FtZUluZm8sXG4gIGVuZFR1cm4sXG4gIHNldFBsYXllcnMsXG4gIHNldElzUm9sbGluZ1xufSA9IGdhbWVTbGljZS5hY3Rpb25zO1xuXG4vLyBFeHBvcnQgcmVkdWNlclxuZXhwb3J0IGRlZmF1bHQgZ2FtZVNsaWNlLnJlZHVjZXI7Li4uXG5QYXRoOiBrZWtvcG9seS1mcm9udGVuZC9zcmMvc2VydmljZXMvc29ja2V0U2VydmljZS5qc1xuLi4uXG5cbiAgaGFuZGxlRGljZVJvbGxlZCA9IChkYXRhKSA9PiB7XG4gICAgY29uc3QgeyBkaXNwYXRjaCB9ID0gc3RvcmU7XG5cbiAgICAvLyBBbHdheXMgZ2V0IGRpY2UgdmFsdWVzIGFzIGFuIGFycmF5IGFuZCBlbnN1cmUgdGhleSBhcmUgdmFsaWQgbnVtYmVyc1xuICAgIGxldCBkaWNlID0gQXJyYXkuaXNBcnJheShkYXRhLmRpY2UpID8gZGF0YS5kaWNlIDogW2RhdGEuZGljZTEsIGRhdGEuZGljZTJdO1xuXG4gICAgLy8gVmFsaWRhdGUgZGljZSB2YWx1ZXMgLSBlbnN1cmUgdGhleSBhcmUgbnVtYmVycyBiZXR3ZWVuIDEtNlxuICAgIGRpY2UgPSBkaWNlLm1hcCh2YWx1ZSA9PiB7XG4gICAgICAvLyBDb252ZXJ0IHRvIG51bWJlciBpZiBpdCdzIGEgc3RyaW5nXG4gICAgICBjb25zdCBudW1WYWx1ZSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBwYXJzZUludCh2YWx1ZSwgMTApIDogdmFsdWU7XG5cbiAgICAgIC8vIFZhbGlkYXRlIHRoZSBudW1iZXIgaXMgYmV0d2VlbiAxLTZcbiAgICAgIGlmICh0eXBlb2YgbnVtVmFsdWUgIT09ICdudW1iZXInIHx8IGlzTmFOKG51bVZhbHVlKSB8fCBudW1WYWx1ZSA8IDEgfHwgbnVtVmFsdWUgPiA2KSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgW0RJQ0VdIEludmFsaWQgZGljZSB2YWx1ZTogJHt2YWx1ZX0sIHVzaW5nIGRlZmF1bHQgdmFsdWUgMWApO1xuICAgICAgICByZXR1cm4gMTsgLy8gRGVmYXVsdCB0byAxIGZvciBpbnZhbGlkIHZhbHVlc1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bVZhbHVlO1xuICAgIH0pO1xuXG4gICAgY29uc3QgW2RpY2UxLCBkaWNlMl0gPSBkaWNlO1xuICAgIGNvbnNvbGUubG9nKGBbRElDRV0gUHJvY2Vzc2VkIGRpY2UgdmFsdWVzOiAke2RpY2UxfSwgJHtkaWNlMn1gKTtcblxuICAgIC8vIFVwZGF0ZSBSZWR1eCB3aXRoIHZhbGlkYXRlZCBkaWNlIHZhbHVlc1xuICAgIGRpc3BhdGNoKHVwZGF0ZURpY2VSb2xsKHsgZGljZVZhbHVlczogW2RpY2UxLCBkaWNlMl0gfSkpO1xuLi4uXG5cbiAgICAgIC8vIEFkZCBhIHNwZWNpZmljIFJPTEwgbWVzc2FnZSB0byB0aGUgZ2FtZSBsb2dcbiAgICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgICBjb25zdCBwbGF5ZXIgPSBjdXJyZW50U3RhdGUuZ2FtZS5wbGF5ZXJzLmZpbmQocCA9PiBwLmlkID09PSBkYXRhLnBsYXllcklkKTtcbiAgICAgIGNvbnN0IHBsYXllck5hbWUgPSBwbGF5ZXIgPyBwbGF5ZXIubmFtZSA6IGBQbGF5ZXIgJHtkYXRhLnBsYXllcklkfWA7XG5cbiAgICAgIGRpc3BhdGNoKGFkZEdhbWVNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogJ1JPTEwnLFxuICAgICAgICBwbGF5ZXJJZDogZGF0YS5wbGF5ZXJJZCxcbiAgICAgICAgY29udGVudDogYCR7cGxheWVyTmFtZX0gcm9sbGVkICR7ZGljZTF9IGFuZCAke2RpY2UyfWAsXG4gICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKVxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIC8vIEVuc3VyZSByb2xsaW5nIHN0YXRlIGlzIHNldCB0byBmYWxzZVxuICAgIGRpc3BhdGNoKHNldElzUm9sbGluZyhmYWxzZSkpO1xuICB9O1xuXG4gIGhhbmRsZURpY2VSb2xsaW5nID0gKGlzUm9sbGluZykgPT4ge1xuICAgIC8vIFdlIGRvbid0IG5lZWQgdGhpcyBhY3Rpb24gYW55bW9yZSBhcyB1cGRhdGVEaWNlUm9sbCBoYW5kbGVzIHRoZSBzdGF0ZVxuICAgIC8vIEJ1dCB3ZSBjYW4gYWRkIGEgZ2FtZSBtZXNzYWdlIGZvciBkaWNlIHJvbGxpbmdcbiAgICBpZiAoaXNSb2xsaW5nKSB7XG4gICAgICBzdG9yZS5kaXNwYXRjaChhZGRHYW1lTWVzc2FnZSh7XG4gICAgICAgIHR5cGU6ICdESUNFJyxcbiAgICAgICAgY29udGVudDogJ1JvbGxpbmcgZGljZS4uLicsXG4gICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKVxuICAgICAgfSkpO1xuICAgIH1cbiAgfTtcbi4uLlxuXG4gICAgICAgIC8vIElmIGdhbWUgaGFzbid0IHN0YXJ0ZWQgeWV0LCB0cnkgYWdhaW5cbiAgICAgICAgaWYgKCFnYW1lU3RhdGUuZ2FtZVN0YXJ0ZWQgfHwgZ2FtZVN0YXRlLmdhbWVQaGFzZSAhPT0gJ3BsYXlpbmcnIHx8XG4gICAgICAgICAgICBzbGljZXNHYW1lU3RhdGUuc3RhdHVzICE9PSAnQUNUSVZFJykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdbU1RBUlRfR0FNRV0gR2FtZSBub3Qgc3RhcnRlZCB5ZXQsIHNlbmRpbmcgZ2FtZTpzdGFydCBtZXNzYWdlIGFnYWluJyk7XG4gICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZSgnZ2FtZTpzdGFydCcsIHt9KTtcblxuICAgICAgICAgIC8vIERpc3BhdGNoIHN0YXJ0R2FtZUFzeW5jIGFjdGlvbiBhZ2FpblxuICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdnYW1lL3N0YXJ0R2FtZUFzeW5jL2Z1bGZpbGxlZCcsXG4gICAgICAgICAgICBwYXlsb2FkOiB0cnVlLFxuICAgICAgICAgICAgbWV0YTogeyByZXF1ZXN0SWQ6ICdnYW1lX3N0YXJ0X3JldHJ5JywgYXJnOiB1bmRlZmluZWQgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gU3luY2hyb25pemUgZ2FtZSBzdGF0ZSBhZ2FpblxuICAgICAgICAgIHRoaXMuc3luY0dhbWVTdGF0ZUFjcm9zc1NsaWNlcygnQUNUSVZFJyk7XG5cbiAgICAgICAgICAvLyBTZXQgdXAgdGhlIGdhbWUgc3RhcnQgcmV0cnkgY2hlY2tcbiAgICAgICAgICB0aGlzLnNldHVwR2FtZVN0YXJ0UmV0cnlDaGVjaygpO1xuICAgICAgICB9XG4gICAgICB9LCAxMDAwKTtcblxuICAgICAgLy8gU2V0IHVwIHRoZSBnYW1lIHN0YXJ0IHJldHJ5IGNoZWNrIGltbWVkaWF0ZWx5XG4gICAgICB0aGlzLnNldHVwR2FtZVN0YXJ0UmV0cnlDaGVjaygpO1xuICAgIH0sIDIwMCk7XG4gIH07XG5cbiAgcm9sbERpY2UgPSAoKSA9PiB7XG4gICAgdGhpcy5zZW5kTWVzc2FnZSgncm9sbF9kaWNlJywge30pO1xuICB9O1xuXG4gIGVuZFR1cm4gPSAoKSA9PiB7XG4gICAgdGhpcy5zZW5kTWVzc2FnZSgnZW5kX3R1cm4nLCB7fSk7XG4gIH07XG5cbiAgcHVyY2hhc2VQcm9wZXJ0eSA9IChwcm9wZXJ0eUlkKSA9PiB7XG4gICAgdGhpcy5zZW5kTWVzc2FnZSgnYnV5X3Byb3BlcnR5JywgeyBwcm9wZXJ0eUlkIH0pO1xuICB9O1xuXG4gIGJ1aWxkRW5nYWdlbWVudCA9IChwcm9wZXJ0eUlkKSA9PiB7XG4gICAgdGhpcy5zZW5kTWVzc2FnZSgnYnVpbGRfZW5nYWdlbWVudCcsIHsgcHJvcGVydHlJZCB9KTtcbiAgfTtcblxuICBidWlsZENoZWNrbWFyayA9IChwcm9wZXJ0eUlkKSA9PiB7XG4gICAgdGhpcy5zZW5kTWVzc2FnZSgnYnVpbGRfY2hlY2ttYXJrJywgeyBwcm9wZXJ0eUlkIH0pO1xuICB9O1xuXG4gIG1vcnRnYWdlUHJvcGVydHkgPSAocHJvcGVydHlJZCkgPT4ge1xuICAgIHRoaXMuc2VuZE1lc3NhZ2UoJ21vcnRnYWdlX3Byb3BlcnR5JywgeyBwcm9wZXJ0eUlkIH0pO1xuICB9O1xuXG4gIGRyYXdDYXJkID0gKGNhcmRUeXBlKSA9PiB7XG4gICAgdGhpcy5zZW5kTWVzc2FnZSgnZHJhd19jYXJkJywgeyBjYXJkVHlwZSB9KTtcbiAgfTtcblxuICBwbGF5Q2FyZCA9IChjYXJkSWQsIHRhcmdldFBsYXllcklkID0gbnVsbCwgdGFyZ2V0UHJvcGVydHlJZCA9IG51bGwpID0+IHtcbiAgICB0aGlzLnNlbmRNZXNzYWdlKCd1c2VfY2FyZCcsIHtcbiAgICAgIGNhcmRJZCxcbiAgICAgIHRhcmdldFBsYXllcklkLFxuICAgICAgdGFyZ2V0UHJvcGVydHlJZFxuICAgIH0pO1xuICB9O1xuLi4uXG5QYXRoOiBrZWtvcG9seS1iYWNrZW5kL2ludGVybmFsL2dhbWUvbWFuYWdlci9nYW1lX21hbmFnZXIuZ29cbi4uLlxuXG4vLyBQbGFjZWhvbGRlciBmb3IgYWN0aW9uIHByb2Nlc3NpbmcgbWV0aG9kc1xuZnVuYyAoZ20gKkdhbWVNYW5hZ2VyKSBwcm9jZXNzUm9sbERpY2VBY3Rpb24oZ2FtZSAqbW9kZWxzLkdhbWUsIHBsYXllcklEIHN0cmluZywgcGF5bG9hZCBpbnRlcmZhY2V7fSkgZXJyb3Ige1xuXHRnbS5sb2dnZXIuSW5mb2YoXCJQbGF5ZXIgJXMgcm9sbGluZyBkaWNlIGluIGdhbWUgJXNcIiwgcGxheWVySUQsIGdhbWUuSUQuSGV4KCkpXG5cblx0Ly8gR2VuZXJhdGUgcmFuZG9tIGRpY2UgdmFsdWVzICgxLTYgZm9yIGVhY2ggZGllKVxuXHRkaWNlMSA6PSAxICsgKHRpbWUuTm93KCkuVW5peE5hbm8oKSAlIDYpXG5cdHRpbWUuU2xlZXAoMSAqIHRpbWUuTWlsbGlzZWNvbmQpXG5cdGRpY2UyIDo9IDEgKyAodGltZS5Ob3coKS5Vbml4TmFubygpICUgNilcblx0dG90YWxNb3ZlIDo9IGludChkaWNlMSArIGRpY2UyKVxuXG5cdC8vIEZpbmQgdGhlIHBsYXllclxuXHRwbGF5ZXJJbmRleCA6PSAtMVxuXHRmb3IgaSwgcGxheWVyIDo9IHJhbmdlIGdhbWUuUGxheWVycyB7XG5cdFx0aWYgcGxheWVyLklEID09IHBsYXllcklEIHtcblx0XHRcdHBsYXllckluZGV4ID0gaVxuXHRcdFx0YnJlYWtcblx0XHR9XG5cdH1cblx0aWYgcGxheWVySW5kZXggPT0gLTEge1xuXHRcdHJldHVybiBmbXQuRXJyb3JmKFwicGxheWVyIG5vdCBmb3VuZCBpbiBnYW1lXCIpXG5cdH1cblx0cGxheWVyIDo9ICZnYW1lLlBsYXllcnNbcGxheWVySW5kZXhdXG4uLi5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjgyNDdlNjI3LTU4N2MtNGIyNC1iNDQ1LTNjMDdlNDU1Njk3Mzt0b29sdV92cnR4XzAxR0pXRXV6YkZWV2NwY3l5UXVQMXM4aSI6eyJyZXF1ZXN0SWQiOiI4MjQ3ZTYyNy01ODdjLTRiMjQtYjQ0NS0zYzA3ZTQ1NTY5NzMiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxR0pXRXV6YkZWV2NwY3l5UXVQMXM4aSIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IGtla29wb2x5LWZyb250ZW5kL3NyYy9zZXJ2aWNlcy9zb2NrZXRTZXJ2aWNlLmpzXG4uLi5cblxuY2xhc3MgU29ja2V0U2VydmljZSB7XG4gIHNvY2tldCA9IG51bGw7XG4gIGxvYmJ5U29ja2V0ID0gbnVsbDtcbiAgZ2FtZUlkID0gbnVsbDtcbiAgcGxheWVySWQgPSBudWxsO1xuICBzZXNzaW9uSWQgPSBudWxsO1xuICByZWNvbm5lY3RBdHRlbXB0cyA9IDA7XG4gIG1heFJlY29ubmVjdEF0dGVtcHRzID0gNTtcbiAgcmVjb25uZWN0SW50ZXJ2YWwgPSAxMDAwO1xuICByZWNvbm5lY3RUaW1lciA9IG51bGw7XG4gIHRva2VuID0gbnVsbDtcbiAgaW5pdGlhbFBsYXllckRhdGFUb1NlbmQgPSBudWxsOyAvLyBTdG9yZSBpbml0aWFsIGRhdGEgaWYgcHJvdmlkZWRcbiAgLy8gLS0tIEFkZCBjYWxsYmFja3MgZm9yIGNvbm5lY3Rpb24gc3RhdHVzIGFuZCBlcnJvcnMgLS0tXG4gIG9uQ29ubmVjdGlvbkNoYW5nZSA9IChzdGF0dXMpID0+IHt9OyAvLyBEZWZhdWx0IGVtcHR5IGZ1bmN0aW9uXG4gIG9uQ29ubmVjdGlvbkVycm9yID0gKGVycm9yKSA9PiB7fTsgICAvLyBEZWZhdWx0IGVtcHR5IGZ1bmN0aW9uXG4gIC8vIC0tLVxuICBvbk5ld0dhbWVDYWxsYmFjayA9IG51bGw7XG4gIGlzTmF2aWdhdGluZyA9IGZhbHNlOyAvLyBGbGFnIHRvIHRyYWNrIG5hdmlnYXRpb24gc3RhdGVcbiAgcHJlc2VydmVDb25uZWN0aW9uID0gZmFsc2U7IC8vIEZsYWcgdG8gcHJlc2VydmUgY29ubmVjdGlvbiBkdXJpbmcgbmF2aWdhdGlvblxuICBsb2NhbFBsYXllcklkID0gbnVsbDsgLy8gTG9jYWwgcGxheWVyIElEIHRvIGhlbHAgaWRlbnRpZnkgd2hlbiBpdCdzIHRoZSBsb2NhbCBwbGF5ZXIncyB0dXJuXG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICAvLyBUcnkgdG8gYXV0by1yZWNvbm5lY3QgaWYgc2Vzc2lvbiBpbmZvIGlzIHByZXNlbnQgaW4gbG9jYWxTdG9yYWdlXG4gICAgY29uc3QgbGFzdEdhbWVJZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdrZWtvcG9seV9nYW1lX2lkJyk7XG4gICAgY29uc3QgbGFzdFBsYXllcklkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2tla29wb2x5X3BsYXllcl9pZCcpO1xuICAgIGNvbnN0IGxhc3RTZXNzaW9uSWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgna2Vrb3BvbHlfc2Vzc2lvbl9pZCcpO1xuICAgIGlmIChsYXN0R2FtZUlkICYmIGxhc3RQbGF5ZXJJZCAmJiBsYXN0U2Vzc2lvbklkKSB7XG4gICAgICB0aGlzLmdhbWVJZCA9IGxhc3RHYW1lSWQ7XG4gICAgICB0aGlzLnBsYXllcklkID0gbGFzdFBsYXllcklkO1xuICAgICAgdGhpcy5zZXNzaW9uSWQgPSBsYXN0U2Vzc2lvbklkO1xuICAgICAgLy8gQXR0ZW1wdCByZWNvbm5lY3QgKG5vIGluaXRpYWxQbGF5ZXJEYXRhLCBzbyBwbGF5ZXJfam9pbmVkIGlzIG5vdCBzZW50KVxuICAgICAgdGhpcy5jb25uZWN0KHRoaXMuZ2FtZUlkLCB0aGlzLnBsYXllcklkLCB0aGlzLnRva2VuKS5jYXRjaCgoKSA9PiB7XG4gICAgICAgIC8vIElmIHJlY29ubmVjdCBmYWlscywgY2xlYXIgc2Vzc2lvbiBpbmZvXG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdrZWtvcG9seV9nYW1lX2lkJyk7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdrZWtvcG9seV9wbGF5ZXJfaWQnKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2tla29wb2x5X3Nlc3Npb25faWQnKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbm5lY3QgPSAoZ2FtZUlkLCBwbGF5ZXJJZCwgdG9rZW4sIGluaXRpYWxQbGF5ZXJEYXRhKSA9PiB7XG4gICAgLy8gRW5zdXJlIHJvb21JZCBpcyBsb3dlcmNhc2VcbiAgICBjb25zdCBub3JtYWxpemVkUm9vbUlkID0gZ2FtZUlkLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICAgIHRoaXMuZ2FtZUlkID0gbm9ybWFsaXplZFJvb21JZDtcbiAgICB0aGlzLnBsYXllcklkID0gcGxheWVySWQ7XG4gICAgdGhpcy50b2tlbiA9IHRva2VuOyAvLyBTdG9yZSB0aGUgdG9rZW5cbiAgICB0aGlzLmluaXRpYWxQbGF5ZXJEYXRhVG9TZW5kID0gaW5pdGlhbFBsYXllckRhdGE7IC8vIFN0b3JlIGluaXRpYWwgZGF0YSBpZiBwcm92aWRlZFxuICAgIC8vIC0tLSBBZGQgTG9nZ2luZyAtLS1cbiAgICBjb25zb2xlLmxvZyhgW0NPTk5FQ1RdIFNldCB0aGlzLmluaXRpYWxQbGF5ZXJEYXRhVG9TZW5kOmAsIHRoaXMuaW5pdGlhbFBsYXllckRhdGFUb1NlbmQpO1xuICAgIC8vIC0tLVxuICAgIHRoaXMubG9jYWxQbGF5ZXJJZCA9IHBsYXllcklkOyAvLyBTZXQgbG9jYWwgcGxheWVyIElEXG5cbiAgICAvLyAtLS0gU2ltcGxpZmllZCBTZXNzaW9uIElEIExvZ2ljIC0tLVxuICAgIGxldCBzZXNzaW9uSWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2Vzc2lvbklkJyk7XG4gICAgaWYgKCFzZXNzaW9uSWQpIHtcbiAgICAgIHNlc3Npb25JZCA9IHRoaXMuZ2VuZXJhdGVTZXNzaW9uSWQoKTtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzZXNzaW9uSWQnLCBzZXNzaW9uSWQpO1xuICAgIH0gZWxzZSB7XG4gICAgfVxuICAgIHRoaXMuc2Vzc2lvbklkID0gc2Vzc2lvbklkOyAvLyBBc3NpZ24gdG8gdGhlIGNsYXNzIHByb3BlcnR5XG4gICAgLy8gLS0tXG5cbiAgICAvLyBSZXR1cm4gYSBQcm9taXNlIHRvIGFsbG93IGFzeW5jL2F3YWl0IHVzYWdlXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmICh0aGlzLnNvY2tldCAmJiB0aGlzLnNvY2tldC5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuT1BFTikge1xuICAgICAgICB0aGlzLm9uQ29ubmVjdGlvbkNoYW5nZSgnY29ubmVjdGVkJyk7XG4gICAgICAgIHJlc29sdmUoKTsgLy8gQWxyZWFkeSBjb25uZWN0ZWRcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zb2NrZXQgJiYgdGhpcy5zb2NrZXQucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0LkNPTk5FQ1RJTkcpIHtcbiAgICAgICAgLy8gV2UgbWlnaHQgd2FudCB0byB3YWl0IGZvciB0aGUgZXhpc3RpbmcgY29ubmVjdGlvbiBhdHRlbXB0IG9yIHJlamVjdFxuICAgICAgICByZWplY3QobmV3IEVycm9yKCdDb25uZWN0aW9uIGF0dGVtcHQgYWxyZWFkeSBpbiBwcm9ncmVzcy4nKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbi4uLlxuXG4gICAgICAgICAgLy8gUmVzZXQgcmVjb25uZWN0IGF0dGVtcHRzIG9uIHN1Y2Nlc3NmdWwgY29ubmVjdGlvblxuICAgICAgICAgIHRoaXMucmVjb25uZWN0QXR0ZW1wdHMgPSAwO1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnJlY29ubmVjdFRpbWVyKTsgLy8gQ2xlYXIgYW55IGV4aXN0aW5nIHJlY29ubmVjdCB0aW1lclxuXG4gICAgICAgICAgLy8gTm90aWZ5IEdhbWVSb29tIGFib3V0IHRoZSBjb25uZWN0aW9uIHN0YXR1cyBjaGFuZ2VcbiAgICAgICAgICB0aGlzLm9uQ29ubmVjdGlvbkNoYW5nZSgnY29ubmVjdGVkJyk7XG5cbiAgICAgICAgICAvLyBSZXF1ZXN0IGFjdGl2ZSBwbGF5ZXJzIGFmdGVyIGNvbm5lY3Rpb24gaXMgZXN0YWJsaXNoZWRcbiAgICAgICAgICAvLyBBZGRpbmcgYSBzbGlnaHQgZGVsYXkgdG8gZW5zdXJlIGJhY2tlbmQgcHJvY2Vzc2VzIGpvaW4gZmlyc3RcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2UoJ2dldF9hY3RpdmVfcGxheWVycycpO1xuICAgICAgICAgIH0sIDEwMCk7IC8vIDEwMG1zIGRlbGF5XG5cbiAgICAgICAgICAvLyBTdGFydCBwZXJpb2RpYyBnYW1lIHN0YXRlIGNoZWNrIGlmIG5vdCBhbHJlYWR5IHJ1bm5pbmdcbiAgICAgICAgICAvLyB0aGlzLnN0YXJ0UGVyaW9kaWNHYW1lU3RhdGVDaGVjaygpOyAvLyBDb25zaWRlciBpZiB0aGlzIGlzIG5lZWRlZCBpbW1lZGlhdGVseVxuXG4gICAgICAgICAgLy8gU2F2ZSBzZXNzaW9uIGluZm8gZm9yIHJlY29ubmVjdFxuICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdrZWtvcG9seV9nYW1lX2lkJywgdGhpcy5nYW1lSWQpO1xuICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdrZWtvcG9seV9wbGF5ZXJfaWQnLCB0aGlzLnBsYXllcklkKTtcbiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgna2Vrb3BvbHlfc2Vzc2lvbl9pZCcsIHRoaXMuc2Vzc2lvbklkKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnNvY2tldC5vbmNsb3NlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgdGhpcy5oYW5kbGVEaXNjb25uZWN0KGV2ZW50KTtcbiAgICAgICAgICAvLyBEb24ndCBhdXRvbWF0aWNhbGx5IHJlamVjdCBvbiBjbG9zZSwgbGV0IHJlY29ubmVjdCBsb2dpYyBoYW5kbGUgaXQgaWYgbmVlZGVkXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5zb2NrZXQub25lcnJvciA9IChlcnJvcikgPT4ge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1dlYlNvY2tldCBFcnJvcjonLCBlcnJvcik7XG4gICAgICAgICAgdGhpcy5vbkNvbm5lY3Rpb25DaGFuZ2UoJ2Vycm9yJyk7XG4gICAgICAgICAgdGhpcy5vbkNvbm5lY3Rpb25FcnJvcihlcnJvcik7IC8vIENhbGwgdGhlIGVycm9yIGNhbGxiYWNrXG4gICAgICAgICAgcmVqZWN0KGVycm9yKTsgLy8gUmVqZWN0IHRoZSBwcm9taXNlIG9uIGVycm9yXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5zb2NrZXQub25tZXNzYWdlID0gdGhpcy5oYW5kbGVNZXNzYWdlO1xuXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIFdlYlNvY2tldDonLCBlcnJvcik7XG4gICAgICAgIHRoaXMub25Db25uZWN0aW9uQ2hhbmdlKCdlcnJvcicpO1xuICAgICAgICB0aGlzLm9uQ29ubmVjdGlvbkVycm9yKGVycm9yKTsgLy8gQ2FsbCB0aGUgZXJyb3IgY2FsbGJhY2tcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBkaXNjb25uZWN0ID0gKHByZXNlcnZlID0gZmFsc2UpID0+IHtcbiAgICB0aGlzLnByZXNlcnZlQ29ubmVjdGlvbiA9IHByZXNlcnZlO1xuICAgIGlmICh0aGlzLnNvY2tldCAmJiAhdGhpcy5wcmVzZXJ2ZUNvbm5lY3Rpb24pIHtcbiAgICAgIHRoaXMuc29ja2V0LmNsb3NlKCk7XG4gICAgICB0aGlzLnNvY2tldCA9IG51bGw7XG4gICAgICB0aGlzLm9uQ29ubmVjdGlvbkNoYW5nZSgnZGlzY29ubmVjdGVkJyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnByZXNlcnZlQ29ubmVjdGlvbikge1xuICAgIH1cbiAgfTtcblxuICBzZW5kTWVzc2FnZSA9ICh0eXBlLCBwYXlsb2FkKSA9PiB7XG4gICAgaWYgKHRoaXMuc29ja2V0ICYmIHRoaXMuc29ja2V0LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOKSB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gSlNPTi5zdHJpbmdpZnkoeyB0eXBlLCAuLi5wYXlsb2FkIH0pO1xuICAgICAgdGhpcy5zb2NrZXQuc2VuZChtZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS53YXJuKGBDYW5ub3Qgc2VuZCBtZXNzYWdlLCBXZWJTb2NrZXQgbm90IG9wZW4uIFN0YXRlOiAke3RoaXMuc29ja2V0Py5yZWFkeVN0YXRlfWApO1xuICAgIH1cbiAgfTtcblxuICAvLyBNZXRob2QgdG8gY29ubmVjdCB0byB0aGUgbG9iYnkgc29ja2V0IGZvciByZWFsLXRpbWUgZ2FtZSB1cGRhdGVzXG4gIGNvbm5lY3RUb0xvYmJ5KHRva2VuLCBwbGF5ZXJJZCkge1xuICAgIGlmICghdG9rZW4gfHwgIXBsYXllcklkKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdDYW5ub3QgY29ubmVjdCB0byBsb2JieTogdG9rZW4gYW5kIHBsYXllcklkIGFyZSByZXF1aXJlZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgICB0aGlzLnBsYXllcklkID0gcGxheWVySWQ7XG5cbiAgICAvLyBHZW5lcmF0ZSBhIHNlc3Npb24gSUQgaWYgd2UgZG9uJ3QgaGF2ZSBvbmUgeWV0XG4gICAgaWYgKCF0aGlzLnNlc3Npb25JZCkge1xuICAgICAgdGhpcy5zZXNzaW9uSWQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgMTUpO1xuICAgIH1cblxuICAgIC8vIENsZWFuIHVwIGFueSBleGlzdGluZyBsb2JieSBjb25uZWN0aW9uXG4gICAgdGhpcy5kaXNjb25uZWN0RnJvbUxvYmJ5KCk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gQ3JlYXRlIFdlYlNvY2tldCBjb25uZWN0aW9uIHdpdGggcXVlcnkgcGFyYW1ldGVycyBpbmNsdWRpbmcgdG9rZW5cbiAgICAgIC8vIFN0cmlwIHRoZSBcIkJlYXJlciBcIiBwcmVmaXggZnJvbSB0aGUgdG9rZW4gaWYgcHJlc2VudFxuICAgICAgY29uc3QgdG9rZW5WYWx1ZSA9IHRoaXMudG9rZW4uc3RhcnRzV2l0aCgnQmVhcmVyICcpID8gdGhpcy50b2tlbi5zdWJzdHJpbmcoNykgOiB0aGlzLnRva2VuO1xuICAgICAgY29uc3Qgc29ja2V0UHJvdG9jb2wgPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwczonID8gJ3dzczonIDogJ3dzOic7XG4gICAgICBjb25zdCBob3N0ID0gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lID09PSAnbG9jYWxob3N0JyA/ICdsb2NhbGhvc3Q6ODA4MCcgOiB3aW5kb3cubG9jYXRpb24uaG9zdDtcbiAgICAgIGNvbnN0IHdzVXJsID0gYCR7c29ja2V0UHJvdG9jb2x9Ly8ke2hvc3R9L3dzL2xvYmJ5P3Nlc3Npb25JZD0ke3RoaXMuc2Vzc2lvbklkfSZ0b2tlbj0ke2VuY29kZVVSSUNvbXBvbmVudCh0b2tlblZhbHVlKX1gO1xuXG4gICAgICB0aGlzLmxvYmJ5U29ja2V0ID0gbmV3IFdlYlNvY2tldCh3c1VybCk7XG4uLi5cblxuICAvLyBMb2JieSBjb25uZWN0aW9uIGhhbmRsZXJzXG4gIGhhbmRsZUxvYmJ5Q29ubmVjdCA9IChldmVudCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKGBMb2JieSBXZWJTb2NrZXQgY29ubmVjdGVkIGZvciBwbGF5ZXIgJHt0aGlzLnBsYXllcklkfWApO1xuICAgIGNvbnNvbGUubG9nKGBMb2JieSBjb25uZWN0aW9uIGVzdGFibGlzaGVkIGF0ICR7bmV3IERhdGUoKS50b0lTT1N0cmluZygpfWApO1xuXG4gICAgLy8gUmVzZXQgcmVjb25uZWN0IGF0dGVtcHRzIG9uIHN1Y2Nlc3NmdWwgY29ubmVjdGlvblxuICAgIHRoaXMucmVjb25uZWN0QXR0ZW1wdHMgPSAwO1xuXG4gICAgLy8gUmVxdWVzdCBjdXJyZW50IGdhbWUgbGlzdCBpbW1lZGlhdGVseSBhZnRlciBjb25uZWN0aW9uXG4gICAgLy8gUmVkdWNlZCB0aW1lb3V0IHRvIDUwMG1zIGZvciBmYXN0ZXIgaW5pdGlhbCBzeW5jXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcIlJlcXVlc3RpbmcgaW5pdGlhbCBnYW1lIGxpc3QgYWZ0ZXIgV2ViU29ja2V0IGNvbm5lY3Rpb25cIik7XG4gICAgICBpZiAod2luZG93LnJlZnJlc2hHYW1lTGlzdCAmJiB0eXBlb2Ygd2luZG93LnJlZnJlc2hHYW1lTGlzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3aW5kb3cucmVmcmVzaEdhbWVMaXN0KCk7XG4gICAgICB9XG4gICAgfSwgNTAwKTtcbiAgfTtcblxuICBoYW5kbGVMb2JieURpc2Nvbm5lY3QgPSAoZXZlbnQpID0+IHtcbiAgICBjb25zb2xlLmxvZyhgTG9iYnkgV2ViU29ja2V0IGRpc2Nvbm5lY3RlZDogJHtldmVudC5yZWFzb259YCk7XG5cbiAgICAvLyBUcnkgdG8gcmVjb25uZWN0IHVubGVzcyBpdCB3YXMgYW4gaW50ZW50aW9uYWwgZGlzY29ubmVjdFxuICAgIGlmICghZXZlbnQud2FzQ2xlYW4gJiYgdGhpcy5yZWNvbm5lY3RBdHRlbXB0cyA8IHRoaXMubWF4UmVjb25uZWN0QXR0ZW1wdHMpIHtcbiAgICAgIHRoaXMucmVjb25uZWN0QXR0ZW1wdHMrKztcblxuICAgICAgY29uc29sZS5sb2coYEF0dGVtcHRpbmcgdG8gcmVjb25uZWN0IHRvIGxvYmJ5ICgke3RoaXMucmVjb25uZWN0QXR0ZW1wdHN9LyR7dGhpcy5tYXhSZWNvbm5lY3RBdHRlbXB0c30pLi4uYCk7XG5cbiAgICAgIC8vIEV4cG9uZW50aWFsIGJhY2tvZmZcbiAgICAgIGNvbnN0IGRlbGF5ID0gdGhpcy5yZWNvbm5lY3RJbnRlcnZhbCAqIE1hdGgucG93KDEuNSwgdGhpcy5yZWNvbm5lY3RBdHRlbXB0cyAtIDEpO1xuXG4gICAgICB0aGlzLnJlY29ubmVjdFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuY29ubmVjdFRvTG9iYnkodGhpcy50b2tlbiwgdGhpcy5wbGF5ZXJJZCk7XG4gICAgICB9LCBkZWxheSk7XG4gICAgfVxuICB9O1xuXG4gIGhhbmRsZUxvYmJ5RXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgICBjb25zb2xlLmVycm9yKCdMb2JieSBXZWJTb2NrZXQgZXJyb3I6JywgZXJyb3IpO1xuICB9O1xuLi4uXG5cbiAgaGFuZGxlRGlzY29ubmVjdCA9IChldmVudCkgPT4ge1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICBjb25zb2xlLmxvZyhgV2ViU29ja2V0IGRpc2Nvbm5lY3RlZCBhdCAke3RpbWVzdGFtcH06IGNvZGU9JHtldmVudC5jb2RlfSwgcmVhc29uPSR7ZXZlbnQucmVhc29ufSwgd2FzQ2xlYW49JHtldmVudC53YXNDbGVhbn1gKTtcbiAgICBjb25zb2xlLmxvZyhgRGlzY29ubmVjdGlvbiBkZXRhaWxzIC0gR2FtZUlEOiAke3RoaXMuZ2FtZUlkfSwgUGxheWVySUQ6ICR7dGhpcy5wbGF5ZXJJZH0sIFNlc3Npb25JRDogJHt0aGlzLnNlc3Npb25JZH1gKTtcbiAgICBjb25zb2xlLmxvZyhgTmF2aWdhdGlvbiBzdGF0ZTogaXNOYXZpZ2F0aW5nPSR7dGhpcy5pc05hdmlnYXRpbmd9LCBwcmVzZXJ2ZUNvbm5lY3Rpb249JHt0aGlzLnByZXNlcnZlQ29ubmVjdGlvbn1gKTtcblxuICAgIC8vIENhbGwgY29ubmVjdGlvbiBjaGFuZ2UgY2FsbGJhY2tcbiAgICB0aGlzLm9uQ29ubmVjdGlvbkNoYW5nZSgnZGlzY29ubmVjdGVkJyk7XG4uLi5cblxuICAgIC8vIFRyeSB0byByZWNvbm5lY3QgdW5sZXNzIGl0IHdhcyBhbiBpbnRlbnRpb25hbCBkaXNjb25uZWN0IG9yIHByZXNlcnZlQ29ubmVjdGlvbiBpcyB0cnVlXG4gICAgaWYgKCFldmVudC53YXNDbGVhbiAmJiAhdGhpcy5wcmVzZXJ2ZUNvbm5lY3Rpb24gJiYgdGhpcy5yZWNvbm5lY3RBdHRlbXB0cyA8IHRoaXMubWF4UmVjb25uZWN0QXR0ZW1wdHMpIHtcbiAgICAgIHRoaXMucmVjb25uZWN0QXR0ZW1wdHMrKztcblxuICAgICAgY29uc29sZS5sb2coYEF0dGVtcHRpbmcgdG8gcmVjb25uZWN0ICgke3RoaXMucmVjb25uZWN0QXR0ZW1wdHN9LyR7dGhpcy5tYXhSZWNvbm5lY3RBdHRlbXB0c30pLi4uYCk7XG5cbiAgICAgIC8vIEV4cG9uZW50aWFsIGJhY2tvZmZcbiAgICAgIGNvbnN0IGRlbGF5ID0gdGhpcy5yZWNvbm5lY3RJbnRlcnZhbCAqIE1hdGgucG93KDEuNSwgdGhpcy5yZWNvbm5lY3RBdHRlbXB0cyAtIDEpO1xuXG4gICAgICB0aGlzLnJlY29ubmVjdFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBSZWNvbm5lY3Rpb24gYXR0ZW1wdCAke3RoaXMucmVjb25uZWN0QXR0ZW1wdHN9IGF0ICR7bmV3IERhdGUoKS50b0lTT1N0cmluZygpfWApO1xuICAgICAgICAvLyAtLS0gUGFzcyByZXF1aXJlZCBhcmd1bWVudHMgdG8gY29ubmVjdCAtLS1cbiAgICAgICAgdGhpcy5jb25uZWN0KHRoaXMuZ2FtZUlkLCB0aGlzLnBsYXllcklkLCB0aGlzLnRva2VuKVxuICAgICAgICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcihgUmVjb25uZWN0aW9uIGF0dGVtcHQgJHt0aGlzLnJlY29ubmVjdEF0dGVtcHRzfSBmYWlsZWQ6YCwgZXJyKSk7XG4gICAgICAgIC8vIC0tLVxuICAgICAgfSwgZGVsYXkpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wcmVzZXJ2ZUNvbm5lY3Rpb24pIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJDb25uZWN0aW9uIHByZXNlcnZlZCwgbm90IGF0dGVtcHRpbmcgcmVjb25uZWN0LlwiKTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50Lndhc0NsZWFuKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ2xlYW4gZGlzY29ubmVjdGlvbiwgbm90IGF0dGVtcHRpbmcgcmVjb25uZWN0LlwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcIk1heCByZWNvbm5lY3QgYXR0ZW1wdHMgcmVhY2hlZCwgZ2l2aW5nIHVwLlwiKTtcbiAgICAgICAgdGhpcy5vbkNvbm5lY3Rpb25DaGFuZ2UoJ2ZhaWxlZCcpOyAvLyBJbmRpY2F0ZSBmaW5hbCBmYWlsdXJlXG4gICAgfVxuICB9O1xuLi4uXG5cbiAgICAvLyBUcnkgdG8gZGV0ZWN0IHRoZSBzcGVjaWZpYyBpc3N1ZVxuICAgIGZldGNoKGBodHRwOi8vbG9jYWxob3N0OjgwODAvaGVhbHRoYClcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ0JhY2tlbmQgaGVhbHRoIGNoZWNrIHJlc3BvbnNlOicsIHJlc3BvbnNlLnN0YXR1cyk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0JhY2tlbmQgYXBwZWFycyB0byBiZSB1bnJlYWNoYWJsZS4gQ2hlY2sgaWYgdGhlIHNlcnZlciBpcyBydW5uaW5nIG9uIHBvcnQgODA4MDonLCBlcnIpO1xuICAgICAgfSk7XG4gIH07XG5cbiAgaGFuZGxlTWVzc2FnZSA9IChldmVudCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZygnUmF3IFdlYlNvY2tldCBtZXNzYWdlOicsIGV2ZW50LmRhdGEpO1xuXG4gICAgICAvLyBQYXJzZSB0aGUgSlNPTiBtZXNzYWdlXG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShldmVudC5kYXRhKTtcbiAgICAgIGNvbnNvbGUubG9nKCdSZWNlaXZlZCBtZXNzYWdlOicsIGRhdGEpO1xuXG4gICAgICAvLyBIYW5kbGUgZGlmZmVyZW50IG1lc3NhZ2UgdHlwZXNcbiAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2dhbWVfc3RhdGVfdXBkYXRlJzpcbiAgICAgICAgICAvLyBDYWxsIHRoZSBleGlzdGluZyBoYW5kbGVyIGZvciBnYW1lIHN0YXRlXG4gICAgICAgICAgdGhpcy5oYW5kbGVHYW1lU3RhdGUoZGF0YSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncGxheWVyX2pvaW5lZF9hY2snOlxuICAgICAgICAgIC8vIExvZyBhY2tub3dsZWRnbWVudCBmcm9tIHNlcnZlclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdbQUNLXSBTZXJ2ZXIgYWNrbm93bGVkZ2VkIHBsYXllciBqb2luZWQ6JywgZGF0YS5wbGF5ZXI/LmlkKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdnYW1lX3N0YXRlJzpcbiAgICAgICAgICB0aGlzLmhhbmRsZUdhbWVTdGF0ZShkYXRhKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdkaWNlX3JvbGxlZCc6XG4gICAgICAgICAgY29uc29sZS5sb2coJ1tESUNFXSBSZWNlaXZlZCBkaWNlIHJvbGwgcmVzdWx0OicsIGRhdGEpO1xuICAgICAgICAgIHRoaXMuaGFuZGxlRGljZVJvbGxlZChkYXRhKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdkaWNlX3JvbGxpbmcnOlxuICAgICAgICAgIGNvbnNvbGUubG9nKCdbRElDRV0gUmVjZWl2ZWQgZGljZSByb2xsaW5nIHN0YXRlOicsIGRhdGEuaXNSb2xsaW5nKTtcbiAgICAgICAgICB0aGlzLmhhbmRsZURpY2VSb2xsaW5nKGRhdGEuaXNSb2xsaW5nKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdhY3RpdmVfcGxheWVycyc6XG4gICAgICAgICAgdGhpcy5oYW5kbGVBY3RpdmVQbGF5ZXJzKGRhdGEpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3BsYXllcl9qb2luZWQnOlxuICAgICAgICAgIHRoaXMuaGFuZGxlUGxheWVySm9pbmVkKGRhdGEucGxheWVyKTtcbiAgICAgICAgICBicmVhaztcbi4uLlxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignW1NZTkNfRVJST1JdIEVycm9yIHdoaWxlIGFuYWx5emluZyBtYWxmb3JtZWQgSlNPTjonLCBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEF0dGVtcHQgcmVjb3ZlcnkgYnkgcmVxdWVzdGluZyBmcmVzaCBnYW1lIHN0YXRlXG4gICAgICAgIHRoaXMuYXR0ZW1wdFN5bmNSZWNvdmVyeSgnanNvbl9wYXJzZV9lcnJvcicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignW1NZTkNfRVJST1JdIEVycm9yIHByb2Nlc3NpbmcgV2ViU29ja2V0IG1lc3NhZ2U6JywgZXJyb3IpO1xuICAgICAgICB0aGlzLmhhbmRsZVN5bmNFcnJvcignbWVzc2FnZV9wcm9jZXNzaW5nJywgZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBIZWxwZXIgbWV0aG9kIHRvIHByb2Nlc3MgcmVjb3ZlcmVkIG1lc3NhZ2VzIGZyb20gSlNPTiBwYXJzaW5nIGVycm9yc1xuICBwcm9jZXNzUmVjb3ZlcmVkTWVzc2FnZSA9IChkYXRhKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ1Byb2Nlc3NpbmcgcmVjb3ZlcmVkIG1lc3NhZ2U6JywgZGF0YSk7XG4uLi5cblxuICBoYW5kbGVDYXJkUmVtYWluaW5nID0gKGNhcmRzUmVtYWluaW5nKSA9PiB7XG4gICAgc3RvcmUuZGlzcGF0Y2godXBkYXRlQ2FyZHNSZW1haW5pbmcoY2FyZHNSZW1haW5pbmcpKTtcbiAgfTtcblxuICBoYW5kbGVDYXJkRHJhd24gPSAoY2FyZCkgPT4ge1xuICAgIGNvbnN0IHsgZGlzcGF0Y2ggfSA9IHN0b3JlO1xuICAgIC8vIFVzZSB0aGUgbWFpbiBnYW1lU2xpY2UncyBhZGRHYW1lTWVzc2FnZSB0byBzaG93IGNhcmQgaW5mb3JtYXRpb25cbiAgICBkaXNwYXRjaChhZGRHYW1lTWVzc2FnZSh7XG4gICAgICB0eXBlOiAnQ0FSRCcsXG4gICAgICBjb250ZW50OiBgQ2FyZCBkcmF3bjogJHtjYXJkLm5hbWUgfHwgJ1Vua25vd24nfSAtICR7Y2FyZC5kZXNjcmlwdGlvbiB8fCAnTm8gZGVzY3JpcHRpb24nfWAsXG4gICAgICBkYXRhOiBjYXJkLFxuICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpXG4gICAgfSkpO1xuICB9O1xuXG4gIGhhbmRsZUNhcmRQbGF5ZWQgPSAoY2FyZElkKSA9PiB7XG4gICAgLy8gQWRkIGEgZ2FtZSBtZXNzYWdlIGZvciBjYXJkIHBsYXllZFxuICAgIHN0b3JlLmRpc3BhdGNoKGFkZEdhbWVNZXNzYWdlKHtcbiAgICAgIHR5cGU6ICdDQVJEX1BMQVlFRCcsXG4gICAgICBjb250ZW50OiBgQ2FyZCAke2NhcmRJZH0gd2FzIHBsYXllZGAsXG4gICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcbiAgICB9KSk7XG4gIH07XG4uLi5cblxuICAgICAgICAvLyBJZiBnYW1lIGhhc24ndCBzdGFydGVkIHlldCwgdHJ5IGFnYWluXG4gICAgICAgIGlmICghZ2FtZVN0YXRlLmdhbWVTdGFydGVkIHx8IGdhbWVTdGF0ZS5nYW1lUGhhc2UgIT09ICdwbGF5aW5nJyB8fFxuICAgICAgICAgICAgc2xpY2VzR2FtZVN0YXRlLnN0YXR1cyAhPT0gJ0FDVElWRScpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnW1NUQVJUX0dBTUVdIEdhbWUgbm90IHN0YXJ0ZWQgeWV0LCBzZW5kaW5nIGdhbWU6c3RhcnQgbWVzc2FnZSBhZ2FpbicpO1xuICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2UoJ2dhbWU6c3RhcnQnLCB7fSk7XG5cbiAgICAgICAgICAvLyBEaXNwYXRjaCBzdGFydEdhbWVBc3luYyBhY3Rpb24gYWdhaW5cbiAgICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgICB0eXBlOiAnZ2FtZS9zdGFydEdhbWVBc3luYy9mdWxmaWxsZWQnLFxuICAgICAgICAgICAgcGF5bG9hZDogdHJ1ZSxcbiAgICAgICAgICAgIG1ldGE6IHsgcmVxdWVzdElkOiAnZ2FtZV9zdGFydF9yZXRyeScsIGFyZzogdW5kZWZpbmVkIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIFN5bmNocm9uaXplIGdhbWUgc3RhdGUgYWdhaW5cbiAgICAgICAgICB0aGlzLnN5bmNHYW1lU3RhdGVBY3Jvc3NTbGljZXMoJ0FDVElWRScpO1xuXG4gICAgICAgICAgLy8gU2V0IHVwIHRoZSBnYW1lIHN0YXJ0IHJldHJ5IGNoZWNrXG4gICAgICAgICAgdGhpcy5zZXR1cEdhbWVTdGFydFJldHJ5Q2hlY2soKTtcbiAgICAgICAgfVxuICAgICAgfSwgMTAwMCk7XG5cbiAgICAgIC8vIFNldCB1cCB0aGUgZ2FtZSBzdGFydCByZXRyeSBjaGVjayBpbW1lZGlhdGVseVxuICAgICAgdGhpcy5zZXR1cEdhbWVTdGFydFJldHJ5Q2hlY2soKTtcbiAgICB9LCAyMDApO1xuICB9O1xuXG4gIHJvbGxEaWNlID0gKCkgPT4ge1xuICAgIHRoaXMuc2VuZE1lc3NhZ2UoJ3JvbGxfZGljZScsIHt9KTtcbiAgfTtcbi4uLlxuXG4gICAgLy8gVXNlIHRoZSBzeW5jaHJvbml6YXRpb24gZnVuY3Rpb24gdG8gZW5zdXJlIGNvbnNpc3RlbnQgc3RhdGUgYWNyb3NzIHNsaWNlc1xuICAgIHRoaXMuc3luY0dhbWVTdGF0ZUFjcm9zc1NsaWNlcygnQUNUSVZFJyk7XG5cbiAgICAvLyBTdG9yZSB0aGUgZ2FtZUlkIGZvciBuYXZpZ2F0aW9uXG4gICAgY29uc3QgZ2FtZUlkID0gdGhpcy5nYW1lSWQgfHwgc3RvcmVkR2FtZUlkO1xuXG4gICAgLy8gU2V0IHVwIG11bHRpcGxlIHJldHJ5IGNoZWNrcyB3aXRoIGRpZmZlcmVudCBpbml0aWFsIGRlbGF5c1xuICAgIC8vIFRoaXMgY3JlYXRlcyBhIG1vcmUgcm9idXN0IHJldHJ5IHBhdHRlcm4gdGhhdCdzIGxlc3MgbGlrZWx5IHRvIGZhaWxcblxuICAgIC8vIEZpcnN0IGNoZWNrIHZlcnkgcXVpY2tseVxuICAgIHRoaXMuZ2FtZVN0YXJ0UmV0cnlUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coYFtHQU1FX1NUQVJUX1JFVFJZXSBFeGVjdXRpbmcgZmlyc3QgcmV0cnkgY2hlY2sgZm9yIHBsYXllciAke3RoaXMucGxheWVySWR9YCk7XG4gICAgICB0aGlzLmNoZWNrR2FtZUJvYXJkVmlzaWJpbGl0eShnYW1lSWQsIGhhc1N0b3JhZ2VGbGFnKTtcbiAgICB9LCAxMDApO1xuLi4uXG5cbiAgLy8gSGFuZGxlIHN5bmNocm9uaXphdGlvbiBlcnJvcnNcbiAgaGFuZGxlU3luY0Vycm9yID0gKGVycm9yVHlwZSwgZXJyb3IsIGRhdGEgPSBudWxsKSA9PiB7XG4gICAgY29uc29sZS5lcnJvcihgW1NZTkNfRVJST1JdICR7ZXJyb3JUeXBlfSBlcnJvcjpgLCBlcnJvcik7XG5cbiAgICAvLyBMb2cgZGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgc3RhdGVcbiAgICBjb25zdCBjdXJyZW50U3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGNvbnNvbGUubG9nKCdbU1lOQ19FUlJPUl0gQ3VycmVudCBnYW1lIHN0YXRlOicsIHtcbiAgICAgIGdhbWVTdGFydGVkOiBjdXJyZW50U3RhdGUuZ2FtZS5nYW1lU3RhcnRlZCxcbiAgICAgIGdhbWVQaGFzZTogY3VycmVudFN0YXRlLmdhbWUuZ2FtZVBoYXNlLFxuICAgICAgaG9zdElkOiBjdXJyZW50U3RhdGUuZ2FtZS5ob3N0SWQsXG4gICAgICBwbGF5ZXJDb3VudDogT2JqZWN0LmtleXMoY3VycmVudFN0YXRlLnBsYXllcnMucGxheWVycyB8fCB7fSkubGVuZ3RoLFxuICAgICAgc2xpY2VzR2FtZVN0YXR1czogY3VycmVudFN0YXRlLnNsaWNlcz8uZ2FtZT8uc3RhdHVzIHx8ICd1bmtub3duJ1xuICAgIH0pO1xuXG4gICAgLy8gTG9nIHRoZSBkYXRhIHRoYXQgY2F1c2VkIHRoZSBlcnJvclxuICAgIGlmIChkYXRhKSB7XG4gICAgICBjb25zb2xlLmxvZygnW1NZTkNfRVJST1JdIERhdGEgdGhhdCBjYXVzZWQgdGhlIGVycm9yOicsIGRhdGEpO1xuICAgIH1cblxuICAgIC8vIEF0dGVtcHQgcmVjb3ZlcnkgYmFzZWQgb24gZXJyb3IgdHlwZVxuICAgIHRoaXMuYXR0ZW1wdFN5bmNSZWNvdmVyeShlcnJvclR5cGUpO1xuICB9O1xuXG4gIC8vIEF0dGVtcHQgdG8gcmVjb3ZlciBmcm9tIHN5bmNocm9uaXphdGlvbiBlcnJvcnNcbiAgYXR0ZW1wdFN5bmNSZWNvdmVyeSA9IChlcnJvclR5cGUpID0+IHtcbiAgICBjb25zb2xlLmxvZyhgW1NZTkNfUkVDT1ZFUlldIEF0dGVtcHRpbmcgcmVjb3ZlcnkgZnJvbSAke2Vycm9yVHlwZX1gKTtcblxuICAgIC8vIE9ubHkgYXR0ZW1wdCByZWNvdmVyeSBpZiBzb2NrZXQgaXMgb3BlblxuICAgIGlmICghdGhpcy5zb2NrZXQgfHwgdGhpcy5zb2NrZXQucmVhZHlTdGF0ZSAhPT0gV2ViU29ja2V0Lk9QRU4pIHtcbiAgICAgIGNvbnNvbGUubG9nKCdbU1lOQ19SRUNPVkVSWV0gQ2Fubm90IGF0dGVtcHQgcmVjb3Zlcnk6IHNvY2tldCBub3Qgb3BlbicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFJlcXVlc3QgZnJlc2ggZ2FtZSBzdGF0ZVxuICAgIGNvbnNvbGUubG9nKCdbU1lOQ19SRUNPVkVSWV0gUmVxdWVzdGluZyBmcmVzaCBnYW1lIHN0YXRlJyk7XG4gICAgdGhpcy5zZW5kTWVzc2FnZSgnZ2V0X2dhbWVfc3RhdGUnLCB7IGZ1bGw6IHRydWUgfSk7XG5cbiAgICAvLyBSZXF1ZXN0IGFjdGl2ZSBwbGF5ZXJzIGxpc3RcbiAgICBjb25zb2xlLmxvZygnW1NZTkNfUkVDT1ZFUlldIFJlcXVlc3RpbmcgYWN0aXZlIHBsYXllcnMgbGlzdCcpO1xuICAgIHRoaXMuc2VuZE1lc3NhZ2UoJ2dldF9hY3RpdmVfcGxheWVycycsIHt9KTtcblxuICAgIC8vIExvZyByZWNvdmVyeSBhdHRlbXB0XG4gICAgY29uc29sZS5sb2coJ1tTWU5DX1JFQ09WRVJZXSBSZWNvdmVyeSBhdHRlbXB0IGNvbXBsZXRlZCBhdCcsIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSk7XG4gIH07XG4uLi5cblxuICAvLyBTZXR1cCBzb2NrZXQgZXZlbnQgaGFuZGxlcnNcbiAgc2V0dXBTb2NrZXRFdmVudEhhbmRsZXJzKCkge1xuICAgIGlmICghdGhpcy5zb2NrZXQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Nhbm5vdCBzZXQgdXAgZXZlbnQgaGFuZGxlcnM6IHNvY2tldCBpcyBub3QgaW5pdGlhbGl6ZWQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnNvY2tldC5vbm9wZW4gPSB0aGlzLmhhbmRsZUNvbm5lY3Q7XG4gICAgdGhpcy5zb2NrZXQub25jbG9zZSA9IHRoaXMuaGFuZGxlRGlzY29ubmVjdDtcbiAgICB0aGlzLnNvY2tldC5vbmVycm9yID0gdGhpcy5oYW5kbGVFcnJvcjtcbiAgICB0aGlzLnNvY2tldC5vbm1lc3NhZ2UgPSB0aGlzLmhhbmRsZU1lc3NhZ2U7XG5cbiAgICBjb25zb2xlLmxvZygnV2ViU29ja2V0IGV2ZW50IGhhbmRsZXJzIHNldCB1cCcpO1xuICB9XG4uLi5cblxuICAvLyBBZGQgdGhpcyBuZXcgaGFuZGxlciBtZXRob2RcbiAgaGFuZGxlVHVybkNoYW5nZWQgPSAoZGF0YSkgPT4ge1xuICAgIGNvbnN0IHsgZGlzcGF0Y2ggfSA9IHN0b3JlO1xuICAgIGNvbnN0IHsgY3VycmVudFR1cm4sIHBsYXllck5hbWUsIHJvbGxlZERvdWJsZXMgfSA9IGRhdGE7XG4gICAgLy8gVXBkYXRlIHRoZSBjdXJyZW50IHBsYXllciBpbiBSZWR1eFxuICAgIGRpc3BhdGNoKHNldEN1cnJlbnRQbGF5ZXIoY3VycmVudFR1cm4pKTtcblxuICAgIC8vIEFkZCBhIGdhbWUgbWVzc2FnZVxuICAgIGxldCBjb250ZW50ID0gcm9sbGVkRG91Ymxlc1xuICAgICAgPyBgJHtwbGF5ZXJOYW1lfSByb2xsZWQgZG91YmxlcyBhbmQgZ2V0cyBhbm90aGVyIHR1cm4hYFxuICAgICAgOiBgSXQncyBub3cgJHtwbGF5ZXJOYW1lfSdzIHR1cm4uYDtcbiAgICBkaXNwYXRjaChhZGRHYW1lTWVzc2FnZSh7XG4gICAgICB0eXBlOiByb2xsZWREb3VibGVzID8gJ0VYVFJBX1RVUk4nIDogJ1RVUk5fQ0hBTkdFJyxcbiAgICAgIHBsYXllcklkOiBjdXJyZW50VHVybixcbiAgICAgIGNvbnRlbnQsXG4gICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcbiAgICB9KSk7XG4uLi5cblBhdGg6IGtla29wb2x5LWJhY2tlbmQvaW50ZXJuYWwvYXBpL2hhbmRsZXJzL3dlYnNvY2tldF9oYW5kbGVyLmdvXG5wYWNrYWdlIGhhbmRsZXJzXG5cbmltcG9ydCAoXG5cdFwiZm10XCJcblx0XCJuZXQvaHR0cFwiXG5cdFwic3RyaW5nc1wiXG5cdFwidGltZVwiXG5cblx0XCJnaXRodWIuY29tL2dvbGFuZy1qd3Qvand0L3Y1XCJcblx0XCJnaXRodWIuY29tL2dvcmlsbGEvd2Vic29ja2V0XCJcblx0XCJnaXRodWIuY29tL2xhYnN0YWNrL2VjaG8vdjRcIlxuXHRcImdvLnViZXIub3JnL3phcFwiXG5cblx0XCJnaXRodWIuY29tL2tla29wb2x5L2JhY2tlbmQvaW50ZXJuYWwvYXBpL21pZGRsZXdhcmUvYXV0aFwiIC8vIEltcG9ydCBhdXRoIGNsYWltc1xuXHRcImdpdGh1Yi5jb20va2Vrb3BvbHkvYmFja2VuZC9pbnRlcm5hbC9jb25maWdcIiAgICAgICAgICAgICAgLy8gSW1wb3J0IGNvbmZpZ1xuXHRnYW1lV3MgXCJnaXRodWIuY29tL2tla29wb2x5L2JhY2tlbmQvaW50ZXJuYWwvZ2FtZS93ZWJzb2NrZXRcIlxuKVxuXG4vLyBXZWJTb2NrZXRIYW5kbGVyIGhhbmRsZXMgV2ViU29ja2V0IGNvbm5lY3Rpb25zXG50eXBlIFdlYlNvY2tldEhhbmRsZXIgc3RydWN0IHtcblx0aHViICAgICpnYW1lV3MuSHViXG5cdGxvZ2dlciAqemFwLlN1Z2FyZWRMb2dnZXJcblx0Y2ZnICAgICpjb25maWcuQ29uZmlnIC8vIEFkZGVkIGNvbmZpZyBmaWVsZFxufVxuXG4vLyBOZXdXZWJTb2NrZXRIYW5kbGVyIGNyZWF0ZXMgYSBuZXcgV2ViU29ja2V0SGFuZGxlclxuZnVuYyBOZXdXZWJTb2NrZXRIYW5kbGVyKGh1YiAqZ2FtZVdzLkh1YiwgbG9nZ2VyICp6YXAuU3VnYXJlZExvZ2dlciwgY2ZnICpjb25maWcuQ29uZmlnKSAqV2ViU29ja2V0SGFuZGxlciB7IC8vIEFkZGVkIGNmZyBwYXJhbWV0ZXJcblx0cmV0dXJuICZXZWJTb2NrZXRIYW5kbGVye1xuXHRcdGh1YjogICAgaHViLFxuXHRcdGxvZ2dlcjogbG9nZ2VyLFxuXHRcdGNmZzogICAgY2ZnLCAvLyBTdG9yZSBjb25maWdcblx0fVxufVxuXG4vLyBVcGdyYWRlciBpcyB1c2VkIHRvIHVwZ3JhZGUgSFRUUCBjb25uZWN0aW9ucyB0byBXZWJTb2NrZXQgY29ubmVjdGlvbnNcbnZhciB1cGdyYWRlciA9IHdlYnNvY2tldC5VcGdyYWRlcntcblx0UmVhZEJ1ZmZlclNpemU6ICAxMDI0LFxuXHRXcml0ZUJ1ZmZlclNpemU6IDEwMjQsXG5cdC8vIEFsbG93IGNvbm5lY3Rpb25zIGZyb20gYW55IG9yaWdpblxuXHRDaGVja09yaWdpbjogZnVuYyhyICpodHRwLlJlcXVlc3QpIGJvb2wge1xuXHRcdHJldHVybiB0cnVlXG5cdH0sXG59XG4uLi5cblxuXHRjbGFpbXMsIG9rIDo9IHRva2VuLkNsYWltcy4oKmF1dGguQ2xhaW1zKVxuXHRpZiAhb2sge1xuXHRcdHJldHVybiBuaWwsIGZtdC5FcnJvcmYoXCJmYWlsZWQgdG8gZXh0cmFjdCBjbGFpbXNcIilcblx0fVxuXG5cdHJldHVybiBjbGFpbXMsIG5pbFxufVxuXG4vLyBIYW5kbGVDb25uZWN0aW9uIGhhbmRsZXMgV2ViU29ja2V0IGNvbm5lY3Rpb25zXG5mdW5jIChoICpXZWJTb2NrZXRIYW5kbGVyKSBIYW5kbGVDb25uZWN0aW9uKGMgZWNoby5Db250ZXh0KSBlcnJvciB7XG5cdGgubG9nZ2VyLkluZm9mKFwiV2ViU29ja2V0IGNvbm5lY3Rpb24gYXR0ZW1wdCByZWNlaXZlZFwiKVxuXG5cdC8vIEdldCBnYW1lIElEIGZyb20gcGF0aCBwYXJhbWV0ZXIgYW5kIG5vcm1hbGl6ZSB0byBsb3dlcmNhc2Vcblx0Z2FtZUlEIDo9IHN0cmluZ3MuVG9Mb3dlcihjLlBhcmFtKFwiZ2FtZUlkXCIpKVxuXHRoLmxvZ2dlci5JbmZvZihcIk9yaWdpbmFsIGdhbWVJRDogJXMsIE5vcm1hbGl6ZWQ6ICVzXCIsIGMuUGFyYW0oXCJnYW1lSWRcIiksIGdhbWVJRClcblx0aWYgZ2FtZUlEID09IFwiXCIge1xuXHRcdGgubG9nZ2VyLldhcm4oXCJDb25uZWN0aW9uIGF0dGVtcHQgbWlzc2luZyBnYW1lSWRcIilcblx0XHRyZXR1cm4gZWNoby5OZXdIVFRQRXJyb3IoaHR0cC5TdGF0dXNCYWRSZXF1ZXN0LCBcIk1pc3NpbmcgZ2FtZSBJRFwiKVxuXHR9XG5cdGgubG9nZ2VyLkluZm9mKFwiQ29ubmVjdGlvbiBmb3IgZ2FtZTogJXNcIiwgZ2FtZUlEKVxuLi4uXG5cdGgubG9nZ2VyLkluZm9mKFwiU2Vzc2lvbklEOiAlc1wiLCBzZXNzaW9uSUQpXG5cblx0Ly8gTG9nIGNvbXBsZXRlIGNvbm5lY3Rpb24gcGFyYW1ldGVyc1xuXHRoLmxvZ2dlci5JbmZvZihcIkF0dGVtcHRpbmcgdG8gdXBncmFkZSBjb25uZWN0aW9uIC0gR2FtZUlEOiAlcyAobG93ZXJjYXNlKSwgUGxheWVySUQ6ICVzLCBTZXNzaW9uSUQ6ICVzXCIsXG5cdFx0Z2FtZUlELCB1c2VySUQsIHNlc3Npb25JRClcblxuXHQvLyBVcGdyYWRlIEhUVFAgY29ubmVjdGlvbiB0byBXZWJTb2NrZXQgd2l0aCBnZW5lcm91cyBDT1JTIHNldHRpbmdzXG5cdHVwZ3JhZGVyLkNoZWNrT3JpZ2luID0gZnVuYyhyICpodHRwLlJlcXVlc3QpIGJvb2wge1xuXHRcdHJldHVybiB0cnVlIC8vIEFjY2VwdCBhbGwgb3JpZ2lucyBmb3Igbm93XG5cdH1cblxuXHRjb25uLCBlcnIgOj0gdXBncmFkZXIuVXBncmFkZShjLlJlc3BvbnNlKCksIGMuUmVxdWVzdCgpLCBuaWwpXG5cdGlmIGVyciAhPSBuaWwge1xuXHRcdGgubG9nZ2VyLkVycm9yZihcIkZhaWxlZCB0byB1cGdyYWRlIGNvbm5lY3Rpb246ICV2XCIsIGVycilcblx0XHRyZXR1cm4gZWNoby5OZXdIVFRQRXJyb3IoaHR0cC5TdGF0dXNJbnRlcm5hbFNlcnZlckVycm9yLCBcIkZhaWxlZCB0byBlc3RhYmxpc2ggV2ViU29ja2V0IGNvbm5lY3Rpb25cIilcblx0fVxuXG5cdGgubG9nZ2VyLkluZm9mKFwiQ29ubmVjdGlvbiBzdWNjZXNzZnVsbHkgdXBncmFkZWQgdG8gV2ViU29ja2V0XCIpXG5cblx0Ly8gSGFuZGxlIFdlYlNvY2tldCBjb25uZWN0aW9uXG5cdGguaHViLkhhbmRsZVdlYlNvY2tldENvbm5lY3Rpb24oY29ubiwgZ2FtZUlELCB1c2VySUQsIHNlc3Npb25JRClcblx0aC5sb2dnZXIuSW5mb2YoXCJXZWJTb2NrZXQgY29ubmVjdGlvbiBoYW5kZWQgdG8gaHViXCIpXG5cblx0cmV0dXJuIG5pbFxufVxuXG4vLyBIYW5kbGVMb2JieUNvbm5lY3Rpb24gaGFuZGxlcyBXZWJTb2NrZXQgY29ubmVjdGlvbnMgZm9yIHRoZSBsb2JieVxuZnVuYyAoaCAqV2ViU29ja2V0SGFuZGxlcikgSGFuZGxlTG9iYnlDb25uZWN0aW9uKGMgZWNoby5Db250ZXh0KSBlcnJvciB7XG5cdGgubG9nZ2VyLkluZm9mKFwiTG9iYnkgV2ViU29ja2V0IGNvbm5lY3Rpb24gYXR0ZW1wdCByZWNlaXZlZFwiKVxuLi4uXG5cblx0aC5sb2dnZXIuSW5mb2YoXCJMb2JieSBjb25uZWN0aW9uIHN1Y2Nlc3NmdWxseSB1cGdyYWRlZCB0byBXZWJTb2NrZXRcIilcblxuXHQvLyBIYW5kbGUgV2ViU29ja2V0IGNvbm5lY3Rpb24gd2l0aCBcImxvYmJ5XCIgYXMgdGhlIGdhbWVJRFxuXHRoLmh1Yi5IYW5kbGVXZWJTb2NrZXRDb25uZWN0aW9uKGNvbm4sIFwibG9iYnlcIiwgdXNlcklELCBzZXNzaW9uSUQpXG5cdGgubG9nZ2UuLi4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCIxODc2YTFjNi0zODJkLTQ0YjYtYjFhNS00OTNkNTA2Y2NiZDI7dG9vbHVfdnJ0eF8wMVJtREh4Nm1paVB4YjlERnZKMUpHWUEiOnsicmVxdWVzdElkIjoiMTg3NmExYzYtMzgyZC00NGI2LWIxYTUtNDkzZDUwNmNjYmQyIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMVJtREh4Nm1paVB4YjlERnZKMUpHWUEiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBrZWtvcG9seS1iYWNrZW5kL2ludGVybmFsL2dhbWUvbWFuYWdlci9nYW1lX21hbmFnZXIuZ29cbi4uLlxuXHRnYW1lLlR1cm5PcmRlciA9IG5ld1R1cm5PcmRlclxuXG5cdC8vIElmIGl0IHdhcyB0aGlzIHBsYXllcidzIHR1cm4sIG1vdmUgdG8gbmV4dCBwbGF5ZXJcblx0aWYgZ2FtZS5DdXJyZW50VHVybiA9PSBwbGF5ZXJJRCAmJiBsZW4obmV3VHVybk9yZGVyKSA+IDAge1xuXHRcdC8vIEZpbmQgdGhlIG5leHQgcGxheWVyIGluIHR1cm4gb3JkZXJcblx0XHRuZXh0SW5kZXggOj0gMFxuXHRcdGZvciBpLCBpZCA6PSByYW5nZSBnYW1lLlR1cm5PcmRlciB7XG5cdFx0XHRpZiBpZCA9PSBwbGF5ZXJJRCB7XG5cdFx0XHRcdG5leHRJbmRleCA9IChpICsgMSkgJSBsZW4oZ2FtZS5UdXJuT3JkZXIpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHR9XG5cdFx0fVxuXHRcdGdhbWUuQ3VycmVudFR1cm4gPSBnYW1lLlR1cm5PcmRlcltuZXh0SW5kZXhdXG5cdH1cblxuXHQvLyBDaGVjayBpZiBnYW1lIHNob3VsZCBlbmQgKGUuZy4sIG9ubHkgb25lIHBsYXllciBsZWZ0KVxuXHRpZiBsZW4obmV3VHVybk9yZGVyKSA8PSAxIHtcblx0XHQvLyBTZXQgdGhlIGxhc3QgcGxheWVyIGFzIHdpbm5lclxuXHRcdGlmIGxlbihuZXdUdXJuT3JkZXIpID09IDEge1xuXHRcdFx0Z2FtZS5XaW5uZXJJRCA9IG5ld1R1cm5PcmRlclswXVxuXHRcdH1cblx0XHRnYW1lLlN0YXR1cyA9IG1vZGVscy5HYW1lU3RhdHVzQ29tcGxldGVkXG5cdH1cbn1cbi4uLlxuXG4vLyBQbGFjZWhvbGRlciBmb3IgYWN0aW9uIHByb2Nlc3NpbmcgbWV0aG9kc1xuZnVuYyAoZ20gKkdhbWVNYW5hZ2VyKSBwcm9jZXNzUm9sbERpY2VBY3Rpb24oZ2FtZSAqbW9kZWxzLkdhbWUsIHBsYXllcklEIHN0cmluZywgcGF5bG9hZCBpbnRlcmZhY2V7fSkgZXJyb3Ige1xuXHRnbS5sb2dnZXIuSW5mb2YoXCJQbGF5ZXIgJXMgcm9sbGluZyBkaWNlIGluIGdhbWUgJXNcIiwgcGxheWVySUQsIGdhbWUuSUQuSGV4KCkpXG5cblx0Ly8gR2VuZXJhdGUgcmFuZG9tIGRpY2UgdmFsdWVzICgxLTYgZm9yIGVhY2ggZGllKVxuXHRkaWNlMSA6PSAxICsgKHRpbWUuTm93KCkuVW5peE5hbm8oKSAlIDYpXG5cdHRpbWUuU2xlZXAoMSAqIHRpbWUuTWlsbGlzZWNvbmQpXG5cdGRpY2UyIDo9IDEgKyAodGltZS5Ob3coKS5Vbml4TmFubygpICUgNilcblx0dG90YWxNb3ZlIDo9IGludChkaWNlMSArIGRpY2UyKVxuXG5cdC8vIEZpbmQgdGhlIHBsYXllclxuXHRwbGF5ZXJJbmRleCA6PSAtMVxuXHRmb3IgaSwgcGxheWVyIDo9IHJhbmdlIGdhbWUuUGxheWVycyB7XG5cdFx0aWYgcGxheWVyLklEID09IHBsYXllcklEIHtcblx0XHRcdHBsYXllckluZGV4ID0gaVxuXHRcdFx0YnJlYWtcblx0XHR9XG5cdH1cblx0aWYgcGxheWVySW5kZXggPT0gLTEge1xuXHRcdHJldHVybiBmbXQuRXJyb3JmKFwicGxheWVyIG5vdCBmb3VuZCBpbiBnYW1lXCIpXG5cdH1cblx0cGxheWVyIDo9ICZnYW1lLlBsYXllcnNbcGxheWVySW5kZXhdXG5cblx0Ly8gSmFpbCBsb2dpY1xuXHRpZiBwbGF5ZXIuSW5KYWlsIHtcblx0XHRpZiBkaWNlMSA9PSBkaWNlMiB7XG5cdFx0XHQvLyBSb2xsZWQgZG91YmxlcywgZ2V0IG91dCBvZiBqYWlsXG5cdFx0XHRwbGF5ZXIuSW5KYWlsID0gZmFsc2Vcblx0XHRcdHBsYXllci5KYWlsVHVybnMgPSAwXG5cdFx0XHRnbS5sb2dnZXIuSW5mb2YoXCJQbGF5ZXIgJXMgcm9sbGVkIGRvdWJsZXMgYW5kIGlzIHJlbGVhc2VkIGZyb20gamFpbCFcIiwgcGxheWVySUQpXG5cdFx0XHQvLyBNb3ZlIGZvcndhcmQgYnkgZGljZSByb2xsIGZyb20gamFpbCAocG9zaXRpb24gMjUpXG5cdFx0XHRwbGF5ZXIuUG9zaXRpb24gPSAoMjUgKyB0b3RhbE1vdmUpICUgNDBcblx0XHRcdC8vIEJyb2FkY2FzdCByZWxlYXNlIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgZ20ud3NIdWIgIT0gbmlsIHtcblx0XHRcdFx0bXNnIDo9IG1hcFtzdHJpbmddaW50ZXJmYWNle317XG5cdFx0XHRcdFx0XCJ0eXBlXCI6ICAgICBcImphaWxfZXZlbnRcIixcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IHBsYXllcklELFxuXHRcdFx0XHRcdFwiZXZlbnRcIjogICAgXCJyZWxlYXNlZFwiLFxuXHRcdFx0XHRcdFwiZGljZVwiOiAgICAgW11pbnR7aW50KGRpY2UxKSwgaW50KGRpY2UyKX0sXG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgbXNnQnl0ZXMsIGVyciA6PSBqc29uLk1hcnNoYWwobXNnKTsgZXJyID09IG5pbCB7XG5cdFx0XHRcdFx0Z20ud3NIdWIuQnJvYWRjYXN0VG9HYW1lKGdhbWUuSUQuSGV4KCksIG1zZ0J5dGVzKVxuXHRcdFx0XHR9XG5cdFx0XHR9XG4uLi5cblx0fSBlbHNlIHtcblx0XHQvLyBOb3QgaW4gamFpbCwgbm9ybWFsIG1vdmVcblx0XHRvbGRQb3NpdGlvbiA6PSBwbGF5ZXIuUG9zaXRpb25cblx0XHRuZXdQb3NpdGlvbiA6PSAob2xkUG9zaXRpb24gKyB0b3RhbE1vdmUpICUgNDBcblx0XHQvLyBDaGVjayBmb3IgJ0dvIHRvIEphaWwnIChwb3NpdGlvbiAzMClcblx0XHRpZiBuZXdQb3NpdGlvbiA9PSAzMCB7XG5cdFx0XHRwbGF5ZXIuUG9zaXRpb24gPSAyNSAvLyBKYWlsIHBvc2l0aW9uXG5cdFx0XHRwbGF5ZXIuSW5KYWlsID0gdHJ1ZVxuXHRcdFx0cGxheWVyLkphaWxUdXJucyA9IDNcblx0XHRcdGdtLmxvZ2dlci5JbmZvZihcIlBsYXllciAlcyBsYW5kZWQgb24gR28gdG8gSmFpbCEgU2VudCB0byBqYWlsICgyNSkgZm9yIDMgdHVybnMuXCIsIHBsYXllcklEKVxuXHRcdFx0aWYgZ20ud3NIdWIgIT0gbmlsIHtcblx0XHRcdFx0bXNnIDo9IG1hcFtzdHJpbmddaW50ZXJmYWNle317XG5cdFx0XHRcdFx0XCJ0eXBlXCI6ICAgICAgXCJqYWlsX2V2ZW50XCIsXG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiAgcGxheWVySUQsXG5cdFx0XHRcdFx0XCJldmVudFwiOiAgICAgXCJqYWlsZWRcIixcblx0XHRcdFx0XHRcImphaWxUdXJuc1wiOiAzLFxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIG1zZ0J5dGVzLCBlcnIgOj0ganNvbi5NYXJzaGFsKG1zZyk7IGVyciA9PSBuaWwge1xuXHRcdFx0XHRcdGdtLndzSHViLkJyb2FkY2FzdFRvR2FtZShnYW1lLklELkhleCgpLCBtc2dCeXRlcylcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBOb3JtYWwgbW92ZVxuXHRcdFx0cGxheWVyLlBvc2l0aW9uID0gbmV3UG9zaXRpb25cblx0XHR9XG5cdH1cbi4uLlxuXG5cdC8vIC0tLSBUVVJOIE1BTkFHRU1FTlQgQU5EIEJST0FEQ0FTVCAtLS1cblx0aWYgZ20ud3NIdWIgIT0gbmlsIHtcblx0XHRyb2xsZWREb3VibGVzIDo9IGRpY2UxID09IGRpY2UyXG5cdFx0dmFyIG5leHRQbGF5ZXJJRCBzdHJpbmdcblx0XHRpZiBwbGF5ZXIuSW5KYWlsIHtcblx0XHRcdG5leHRQbGF5ZXJJRCA9IHBsYXllcklEIC8vIFN0aWxsIGluIGphaWwsIHNhbWUgcGxheWVyJ3MgdHVyblxuXHRcdH0gZWxzZSBpZiByb2xsZWREb3VibGVzIHtcblx0XHRcdG5leHRQbGF5ZXJJRCA9IHBsYXllcklEIC8vIFBsYXllciBnZXRzIGFub3RoZXIgdHVyblxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBGaW5kIG5leHQgcGxheWVyIGluIHR1cm4gb3JkZXJcblx0XHRcdG5leHRJbmRleCA6PSAwXG5cdFx0XHRmb3IgaSwgaWQgOj0gcmFuZ2UgZ2FtZS5UdXJuT3JkZXIge1xuXHRcdFx0XHRpZiBpZCA9PSBwbGF5ZXJJRCB7XG5cdFx0XHRcdFx0bmV4dEluZGV4ID0gKGkgKyAxKSAlIGxlbihnYW1lLlR1cm5PcmRlcilcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRnYW1lLkN1cnJlbnRUdXJuID0gZ2FtZS5UdXJuT3JkZXJbbmV4dEluZGV4XVxuXHRcdFx0bmV4dFBsYXllcklEID0gZ2FtZS5DdXJyZW50VHVyblxuXHRcdFx0Ly8gQWxzbyB1cGRhdGUgREIgZm9yIGN1cnJlbnRUdXJuXG5cdFx0XHRjb2xsZWN0aW9uIDo9IGdtLm1vbmdvQ2xpZW50LkRhdGFiYXNlKGdtLmRiTmFtZSkuQ29sbGVjdGlvbihcImdhbWVzXCIpXG5cdFx0XHRfLCBfID0gY29sbGVjdGlvbi5VcGRhdGVPbmUoXG5cdFx0XHRcdGdtLmN0eCxcblx0XHRcdFx0YnNvbi5Ne1wiX2lkXCI6IGdhbWUuSUR9LFxuXHRcdFx0XHRic29uLk17XCIkc2V0XCI6IGJzb24uTXtcImN1cnJlbnRUdXJuXCI6IGdhbWUuQ3VycmVudFR1cm4sIFwidXBkYXRlZEF0XCI6IHRpbWUuTm93KCl9fSxcblx0XHRcdClcblx0XHR9XG5cdFx0Ly8gRmluZCB0aGUgbmV4dCBwbGF5ZXIgKG9yIGN1cnJlbnQgaWYgZG91YmxlcykgZm9yIG5hbWVcblx0XHR2YXIgcGxheWVyTmFtZSBzdHJpbmcgPSBcIlBsYXllcl9cIiArIG5leHRQbGF5ZXJJRFs6NF1cblx0XHRmb3IgXywgcCA6PSByYW5nZSBnYW1lLlBsYXllcnMge1xuXHRcdFx0aWYgcC5JRCA9PSBuZXh0UGxheWVySUQge1xuXHRcdFx0XHRwbGF5ZXJOYW1lID0gXCJQbGF5ZXJfXCIgKyBwLklEWzo0XVxuXHRcdFx0XHRicmVha1xuXHRcdFx0fVxuXHRcdH1cblx0XHR0dXJuTXNnIDo9IG1hcFtzdHJpbmddaW50ZXJmYWNle317XG5cdFx0XHRcInR5cGVcIjogICAgICAgICAgXCJ0dXJuX2NoYW5nZWRcIixcblx0XHRcdFwiY3VycmVudFR1cm5cIjogICBuZXh0UGxheWVySUQsXG5cdFx0XHRcInBsYXllck5hbWVcIjogICAgcGxheWVyTmFtZSxcblx0XHRcdFwicm9sbGVkRG91Ymxlc1wiOiByb2xsZWREb3VibGVzLFxuXHRcdH1cblx0XHRpZiBtc2dCeXRlcywgZXJyIDo9IGpzb24uTWFyc2hhbCh0dXJuTXNnKTsgZXJyID09IG5pbCB7XG5cdFx0XHRnbS53c0h1Yi5Ccm9hZGNhc3RUb0dhbWUoZ2FtZS5JRC5IZXgoKSwgbXNnQnl0ZXMpXG5cdFx0fVxuXHR9XG5cdC8vIC0tLSBFTkQgVFVSTiBNQU5BR0VNRU5UIC0tLVxuXG5cdHJldHVybiBuaWxcbn1cbi4uLlxuXG5cdC8vIFNldCBuZXh0IHBsYXllcidzIHR1cm5cblx0Z2FtZS5DdXJyZW50VHVybiA9IGdhbWUuVHVybk9yZGVyW25leHRJbmRleF1cblxuXHQvLyBVcGRhdGUgdGhlIG1hcmtldCBjb25kaXRpb24gY291bnRlciBpZiBhcHBsaWNhYmxlXG5cdGlmIGdhbWUuTWFya2V0Q29uZGl0aW9uICE9IG1vZGVscy5NYXJrZXRDb25kaXRpb25Ob3JtYWwge1xuXHRcdGdhbWUuTWFya2V0Q29uZGl0aW9uUmVtYWluaW5nVHVybnMtLVxuXHRcdGlmIGdhbWUuTWFya2V0Q29uZGl0aW9uUmVtYWluaW5nVHVybnMgPD0gMCB7XG5cdFx0XHQvLyBSZXNldCBtYXJrZXQgdG8gbm9ybWFsXG5cdFx0XHRnYW1lLk1hcmtldENvbmRpdGlvbiA9IG1vZGVscy5NYXJrZXRDb25kaXRpb25Ob3JtYWxcblx0XHRcdGdtLmxvZ2dlci5JbmZvZihcIk1hcmtldCBjb25kaXRpb24gcmVzZXQgdG8gTk9STUFMXCIpXG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYW55IHBsYXllcnMgd2l0aCBzaGFkb3diYW4gc2hvdWxkIGhhdmUgaXQgcmVtb3ZlZFxuXHRmb3IgaSA6PSByYW5nZSBnYW1lLlBsYXllcnMge1xuXHRcdHBsYXllciA6PSAmZ2FtZS5QbGF5ZXJzW2ldXG5cdFx0aWYgcGxheWVyLlNoYWRvd2Jhbm5lZCAmJiBwbGF5ZXIuU2hhZG93YmFuUmVtYWluaW5nVHVybnMgPD0gMCB7XG5cdFx0XHRwbGF5ZXIuU2hhZG93YmFubmVkID0gZmFsc2Vcblx0XHR9XG5cdH1cbi4uLlxuUGF0aDoga2Vrb3BvbHktZnJvbnRlbmQvc3JjL3N0b3JlL2dhbWVTbGljZS5qc1xuLi4uXG5cbiAgICAgIGlmICghaXNEb3VibGVzIHx8IChjdXJyZW50UGxheWVyICYmIGN1cnJlbnRQbGF5ZXIuaW5KYWlsKSkge1xuICAgICAgICAvLyBBZHZhbmNlIHRvIG5leHQgcGxheWVyXG4gICAgICAgIGNvbnN0IG5leHRJbmRleCA9IChjdXJyZW50SW5kZXggKyAxKSAlIHN0YXRlLnBsYXllcnMubGVuZ3RoO1xuICAgICAgICBjb25zdCBuZXh0UGxheWVyID0gc3RhdGUucGxheWVyc1tuZXh0SW5kZXhdO1xuICAgICAgICBpZiAobmV4dFBsYXllcikge1xuICAgICAgICAgIHN0YXRlLmN1cnJlbnRQbGF5ZXIgPSBuZXh0UGxheWVyLmlkO1xuICAgICAgICAgIHN0YXRlLmdhbWVNZXNzYWdlcy51bnNoaWZ0KHtcbiAgICAgICAgICAgIHR5cGU6ICdUVVJOX0NIQU5HRScsXG4gICAgICAgICAgICBwbGF5ZXJJZDogbmV4dFBsYXllci5pZCxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGBJdCdzIG5vdyAke25leHRQbGF5ZXIubmFtZX0ncyB0dXJuYCxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiBkb3VibGVzLCBzYW1lIHBsYXllciBnZXRzIGFub3RoZXIgdHVyblxuICAgICAgICBzdGF0ZS5nYW1lTWVzc2FnZXMudW5zaGlmdCh7XG4gICAgICAgICAgdHlwZTogJ0VYVFJBX1RVUk4nLFxuICAgICAgICAgIHBsYXllcklkOiBjdXJyZW50UGxheWVyLmlkLFxuICAgICAgICAgIGNvbnRlbnQ6IGAke2N1cnJlbnRQbGF5ZXIubmFtZX0gcm9sbGVkIGRvdWJsZXMgYW5kIGdldHMgYW5vdGhlciB0dXJuIWAsXG4gICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0UGxheWVyczogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICAgIHN0YXRlLnBsYXllcnMgPSBhY3Rpb24ucGF5bG9hZDtcbiAgICB9LFxuLi4uXG5QYXRoOiBrZWtvcG9seS1mcm9udGVuZC9zcmMvY29yZS9lbmdpbmUvR2FtZUVuZ2luZS5qc1xuLi4uXG4gICAgXG4gICAgLy8gTW92ZSB0byBuZXh0IHBoYXNlXG4gICAgdGhpcy5nYW1lU3RhdGUudHVyblBoYXNlID0gVFVSTl9QSEFTRS5NT1ZFTUVOVDtcbiAgICBcbiAgICB0aGlzLnRyaWdnZXJFdmVudCgnb25TdGF0ZUNoYW5nZScsIHRoaXMuZ2FtZVN0YXRlKTtcbiAgICBcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFByb2Nlc3MgcGxheWVyIG1vdmVtZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwbGF5ZXJJZCAtIEN1cnJlbnQgcGxheWVyJ3MgSURcbiAgICogQHJldHVybnMge09iamVjdH0gLSBNb3ZlbWVudCByZXN1bHQgd2l0aCBuZXcgcG9zaXRpb24gYW5kIHJlbGV2YW50IGV2ZW50c1xuICAgKi9cbiAgcHJvY2Vzc01vdmVtZW50UGhhc2UocGxheWVySWQpIHtcbiAgICBpZiAodGhpcy5nYW1lU3RhdGUuY3VycmVudFR1cm4gIT09IHBsYXllcklkIHx8IFxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS50dXJuUGhhc2UgIT09IFRVUk5fUEhBU0UuTU9WRU1FTlQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm90IHBsYXllclxcJ3MgdHVybiBvciB3cm9uZyBwaGFzZScpO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBwbGF5ZXIgPSB0aGlzLmdhbWVTdGF0ZS5wbGF5ZXJzW3BsYXllcklkXTtcbiAgICBcbiAgICAvLyBDaGVjayBpZiBwbGF5ZXIgaXMgc2hhZG93YmFubmVkIChpbiBqYWlsKVxuICAgIGlmIChwbGF5ZXIuc2hhZG93YmFubmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9jZXNzU2hhZG93YmFubmVkUGxheWVyTW92ZShwbGF5ZXJJZCk7XG4gICAgfVxuICAgIFxuICAgIC8vIFJvbGwgdGhlIGRpY2VcbiAgICBjb25zdCBkaWNlUm9sbCA9IHRoaXMuZGljZU1hbmFnZXIucm9sbERpY2UoKTtcbiAgICB0aGlzLmdhbWVTdGF0ZS5sYXN0RGljZVJvbGwgPSBkaWNlUm9sbDtcbiAgICBcbiAgICBjb25zdCBkaWNlU3VtID0gZGljZVJvbGxbMF0gKyBkaWNlUm9sbFsxXTtcbiAgICBjb25zdCBpc0RvdWJsZXMgPSBkaWNlUm9sbFswXSA9PT0gZGljZVJvbGxbMV07XG4gICAgXG4gICAgLy8gQ2FsY3VsYXRlIG5ldyBwb3NpdGlvblxuICAgIGNvbnN0IG9sZFBvc2l0aW9uID0gcGxheWVyLnBvc2l0aW9uO1xuICAgIGxldCBuZXdQb3NpdGlvbiA9IChvbGRQb3NpdGlvbiArIGRpY2VTdW0pICUgNDA7IC8vIDQwIHNwYWNlcyBvbiBib2FyZFxuICAgIFxuICAgIC8vIENoZWNrIGlmIHBsYXllciBwYXNzZXMgU1RBUlRcbiAgICBjb25zdCBwYXNzZWRTdGFydCA9IG9sZFBvc2l0aW9uICsgZGljZVN1bSA+PSA0MDtcbiAgICBcbiAgICAvLyBVcGRhdGUgcGxheWVyIHBvc2l0aW9uXG4gICAgdGhpcy5wbGF5ZXJNYW5hZ2VyLnVwZGF0ZVBvc2l0aW9uKHRoaXMuZ2FtZVN0YXRlLCBwbGF5ZXJJZCwgbmV3UG9zaXRpb24pO1xuICAgIFxuICAgIC8vIFJlY29yZCByZXN1bHRcbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICBkaWNlUm9sbCxcbiAgICAgIG9sZFBvc2l0aW9uLFxuICAgICAgbmV3UG9zaXRpb24sXG4gICAgICBwYXNzZWRTdGFydCxcbiAgICAgIGlzRG91Ymxlc1xuICAgIH07XG4uLi5cblxuICAvKipcbiAgICogRW5kIHRoZSBjdXJyZW50IHBsYXllcidzIHR1cm5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHBsYXllcklkIC0gQ3VycmVudCBwbGF5ZXIncyBJRFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSAtIFJlc3VsdCBvZiB0dXJuIGVuZFxuICAgKi9cbiAgZW5kVHVybihwbGF5ZXJJZCkge1xuICAgIGlmICh0aGlzLmdhbWVTdGF0ZS5jdXJyZW50VHVybiAhPT0gcGxheWVySWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm90IHBsYXllclxcJ3MgdHVybicpO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBjdXJyZW50UGxheWVyID0gdGhpcy5nYW1lU3RhdGUucGxheWVyc1twbGF5ZXJJZF07XG4gICAgXG4gICAgLy8gVHJpZ2dlciB0dXJuIGVuZCBldmVudFxuICAgIHRoaXMudHJpZ2dlckV2ZW50KCdvblBsYXllclR1cm5FbmQnLCB7XG4gICAgICBnYW1lU3RhdGU6IHRoaXMuZ2FtZVN0YXRlLFxuICAgICAgcGxheWVySWRcbiAgICB9KTtcbiAgICBcbiAgICAvLyBDaGVjayBpZiBwbGF5ZXIgZ2V0cyBhbm90aGVyIHR1cm4gKGR1ZSB0byBkb3VibGVzKVxuICAgIGlmIChjdXJyZW50UGxheWVyLmRvdWJsZXNDb3VudCA+IDApIHtcbiAgICAgIC8vIFJlc2V0IHBoYXNlIHRvIHN0YXJ0IHRoZSB0dXJuIGFnYWluXG4gICAgICB0aGlzLmdhbWVTdGF0ZS50dXJuUGhhc2UgPSBUVVJOX1BIQVNFLk1FTUVDT05PTVk7XG4gICAgICBcbiAgICAgIHRoaXMudHJpZ2dlckV2ZW50KCdvblBsYXllclR1cm5TdGFydCcsIHtcbiAgICAgICAgZ2FtZVN0YXRlOiB0aGlzLmdhbWVTdGF0ZSxcbiAgICAgICAgcGxheWVySWRcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0dXJuRW5kZWQ6IGZhbHNlLFxuICAgICAgICBhbm90aGVyVHVybjogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4uLi5cblBhdGg6IGtla29wb2x5LWZyb250ZW5kL3NyYy9jb21wb25lbnRzL2dhbWUvR2FtZUJvYXJkLmpzeFxuLi4uXG5cbiAgLy8gSGFuZGxlIHRoZSBSb2xsIERpY2UgYnV0dG9uIGNsaWNrXG4gIGNvbnN0IGhhbmRsZVJvbGxEaWNlID0gKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBGaXJzdCBjaGVjayBpZiBpdCdzIHRoZSBsb2NhbCBwbGF5ZXIncyB0dXJuXG4gICAgICBpZiAoIXNvY2tldFNlcnZpY2UuaXNMb2NhbFBsYXllclR1cm4oKSkge1xuICAgICAgICB0b2FzdCh7XG4gICAgICAgICAgdGl0bGU6IFwiTm90IHlvdXIgdHVyblwiLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBgSXQncyAke3BsYXllcnMuZmluZChwID0+IHAuaWQgPT09IGN1cnJlbnRQbGF5ZXIpPy5uYW1lIHx8IFwiYW5vdGhlciBwbGF5ZXJcIn0ncyB0dXJuYCxcbiAgICAgICAgICBzdGF0dXM6IFwid2FybmluZ1wiLFxuICAgICAgICAgIGR1cmF0aW9uOiAzMDAwLFxuICAgICAgICAgIGlzQ2xvc2FibGU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICBkaXNwYXRjaChzZXRJc1JvbGxpbmcoZmFsc2UpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBpZiBwbGF5ZXIgaXMgaW4gamFpbFxuICAgICAgaWYgKGN1cnJlbnRQbGF5ZXJEYXRhPy5pbkphaWwpIHtcbiAgICAgICAgdG9hc3Qoe1xuICAgICAgICAgIHRpdGxlOiBcIllvdSdyZSBpbiBqYWlsIVwiLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBgWW91IG5lZWQgdG8gcm9sbCBkb3VibGVzIG9yIHdhaXQgJHtjdXJyZW50UGxheWVyRGF0YS5qYWlsVHVybnN9IG1vcmUgdHVybnMuYCxcbiAgICAgICAgICBzdGF0dXM6IFwid2FybmluZ1wiLFxuICAgICAgICAgIGR1cmF0aW9uOiAzMDAwLFxuICAgICAgICAgIGlzQ2xvc2FibGU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICBkaXNwYXRjaChzZXRJc1JvbGxpbmcoZmFsc2UpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXQgcm9sbGluZyBzdGF0ZSB0byB0cnVlXG4gICAgICBkaXNwYXRjaChzZXRJc1JvbGxpbmcodHJ1ZSkpO1xuLi4uXG5QYXRoOiBrZWtvcG9seS1iYWNrZW5kL2ludGVybmFsL2FwaS9oYW5kbGVycy9nYW1lX2hhbmRsZXIuZ29cbi4uLlxuXG4vLyBHZXRHYW1lU3RhdGUgZ2V0cyB0aGUgY3VycmVudCBzdGF0ZSBvZiBhIGdhbWVcbmZ1bmMgKGggKkdhbWVIYW5kbGVyKSBHZXRHYW1lU3RhdGUoYyBlY2hvLkNvbnRleHQpIGVycm9yIHtcblx0Z2FtZUlEIDo9IGMuUGFyYW0oXCJnYW1lSWRcIilcblx0aWYgZ2FtZUlEID09IFwiXCIge1xuXHRcdHJldHVybiBlY2hvLk5ld0hUVFBFcnJvcihodHRwLlN0YXR1c0JhZFJlcXVlc3QsIFwiTWlzc2luZyBnYW1lIElEXCIpXG5cdH1cblxuXHQvLyBHZXQgZ2FtZSBmcm9tIGdhbWUgbWFuYWdlclxuXHRnYW1lLCBlcnIgOj0gaC5nYW1lTWFuYWdlci5HZXRHYW1lKGdhbWVJRClcblx0aWYgZXJyICE9IG5pbCB7XG5cdFx0aC5sb2dnZXIuRXJyb3JmKFwiRmFpbGVkIHRvIGdldCBnYW1lOiAldlwiLCBlcnIpXG5cdFx0cmV0dXJuIGVjaG8uTmV3SFRUUEVycm9yKGh0dHAuU3RhdHVzTm90Rm91bmQsIFwiR2FtZSBub3QgZm91bmRcIilcblx0fVxuXG5cdHJldHVybiBjLkpTT04oaHR0cC5TdGF0dXNPSywgZ2FtZSlcbn1cblxuLy8gUm9sbERpY2UgaGFuZGxlcyB0aGUgcm9sbCBkaWNlIGFjdGlvblxuZnVuYyAoaCAqR2FtZUhhbmRsZXIpIFJvbGxEaWNlKGMgZWNoby5Db250ZXh0KSBlcnJvciB7XG5cdHJldHVybiBoLmhhbmRsZUdhbWVBY3Rpb24oYywgbW9kZWxzLkFjdGlvblR5cGVSb2xsRGljZSlcbn1cbi4uLlxuUGF0aDoga2Vrb3BvbHktZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvZGljZS9EaWNlUm9sbGVyLmpzeFxuLi4uXG4gIFt7IHBvc2l0aW9uOiAndG9wLWxlZnQnLCB2YWx1ZTogMSB9LCB7IHBvc2l0aW9uOiAndG9wLXJpZ2h0JywgdmFsdWU6IDEgfSwgeyBwb3NpdGlvbjogJ21pZGRsZS1sZWZ0JywgdmFsdWU6IDEgfSwgeyBwb3NpdGlvbjogJ21pZGRsZS1yaWdodCcsIHZhbHVlOiAxIH0sIHsgcG9zaXRpb246ICdib3R0b20tbGVmdCcsIHZhbHVlOiAxIH0sIHsgcG9zaXRpb246ICdib3R0b20tcmlnaHQnLCB2YWx1ZTogMSB9XSxcbl07XG5cbi8qKlxuICogU2luZ2xlIGRpZSBjb21wb25lbnQgdGhhdCBzaG93cyBvbmUgb2Ygc2l4IGZhY2VzXG4gKi9cbmNvbnN0IERpZSA9ICh7IHZhbHVlLCBpc1JvbGxpbmcgfSkgPT4ge1xuICAvLyBHZXQgdGhlIGRvdCBwb3NpdGlvbnMgZm9yIHRoZSBjdXJyZW50IHZhbHVlXG4gIGNvbnN0IGRvdHMgPSBkaWNlRmFjZXNbdmFsdWUgLSAxXSB8fCBkaWNlRmFjZXNbMF07XG5cbiAgcmV0dXJuIChcbiAgICA8bW90aW9uLmRpdlxuICAgICAgYW5pbWF0ZT17e1xuICAgICAgICByb3RhdGVYOiBpc1JvbGxpbmcgPyBbMCwgMzYwXSA6IDAsXG4gICAgICAgIHJvdGF0ZVk6IGlzUm9sbGluZyA/IFswLCAzNjBdIDogMCxcbiAgICAgIH19XG4gICAgICB0cmFuc2l0aW9uPXt7XG4gICAgICAgIGR1cmF0aW9uOiAwLjYsXG4gICAgICAgIHJlcGVhdDogaXNSb2xsaW5nID8gSW5maW5pdHkgOiAwLFxuICAgICAgICBlYXNlOiBcImVhc2VJbk91dFwiXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxCb3hcbiAgICAgICAgd2lkdGg9XCI2MHB4XCJcbiAgICAgICAgaGVpZ2h0PVwiNjBweFwiXG4gICAgICAgIGJnPVwid2hpdGVcIlxuICAgICAgICBib3JkZXJSYWRpdXM9XCJtZFwiXG4gICAgICAgIGJveFNoYWRvdz1cIm1kXCJcbiAgICAgICAgcG9zaXRpb249XCJyZWxhdGl2ZVwiXG4gICAgICAgIGRpc3BsYXk9XCJmbGV4XCJcbiAgICAgICAganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIlxuICAgICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgICAgYm9yZGVyPVwiMXB4IHNvbGlkXCJcbiAgICAgICAgYm9yZGVyQ29sb3I9XCJncmF5LjIwMFwiXG4gICAgICA+XG4gICAgICAgIHtkb3RzLm1hcCgoZG90LCBpbmRleCkgPT4gKFxuICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgIGtleT17aW5kZXh9XG4gICAgICAgICAgICBwb3NpdGlvbj1cImFic29sdXRlXCJcbiAgICAgICAgICAgIHdpZHRoPVwiMTJweFwiXG4gICAgICAgICAgICBoZWlnaHQ9XCIxMnB4XCJcbiAgICAgICAgICAgIGJvcmRlclJhZGl1cz1cImZ1bGxcIlxuICAgICAgICAgICAgYmc9XCIjMzMzXCJcbiAgICAgICAgICAgIHsuLi5nZXREb3RQb3NpdGlvbihkb3QucG9zaXRpb24pfVxuICAgICAgICAgIC8+XG4gICAgICAgICkpfVxuICAgICAgPC9Cb3g+XG4gICAgPC9tb3Rpb24uZGl2PlxuICApO1xufTtcbi4uLlxuXG4vKipcbiAqIERpY2VSb2xsZXIgY29tcG9uZW50XG4gKiBTaG93cyB0d28gZGljZSBhbmQgaGFuZGxlcyByb2xsaW5nIGxvZ2ljXG4gKi9cbmNvbnN0IERpY2VSb2xsZXIgPSAoeyBpc0N1cnJlbnRUdXJuID0gdHJ1ZSwgb25Sb2xsLCBvbkdvVG9KYWlsIH0pID0+IHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBcbiAgLy8gSW4gYSByZWFsIGltcGxlbWVudGF0aW9uLCB3ZSB3b3VsZCBnZXQgdGhlc2UgZnJvbSBSZWR1eFxuICAvLyBjb25zdCBkaWNlVmFsdWVzID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUuZ2FtZS5kaWNlVmFsdWVzKTtcbiAgLy8gY29uc3QgaXNSb2xsaW5nID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUuZ2FtZS5pc1JvbGxpbmcpO1xuICBcbiAgLy8gRm9yIGRlbW8gcHVycG9zZXNcbiAgY29uc3QgW2RpY2VWYWx1ZXMsIHNldERpY2VWYWx1ZXNdID0gdXNlU3RhdGUoWzEsIDFdKTtcbiAgY29uc3QgW2lzUm9sbGluZywgc2V0SXNSb2xsaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3JvbGxIaXN0b3J5LCBzZXRSb2xsSGlzdG9yeV0gPSB1c2VTdGF0ZShbXSk7XG4gIGNvbnN0IFtjb25zZWN1dGl2ZURvdWJsZXMsIHNldENvbnNlY3V0aXZlRG91Ymxlc10gPSB1c2VTdGF0ZSgwKTtcbiAgY29uc3QgeyBpc09wZW4sIG9uT3Blbiwgb25DbG9zZSB9ID0gdXNlRGlzY2xvc3VyZSgpO1xuLi4uXG4gICAgXG4gICAgLy8gRm9yIGRlbW8gcHVycG9zZXMsIHNpbXVsYXRlIGEgZGljZSByb2xsIGxvY2FsbHlcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGNvbnN0IGRpZTEgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA2KSArIDE7XG4gICAgICBjb25zdCBkaWUyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNikgKyAxO1xuICAgICAgY29uc3QgaXNEb3VibGVzID0gZGllMSA9PT0gZGllMjtcbiAgICAgIFxuICAgICAgc2V0RGljZVZhbHVlcyhbZGllMSwgZGllMl0pO1xuICAgICAgXG4gICAgICAvLyBVcGRhdGUgY29uc2VjdXRpdmUgZG91YmxlcyBjb3VudFxuICAgICAgaWYgKGlzRG91Ymxlcykge1xuICAgICAgICBzZXRDb25zZWN1dGl2ZURvdWJsZXMocHJldiA9PiBwcmV2ICsgMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRDb25zZWN1dGl2ZURvdWJsZXMoMCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIENoZWNrIGZvciB0aHJlZSBjb25zZWN1dGl2ZSBkb3VibGVzXG4gICAgICBpZiAoY29uc2VjdXRpdmVEb3VibGVzID09PSAyICYmIGlzRG91Ymxlcykge1xuICAgICAgICBzZXRDb25zZWN1dGl2ZURvdWJsZXMoMCk7XG4gICAgICAgIGlmIChvbkdvVG9KYWlsKSB7XG4gICAgICAgICAgb25Hb1RvSmFpbCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIHNldFJvbGxIaXN0b3J5KHByZXYgPT4gW1xuICAgICAgICB7IHJvbGw6IFtkaWUxLCBkaWUyXSwgc3VtOiBkaWUxICsgZGllMiwgaXNEb3VibGVzIH0sXG4gICAgICAgIC4uLnByZXYuc2xpY2UoMCwgNCkgLy8gS2VlcCBvbmx5IHRoZSA1IG1vc3QgcmVjZW50IHJvbGxzXG4gICAgICBdKTtcbiAgICAgIHNldElzUm9sbGluZyhmYWxzZSk7XG4gICAgICBcbiAgICAgIC8vIENhbGwgdGhlIG9uUm9sbCBjYWxsYmFjayB3aXRoIHRoZSBkaWNlIHZhbHVlc1xuICAgICAgaWYgKG9uUm9sbCkge1xuICAgICAgICBvblJvbGwoZGllMSwgZGllMiwgaXNEb3VibGVzKTtcbiAgICAgIH1cbi4uLlxuXG4gIHJldHVybiAoXG4gICAgPEJveCBwPXs0fSBiZz1cImJyYW5kLjUwXCIgYm9yZGVyUmFkaXVzPVwibWRcIiBib3hTaGFkb3c9XCJzbVwiPlxuICAgICAgPEZsZXgganVzdGlmeT1cInNwYWNlLWJldHdlZW5cIiBhbGlnbj1cImNlbnRlclwiIG1iPXs0fT5cbiAgICAgICAgPFRleHQgZm9udFdlaWdodD1cImJvbGRcIj5EaWNlPC9UZXh0PlxuICAgICAgICB7cm9sbEhpc3RvcnkubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgICAgPFRleHQgXG4gICAgICAgICAgICBmb250U2l6ZT1cInNtXCIgXG4gICAgICAgICAgICBjb2xvcj1cImJsdWUuNTAwXCIgXG4gICAgICAgICAgICBjdXJzb3I9XCJwb2ludGVyXCIgXG4gICAgICAgICAgICBvbkNsaWNrPXtzaG93SGlzdG9yeX1cbiAgICAgICAgICAgIF9ob3Zlcj17eyB0ZXh0RGVjb3JhdGlvbjogJ3VuZGVybGluZScgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBSb2xsIEhpc3RvcnlcbiAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICl9XG4gICAgICA8L0ZsZXg+XG4gICAgICBcbiAgICAgIDxGbGV4IGp1c3RpZnk9XCJjZW50ZXJcIiBtYj17NH0+XG4gICAgICAgIDxIU3RhY2sgc3BhY2luZz17NH0+XG4gICAgICAgICAgPERpZSB2YWx1ZT17ZGljZVZhbHVlc1swXX0gaXNSb2xsaW5nPXtpc1JvbGxpbmd9IC8+XG4gICAgICAgICAgPERpZSB2YWx1ZT17ZGljZVZhbHVlc1sxXX0gaXNSb2xsaW5nPXtpc1JvbGxpbmd9IC8+XG4gICAgICAgIDwvSFN0YWNrPlxuICAgICAgPC9GbGV4PlxuICAgICAgXG4gICAgICB7IWlzUm9sbGluZyAmJiBkaWNlVmFsdWVzWzBdID09PSBkaWNlVmFsdWVzWzFdICYmIChcbiAgICAgICAgPEFsZXJ0IHN0YXR1cz1cInN1Y2Nlc3NcIiBtYj17Mn0gYm9yZGVyUmFkaXVzPVwibWRcIj5cbiAgICAgICAgICA8QWxlcnRJY29uIC8+XG4gICAgICAgICAgPFRleHQgZm9udFdlaWdodD1cImJvbGRcIj5ET1VCTEVTISB7Y29uc2VjdXRpdmVEb3VibGVzID4gMCAmJiBgKCR7Y29uc2VjdXRpdmVEb3VibGVzfSBjb25zZWN1dGl2ZSlgfTwvVGV4dD5cbiAgICAgICAgPC9BbGVydD5cbiAgICAgICl9XG4uLi5cblBhdGg6IGtla29wb2x5LWZyb250ZW5kL3NyYy9zZXJ2aWNlcy9zb2NrZXRTZXJ2aWNlLmpzXG4uLi5cblxuICBoYW5kbGVEaWNlUm9sbGVkID0gKGRhdGEpID0+IHtcbiAgICBjb25zdCB7IGRpc3BhdGNoIH0gPSBzdG9yZTtcblxuICAgIC8vIEFsd2F5cyBnZXQgZGljZSB2YWx1ZXMgYXMgYW4gYXJyYXkgYW5kIGVuc3VyZSB0aGV5IGFyZSB2YWxpZCBudW1iZXJzXG4gICAgbGV0IGRpY2UgPSBBcnJheS5pc0FycmF5KGRhdGEuZGljZSkgPyBkYXRhLmRpY2UgOiBbZGF0YS5kaWNlMSwgZGF0YS5kaWNlMl07XG5cbiAgICAvLyBWYWxpZGF0ZSBkaWNlIHZhbHVlcyAtIGVuc3VyZSB0aGV5IGFyZSBudW1iZXJzIGJldHdlZW4gMS02XG4gICAgZGljZSA9IGRpY2UubWFwKHZhbHVlID0+IHtcbiAgICAgIC8vIENvbnZlcnQgdG8gbnVtYmVyIGlmIGl0J3MgYSBzdHJpbmdcbiAgICAgIGNvbnN0IG51bVZhbHVlID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHBhcnNlSW50KHZhbHVlLCAxMCkgOiB2YWx1ZTtcblxuICAgICAgLy8gVmFsaWRhdGUgdGhlIG51bWJlciBpcyBiZXR3ZWVuIDEtNlxuICAgICAgaWYgKHR5cGVvZiBudW1WYWx1ZSAhPT0gJ251bWJlcicgfHwgaXNOYU4obnVtVmFsdWUpIHx8IG51bVZhbHVlIDwgMSB8fCBudW1WYWx1ZSA+IDYpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBbRElDRV0gSW52YWxpZCBkaWNlIHZhbHVlOiAke3ZhbHVlfSwgdXNpbmcgZGVmYXVsdCB2YWx1ZSAxYCk7XG4gICAgICAgIHJldHVybiAxOyAvLyBEZWZhdWx0IHRvIDEgZm9yIGludmFsaWQgdmFsdWVzXG4gICAgICB9XG4gICAgICByZXR1cm4gbnVtVmFsdWU7XG4gICAgfSk7XG5cbiAgICBjb25zdCBbZGljZTEsIGRpY2UyXSA9IGRpY2U7XG4gICAgY29uc29sZS5sb2coYFtESUNFXSBQcm9jZXNzZWQgZGljZSB2YWx1ZXM6ICR7ZGljZTF9LCAke2RpY2UyfWApO1xuXG4gICAgLy8gVXBkYXRlIFJlZHV4IHdpdGggdmFsaWRhdGVkIGRpY2UgdmFsdWVzXG4gICAgZGlzcGF0Y2godXBkYXRlRGljZVJvbGwoeyBkaWNlVmFsdWVzOiBbZGljZTEsIGRpY2UyXSB9KSk7XG4uLi5cblxuICAgICAgLy8gQWRkIGEgc3BlY2lmaWMgUk9MTCBtZXNzYWdlIHRvIHRoZSBnYW1lIGxvZ1xuICAgICAgY29uc3QgY3VycmVudFN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgIGNvbnN0IHBsYXllciA9IGN1cnJlbnRTdGF0ZS5nYW1lLnBsYXllcnMuZmluZChwID0+IHAuaWQgPT09IGRhdGEucGxheWVySWQpO1xuICAgICAgY29uc3QgcGxheWVyTmFtZSA9IHBsYXllciA/IHBsYXllci5uYW1lIDogYFBsYXllciAke2RhdGEucGxheWVySWR9YDtcblxuICAgICAgZGlzcGF0Y2goYWRkR2FtZU1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiAnUk9MTCcsXG4gICAgICAgIHBsYXllcklkOiBkYXRhLnBsYXllcklkLFxuICAgICAgICBjb250ZW50OiBgJHtwbGF5ZXJOYW1lfSByb2xsZWQgJHtkaWNlMX0gYW5kICR7ZGljZTJ9YCxcbiAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIHJvbGxpbmcgc3RhdGUgaXMgc2V0IHRvIGZhbHNlXG4gICAgZGlzcGF0Y2goc2V0SXNSb2xsaW5nKGZhbHNlKSk7XG4gIH07XG5cbiAgaGFuZGxlRGljZVJvbGxpbmcgPSAoaXNSb2xsaW5nKSA9PiB7XG4gICAgLy8gV2UgZG9uJ3QgbmVlZCB0aGlzIGFjdGlvbiBhbnltb3JlIGFzIHVwZGF0ZURpY2VSb2xsIGhhbmRsZXMgdGhlIHN0YXRlXG4gICAgLy8gQnV0IHdlIGNhbiBhZGQgYSBnYW1lIG1lc3NhZ2UgZm9yIGRpY2Ugcm9sbGluZ1xuICAgIGlmIChpc1JvbGxpbmcpIHtcbiAgICAgIHN0b3JlLmRpc3BhdGNoKGFkZEdhbWVNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogJ0RJQ0UnLFxuICAgICAgICBjb250ZW50OiAnUm9sbGluZyBkaWNlLi4uJyxcbiAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpXG4gICAgICB9KSk7XG4gICAgfVxuICB9O1xuLi4uXG5cbiAgICAgICAgLy8gSWYgZ2FtZSBoYXNuJ3Qgc3RhcnRlZCB5ZXQsIHRyeSBhZ2FpblxuICAgICAgICBpZiAoIWdhbWVTdGF0ZS5nYW1lU3RhcnRlZCB8fCBnYW1lU3RhdGUuZ2FtZVBoYXNlICE9PSAncGxheWluZycgfHxcbiAgICAgICAgICAgIHNsaWNlc0dhbWVTdGF0ZS5zdGF0dXMgIT09ICdBQ1RJVkUnKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1tTVEFSVF9HQU1FXSBHYW1lIG5vdCBzdGFydGVkIHlldCwgc2VuZGluZyBnYW1lOnN0YXJ0IG1lc3NhZ2UgYWdhaW4nKTtcbiAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlKCdnYW1lOnN0YXJ0Jywge30pO1xuXG4gICAgICAgICAgLy8gRGlzcGF0Y2ggc3RhcnRHYW1lQXN5bmMgYWN0aW9uIGFnYWluXG4gICAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgICAgdHlwZTogJ2dhbWUvc3RhcnRHYW1lQXN5bmMvZnVsZmlsbGVkJyxcbiAgICAgICAgICAgIHBheWxvYWQ6IHRydWUsXG4gICAgICAgICAgICBtZXRhOiB7IHJlcXVlc3RJZDogJ2dhbWVfc3RhcnRfcmV0cnknLCBhcmc6IHVuZGVmaW5lZCB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBTeW5jaHJvbml6ZSBnYW1lIHN0YXRlIGFnYWluXG4gICAgICAgICAgdGhpcy5zeW5jR2FtZVN0YXRlQWNyb3NzU2xpY2VzKCdBQ1RJVkUnKTtcblxuICAgICAgICAgIC8vIFNldCB1cCB0aGUgZ2FtZSBzdGFydCByZXRyeSBjaGVja1xuICAgICAgICAgIHRoaXMuc2V0dXBHYW1lU3RhcnRSZXRyeUNoZWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIDEwMDApO1xuXG4gICAgICAvLyBTZXQgdXAgdGhlIGdhbWUgc3RhcnQgcmV0cnkgY2hlY2sgaW1tZWRpYXRlbHlcbiAgICAgIHRoaXMuc2V0dXBHYW1lU3RhcnRSZXRyeUNoZWNrKCk7XG4gICAgfSwgMjAwKTtcbiAgfTtcblxuICByb2xsRGljZSA9ICgpID0+IHtcbiAgICB0aGlzLnNlbmRNZXNzYWdlKCdyb2xsX2RpY2UnLCB7fSk7XG4gIH07XG5cbiAgZW5kVHVybiA9ICgpID0+IHtcbiAgICB0aGlzLnNlbmRNZXNzYWdlKCdlbmRfdHVybicsIHt9KTtcbiAgfTtcblxuICBwdXJjaGFzZVByb3BlcnR5ID0gKHByb3BlcnR5SWQpID0+IHtcbiAgICB0aGlzLnNlbmRNZXNzYWdlKCdidXlfcHJvcGVydHknLCB7IHByb3BlcnR5SWQgfSk7XG4gIH07XG5cbiAgYnVpbGRFbmdhZ2VtZW50ID0gKHByb3BlcnR5SWQpID0+IHtcbiAgICB0aGlzLnNlbmRNZXNzYWdlKCdidWlsZF9lbmdhZ2VtZW50JywgeyBwcm9wZXJ0eUlkIH0pO1xuICB9O1xuXG4gIGJ1aWxkQ2hlY2ttYXJrID0gKHByb3BlcnR5SWQpID0+IHtcbiAgICB0aGlzLnNlbmRNZXNzYWdlKCdidWlsZF9jaGVja21hcmsnLCB7IHByb3BlcnR5SWQgfSk7XG4gIH07XG5cbiAgbW9ydGdhZ2VQcm9wZXJ0eSA9IChwcm9wZXJ0eUlkKSA9PiB7XG4gICAgdGhpcy5zZW5kTWVzc2FnZSgnbW9ydGdhZ2VfcHJvcGVydHknLCB7IHByb3BlcnR5SWQgfSk7XG4gIH07XG5cbiAgZHJhd0NhcmQgPSAoY2FyZFR5cGUpID0+IHtcbiAgICB0aGlzLnNlbmRNZXNzYWdlKCdkcmF3X2NhcmQnLCB7IGNhcmRUeXBlIH0pO1xuICB9O1xuXG4gIHBsYXlDYXJkID0gKGNhcmRJZCwgdGFyZ2V0UGxheWVySWQgPSBudWxsLCB0YXJnZXRQcm9wZXJ0eUlkID0gbnVsbCkgPT4ge1xuICAgIHRoaXMuc2VuZE1lc3NhZ2UoJ3VzZV9jYXJkJywge1xuICAgICAgY2FyZElkLFxuICAgICAgdGFyZ2V0UGxheWVySWQsXG4gICAgICB0YXJnZXRQcm9wZXJ0eUlkXG4gICAgfSk7XG4gIH07XG4uLi5cblBhdGg6IGtla29wb2x5LWZyb250ZW5kL3NyYy9jb3JlL2VuZ2luZS9EaWNlTWFuYWdlci5qc1xuLyoqXG4gKiBEaWNlTWFuYWdlciBoYW5kbGVzIGRpY2Ugcm9sbGluZyBtZWNoYW5pY3NcbiAqL1xuY2xhc3MgRGljZU1hbmFnZXIge1xuICAvKipcbiAgICogUm9sbCBhIHNpbmdsZSBkaWUgKDEtNilcbiAgICogQHJldHVybnMge251bWJlcn0gLSBEaWUgcmVzdWx0ICgxLTYpXG4gICAqL1xuICByb2xsRGllKCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA2KSArIDE7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBSb2xsIHR3byBkaWNlXG4gICAqIEByZXR1cm5zIHtudW1iZXJbXX0gLSBBcnJheSBvZiB0d28gZGljZSByZXN1bHRzXG4gICAqL1xuICByb2xsRGljZSgpIHtcbiAgICByZXR1cm4gW3RoaXMucm9sbERpZSgpLCB0aGlzLnJvbGxEaWUoKV07XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBDaGVjayBpZiBkaWNlIHJvbGwgaXMgZG91Ymxlc1xuICAgKiBAcGFyYW0ge251bWJlcltdfSBkaWNlUm9sbCAtIEFycmF5IG9mIGRpY2UgdmFsdWVzXG4gICAqIEByZXR1cm5zIHtib29sZWFufSAtIFdoZXRoZXIgcm9sbCBpcyBkb3VibGVzXG4gICAqL1xuICBpc0RvdWJsZXMoZGljZVJvbGwpIHtcbiAgICByZXR1cm4gZGljZVJvbGxbMF0gPT09IGRpY2VSb2xsWzFdO1xuICB9XG4gIFxuICAvKipcbiAgICogR2V0IHRoZSBzdW0gb2YgZGljZSB2YWx1ZXNcbiAgICogQHBhcmFtIHtudW1iZXJbXX0gZGljZVJvbGwgLSBBcnJheSBvZiBkaWNlIHZhbHVlc1xuICAgKiBAcmV0dXJucyB7bnVtYmVyfSAtIFN1bSBvZiBkaWNlIHZhbHVlc1xuICAgKi9cbiAgZ2V0RGljZVRvdGFsKGRpY2VSb2xsKSB7XG4gICAgcmV0dXJuIGRpY2VSb2xsWzBdICsgZGljZVJvbGxbMV07XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBQZXJmb3JtIGEgcm9sbCB3aXRoIHRoZSBnaXZlbiBkaWNlIGNvdW50XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCAtIE51bWJlciBvZiBkaWNlIHRvIHJvbGxcbiAgICogQHJldHVybnMge251bWJlcltdfSAtIEFycmF5IG9mIGRpY2UgcmVzdWx0c1xuICAgKi9cbiAgcm9sbE11bHRpcGxlKGNvdW50KSB7XG4gICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgcmVzdWx0cy5wdXNoKHRoaXMucm9sbERpZSgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBSb2xsIGEgZGllIGZvciBlYWNoIHBsYXllclxuICAgKiBAcGFyYW0ge09iamVjdH0gZ2FtZVN0YXRlIC0gQ3VycmVudCBnYW1lIHN0YXRlXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IC0gTWFwIG9mIHBsYXllciBJRHMgdG8gcm9sbCByZXN1bHRzXG4gICAqL1xuICByb2xsRm9yQWxsUGxheWVycyhnYW1lU3RhdGUpIHtcbiAgICBjb25zdCByZXN1bHRzID0ge307XG4gICAgXG4gICAgT2JqZWN0LmtleXMoZ2FtZVN0YXRlLnBsYXllcnMpLmZvckVhY2gocGxheWVySWQgPT4ge1xuICAgICAgcmVzdWx0c1twbGF5ZXJJZF0gPSB0aGlzLnJvbGxEaWUoKTtcbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfVxuICBcbiAgLyoqXG4gICAqIERldGVybWluZSB0dXJuIG9yZGVyIGJhc2VkIG9uIHJvbGxzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBnYW1lU3RhdGUgLSBDdXJyZW50IGdhbWUgc3RhdGVcbiAgICogQHJldHVybnMge3N0cmluZ1tdfSAtIEFycmF5IG9mIHBsYXllciBJRHMgaW4gdHVybiBvcmRlclxuICAgKi9cbiAgZGV0ZXJtaW5lSW5pdGlhbFR1cm5PcmRlcihnYW1lU3RhdGUpIHtcbiAgICAvLyBSb2xsIGZvciBlYWNoIHBsYXllclxuICAgIGNvbnN0IHBsYXllclJvbGxzID0gW107XG4gICAgXG4gICAgT2JqZWN0LmtleXMoZ2FtZVN0YXRlLnBsYXllcnMpLmZvckVhY2gocGxheWVySWQgPT4ge1xuICAgICAgY29uc3Qgcm9sbCA9IHRoaXMucm9sbERpY2UoKTtcbiAgICAgIGNvbnN0IHRvdGFsID0gcm9sbFswXSArIHJvbGxbMV07XG4gICAgICBcbiAgICAgIHBsYXllclJvbGxzLnB1c2goe1xuICAgICAgICBwbGF5ZXJJZCxcbiAgICAgICAgcm9sbCxcbiAgICAgICAgdG90YWxcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIFxuICAgIC8vIFNvcnQgYnkgaGlnaGVzdCByb2xsXG4gICAgcGxheWVyUm9sbHMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgLy8gU29ydCBieSB0b3RhbCBmaXJzdFxuICAgICAgaWYgKGIudG90YWwgIT09IGEudG90YWwpIHtcbiAgICAgICAgcmV0dXJuIGIudG90YWwgLSBhLnRvdGFsO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBJZiB0aWVkLCBjaGUuLi4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI0ODkyZGFlOS1mNjZlLTQ2NWYtYTk3ZS0xYmNhNDliNmYwNTE7dG9vbHVfdnJ0eF8wMTVyNjRZMXVZZGVmOVdVc29jc2hYWWIiOnsicmVxdWVzdElkIjoiNDg5MmRhZTktZjY2ZS00NjVmLWE5N2UtMWJjYTQ5YjZmMDUxIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMTVyNjRZMXVZZGVmOVdVc29jc2hYWWIiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIGtla29wb2x5LWZyb250ZW5kL3NyYy9jb21wb25lbnRzL2dhbWUvR2FtZUJvYXJkLmpzeDpcbiAgICAgMVx0aW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VSZWYsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbiAgICAgMlx0aW1wb3J0IHtcbiAgICAgM1x0ICBCb3gsXG4gICAgIDRcdCAgVGFicyxcbiAgICAgNVx0ICBUYWJMaXN0LFxuICAgICA2XHQgIFRhYlBhbmVscyxcbiAgICAgN1x0ICBUYWJQYW5lbCxcbiAgICAgOFx0ICBUYWIsXG4gICAgIDlcdCAgSFN0YWNrLFxuICAgIDEwXHQgIFRleHQsXG4gICAgMTFcdCAgQnV0dG9uLFxuICAgIDEyXHQgIEltYWdlLFxuICAgIDEzXHQgIEZsZXgsXG4gICAgMTRcdCAgSWNvbkJ1dHRvbixcbiAgICAxNVx0ICBWU3RhY2ssXG4gICAgMTZcdCAgRGl2aWRlcixcbiAgICAxN1x0ICBCYWRnZSxcbiAgICAxOFx0ICBQb3BvdmVyLFxuICAgIDE5XHQgIFBvcG92ZXJUcmlnZ2VyLFxuICAgIDIwXHQgIFBvcG92ZXJDb250ZW50LFxuICAgIDIxXHQgIFBvcG92ZXJIZWFkZXIsXG4gICAgMjJcdCAgUG9wb3ZlckJvZHksXG4gICAgMjNcdCAgUG9wb3ZlckFycm93LFxuICAgIDI0XHQgIFBvcG92ZXJDbG9zZUJ1dHRvbixcbiAgICAyNVx0ICBBc3BlY3RSYXRpbyxcbiAgICAyNlx0ICB1c2VCcmVha3BvaW50VmFsdWUsXG4gICAgMjdcdCAgdXNlVG9hc3QsXG4gICAgMjhcdCAgQWxlcnQsXG4gICAgMjlcdCAgQWxlcnRJY29uLFxuICAgIDMwXHQgIEFsZXJ0VGl0bGUsXG4gICAgMzFcdCAgQWxlcnREZXNjcmlwdGlvbixcbiAgICAzMlx0ICBNb2RhbCxcbiAgICAzM1x0ICBNb2RhbE92ZXJsYXksXG4gICAgMzRcdCAgTW9kYWxDb250ZW50LFxuICAgIDM1XHQgIE1vZGFsSGVhZGVyLFxuICAgIDM2XHQgIE1vZGFsQm9keSxcbiAgICAzN1x0ICBNb2RhbEZvb3RlcixcbiAgICAzOFx0ICBNb2RhbENsb3NlQnV0dG9uLFxuICAgIDM5XHQgIHVzZURpc2Nsb3N1cmUsXG4gICAgNDBcdH0gZnJvbSAnQGNoYWtyYS11aS9yZWFjdCc7XG4gICAgNDFcdGltcG9ydCB7IGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbiAgICA0Mlx0aW1wb3J0IHsgdXNlU2VsZWN0b3IsIHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuICAgIDQzXHRpbXBvcnQgeyBIYW1idXJnZXJJY29uIH0gZnJvbSAnQGNoYWtyYS11aS9pY29ucyc7XG4gICAgNDRcdGltcG9ydCBnYW1lQm9hcmRJbWFnZSBmcm9tICcuLi8uLi9hc3NldHMvbmV3X2dhbWVfYm9hcmQucG5nJztcbiAgICA0NVx0aW1wb3J0IHsgYm9hcmRTcGFjZXMgYXMgY29uZmlnQm9hcmRTcGFjZXMgfSBmcm9tICcuLi8uLi9jb25maWcvYm9hcmRDb25maWcnO1xuICAgIDQ2XHRpbXBvcnQgeyBib2FyZFNwYWNlcyBhcyBtb2RlbEJvYXJkU3BhY2VzLCBwcm9wZXJ0aWVzIH0gZnJvbSAnLi4vLi4vY29yZS9tb2RlbHMvYm9hcmRDb25maWcnO1xuICAgIDQ3XHRpbXBvcnQgeyBib2FyZENvb3JkaW5hdGVzIH0gZnJvbSAnLi4vLi4vY29yZS9tb2RlbHMvYm9hcmRDb29yZGluYXRlcyc7XG4gICAgNDhcdGltcG9ydCBzb2NrZXRTZXJ2aWNlIGZyb20gJy4uLy4uL3NlcnZpY2VzL3NvY2tldFNlcnZpY2UnO1xuICAgIDQ5XHRpbXBvcnQgeyBtb3ZlUGxheWVyLCB1cGRhdGVEaWNlUm9sbCwgY2xlYXJHYW1lTWVzc2FnZXMsIGVuZFR1cm4sIHNldFBsYXllcnMsIHNldElzUm9sbGluZywgYnV5UHJvcGVydHkgfSBmcm9tICcuLi8uLi9zdG9yZS9nYW1lU2xpY2UnO1xuICAgIDUwXHRpbXBvcnQgeyBGYURpY2VGaXZlLCBGYUV4Y2xhbWF0aW9uVHJpYW5nbGUsIEZhQXJyb3dDaXJjbGVSaWdodCwgRmFIb21lIH0gZnJvbSAncmVhY3QtaWNvbnMvZmEnO1xuVG90YWwgbGluZXMgaW4gZmlsZTogMTY2NFxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiZTI1N2FmMTMtMTUxZS00MGUzLTkxMGMtZWRkODU1Y2FkMzI1O3Rvb2x1X3ZydHhfMDFXWHZhMllXVDZXVXJyWHhDTW9TY0NFIjp7InJlcXVlc3RJZCI6ImUyNTdhZjEzLTE1MWUtNDBlMy05MTBjLWVkZDg1NWNhZDMyNSIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFXWHZhMllXVDZXVXJyWHhDTW9TY0NFIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBrZWtvcG9seS1mcm9udGVuZC9zcmMvY29tcG9uZW50cy9nYW1lL0dhbWVCb2FyZC5qc3g6XG4gICAzMDBcdCAgLy8gU3RhdGUgZm9yIHRyYWNraW5nIGFuaW1hdGlvblxuICAgMzAxXHQgIGNvbnN0IFthbmltYXRpbmdQbGF5ZXIsIHNldEFuaW1hdGluZ1BsYXllcl0gPSB1c2VTdGF0ZShudWxsKTtcbiAgIDMwMlx0ICBjb25zdCBbYW5pbWF0aW9uU3RlcCwgc2V0QW5pbWF0aW9uU3RlcF0gPSB1c2VTdGF0ZSgwKTtcbiAgIDMwM1x0ICBjb25zdCBbYW5pbWF0aW9uUGF0aCwgc2V0QW5pbWF0aW9uUGF0aF0gPSB1c2VTdGF0ZShbXSk7XG4gICAzMDRcdFxuICAgMzA1XHQgIC8vIFN0YXRlIGZvciB0cmFja2luZyBzZWxlY3RlZCBwcm9wZXJ0eVxuICAgMzA2XHQgIGNvbnN0IFtzZWxlY3RlZFByb3BlcnR5LCBzZXRTZWxlY3RlZFByb3BlcnR5XSA9IHVzZVN0YXRlKG51bGwpO1xuICAgMzA3XHRcbiAgIDMwOFx0ICAvLyBSZWYgZm9yIHRoZSBnYW1lIGJvYXJkIGNvbnRhaW5lciB0byBnZXQgYWN0dWFsIGRpbWVuc2lvbnNcbiAgIDMwOVx0ICBjb25zdCBib2FyZENvbnRhaW5lclJlZiA9IHVzZVJlZihudWxsKTtcbiAgIDMxMFx0ICBjb25zdCBbYm9hcmREaW1lbnNpb25zLCBzZXRCb2FyZERpbWVuc2lvbnNdID0gdXNlU3RhdGUoeyB3aWR0aDogMCwgaGVpZ2h0OiAwIH0pO1xuICAgMzExXHRcbiAgIDMxMlx0ICBjb25zdCBsb2JieVBsYXllcnMgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5wbGF5ZXJzLnBsYXllcnMpOyAvLyBvYmplY3RcbiAgIDMxM1x0ICBjb25zdCBnYW1lUGxheWVycyA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLmdhbWUucGxheWVycyk7IC8vIGFycmF5XG4gICAzMTRcdFxuICAgMzE1XHQgIGNvbnN0IGdhbWVTdGF0ZSA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuZ2FtZSk7XG4gICAzMTZcdFxuICAgMzE3XHQgIC8vIEFkZCB0aGlzIHVzZVJlZiB0byB0cmFjayBwcmV2aW91cyBwbGF5ZXIgcG9zaXRpb25zXG4gICAzMThcdCAgY29uc3QgcHJldlBsYXllclBvc2l0aW9ucyA9IHVzZVJlZih7fSk7XG4gICAzMTlcdFxuICAgMzIwXHQgIGNvbnN0IGlzUm9sbGluZyA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLmdhbWUuaXNSb2xsaW5nKTtcbiAgIDMyMVx0XG4gICAzMjJcdCAgLy8gLS0tIFByb3BlcnR5IFB1cmNoYXNlIE1vZGFsIFN0YXRlIC0tLVxuICAgMzIzXHQgIGNvbnN0IFtzaG93UHVyY2hhc2VNb2RhbCwgc2V0U2hvd1B1cmNoYXNlTW9kYWxdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgMzI0XHQgIGNvbnN0IFtwdXJjaGFzZVByb3BlcnR5LCBzZXRQdXJjaGFzZVByb3BlcnR5XSA9IHVzZVN0YXRlKG51bGwpO1xuICAgMzI1XHQgIGNvbnN0IFtpc0J1eWluZywgc2V0SXNCdXlpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgMzI2XHQgIGNvbnN0IHB1cmNoYXNlRGlzY2xvc3VyZSA9IHVzZURpc2Nsb3N1cmUoKTtcbiAgIDMyN1x0XG4gICAzMjhcdCAgLy8gSGVscGVyOiBDaGVjayBpZiBjdXJyZW50IHBsYXllciBjYW4gYnV5IHByb3BlcnR5XG4gICAzMjlcdCAgY29uc3QgY2FuQnV5UHJvcGVydHkgPSAocGxheWVyLCBzcGFjZSwgYm9hcmRTdGF0ZSkgPT4ge1xuICAgMzMwXHQgICAgLy8gQmFzaWMgdmFsaWRhdGlvblxuICAgMzMxXHQgICAgaWYgKCFwbGF5ZXIgfHwgIXNwYWNlKSB7XG4gICAzMzJcdCAgICAgIGNvbnNvbGUubG9nKCdbUFJPUEVSVFlfUFVSQ0hBU0VdIE1pc3NpbmcgcGxheWVyIG9yIHNwYWNlIGRhdGEnKTtcbiAgIDMzM1x0ICAgICAgcmV0dXJuIGZhbHNlO1xuICAgMzM0XHQgICAgfVxuICAgMzM1XHRcbiAgIDMzNlx0ICAgIC8vIENoZWNrIGlmIHRoaXMgaXMgYSBwdXJjaGFzYWJsZSBwcm9wZXJ0eSAtIE9OTFkgYWxsb3cgXCJwcm9wZXJ0eVwiIHR5cGVcbiAgIDMzN1x0ICAgIC8vIEluIGJvYXJkQ29uZmlnLmpzLCBwdXJjaGFzYWJsZSBwcm9wZXJ0aWVzIGhhdmUgdHlwZTogJ3Byb3BlcnR5J1xuICAgMzM4XHQgICAgY29uc3QgcHJvcGVydHlUeXBlID0gc3BhY2UudHlwZT8udG9Mb3dlckNhc2UoKTtcbiAgIDMzOVx0ICAgIGNvbnN0IGlzVmFsaWRQcm9wZXJ0eVR5cGUgPSBwcm9wZXJ0eVR5cGUgPT09ICdwcm9wZXJ0eSc7XG4gICAzNDBcdFxuICAgMzQxXHQgICAgaWYgKCFpc1ZhbGlkUHJvcGVydHlUeXBlKSB7XG4gICAzNDJcdCAgICAgIGNvbnNvbGUubG9nKGBbUFJPUEVSVFlfUFVSQ0hBU0VdIE5vdCBhIHB1cmNoYXNhYmxlIHByb3BlcnR5IHR5cGU6ICR7cHJvcGVydHlUeXBlfWApO1xuICAgMzQzXHQgICAgICByZXR1cm4gZmFsc2U7XG4gICAzNDRcdCAgICB9XG4gICAzNDVcdFxuICAgMzQ2XHQgICAgLy8gQWxzbyBjaGVjayBpZiBpdCBoYXMgYSBwcm9wZXJ0eUlkIChyZXF1aXJlZCBmb3IgcHVyY2hhc2UpXG4gICAzNDdcdCAgICBpZiAoIXNwYWNlLnByb3BlcnR5SWQpIHtcbiAgIDM0OFx0ICAgICAgY29uc29sZS5sb2coJ1tQUk9QRVJUWV9QVVJDSEFTRV0gTWlzc2luZyBwcm9wZXJ0eUlkLCBjYW5ub3QgcHVyY2hhc2UnKTtcbiAgIDM0OVx0ICAgICAgcmV0dXJuIGZhbHNlO1xuICAgMzUwXHQgICAgfVxuICAgMzUxXHRcbiAgIDM1Mlx0ICAgIC8vIENoZWNrIGlmIGl0J3MgdGhlIHBsYXllcidzIHR1cm5cbiAgIDM1M1x0ICAgIGNvbnN0IGlzUGxheWVyVHVybiA9IHBsYXllci5pZCA9PT0gY3VycmVudFBsYXllcjtcbiAgIDM1NFx0ICAgIGlmICghaXNQbGF5ZXJUdXJuKSB7XG4gICAzNTVcdCAgICAgIGNvbnNvbGUubG9nKCdbUFJPUEVSVFlfUFVSQ0hBU0VdIE5vdCBwbGF5ZXJcXCdzIHR1cm4nKTtcbiAgIDM1Nlx0ICAgICAgcmV0dXJuIGZhbHNlO1xuICAgMzU3XHQgICAgfVxuICAgMzU4XHRcbiAgIDM1OVx0ICAgIC8vIEZpbmQgcHJvcGVydHkgc3RhdGUgb24gYm9hcmRcbiAgIDM2MFx0ICAgIGNvbnN0IHByb3BTdGF0ZSA9IGJvYXJkU3RhdGUuZmluZChzID0+IHMuaWQgPT09IHNwYWNlLnBvc2l0aW9uKTtcbiAgIDM2MVx0ICAgIGNvbnN0IGlzT3duZWQgPSBwcm9wU3RhdGUgJiYgcHJvcFN0YXRlLm93bmVyO1xuICAgMzYyXHRcbiAgIDM2M1x0ICAgIC8vIEdldCBwcm9wZXJ0eSBjb3N0IC0gdHJ5IG11bHRpcGxlIHNvdXJjZXNcbiAgIDM2NFx0ICAgIGNvbnN0IHByb3BlcnR5Q29zdCA9XG4gICAzNjVcdCAgICAgIChwcm9wZXJ0aWVzW3NwYWNlLnByb3BlcnR5SWRdPy5jb3N0KSB8fFxuICAgMzY2XHQgICAgICAoc3BhY2UucHJpY2UpIHx8XG4gICAzNjdcdCAgICAgIChzcGFjZS5wcm9wZXJ0eUlkID8gMjAwIDogMCk7IC8vIERlZmF1bHQgY29zdCBpZiBub3RoaW5nIGVsc2UgYXZhaWxhYmxlXG4gICAzNjhcdFxuICAgMzY5XHQgICAgLy8gQ2hlY2sgaWYgcGxheWVyIGhhcyBlbm91Z2ggbW9uZXlcbiAgIDM3MFx0ICAgIGNvbnN0IGhhc0Vub3VnaE1vbmV5ID0gcGxheWVyLmJhbGFuY2UgPj0gcHJvcGVydHlDb3N0O1xuICAgMzcxXHRcbiAgIDM3Mlx0ICAgIGNvbnNvbGUubG9nKCdbUFJPUEVSVFlfUFVSQ0hBU0VdIFByb3BlcnR5IHB1cmNoYXNlIGNoZWNrIGRldGFpbHM6Jywge1xuICAgMzczXHQgICAgICBwcm9wZXJ0eUlkOiBzcGFjZS5wcm9wZXJ0eUlkLFxuICAgMzc0XHQgICAgICBwb3NpdGlvbjogc3BhY2UucG9zaXRpb24sXG4gICAzNzVcdCAgICAgIHR5cGU6IHByb3BlcnR5VHlwZSxcbiAgIDM3Nlx0ICAgICAgaXNWYWxpZFByb3BlcnR5VHlwZSxcbiAgIDM3N1x0ICAgICAgaXNPd25lZCxcbiAgIDM3OFx0ICAgICAgcHJvcGVydHlDb3N0LFxuICAgMzc5XHQgICAgICBwbGF5ZXJCYWxhbmNlOiBwbGF5ZXIuYmFsYW5jZSxcbiAgIDM4MFx0ICAgICAgaGFzRW5vdWdoTW9uZXksXG4gICAzODFcdCAgICAgIGlzUGxheWVyVHVyblxuICAgMzgyXHQgICAgfSk7XG4gICAzODNcdFxuICAgMzg0XHQgICAgLy8gVW5vd25lZCwgdmFsaWQgcHJvcGVydHkgdHlwZSwgcGxheWVyJ3MgdHVybiwgYW5kIHBsYXllciBoYXMgZW5vdWdoIG1vbmV5XG4gICAzODVcdCAgICByZXR1cm4gIWlzT3duZWQgJiYgaXNWYWxpZFByb3BlcnR5VHlwZSAmJiBpc1BsYXllclR1cm4gJiYgaGFzRW5vdWdoTW9uZXk7XG4gICAzODZcdCAgfTtcbiAgIDM4N1x0XG4gICAzODhcdCAgLy8gRGV0ZWN0IGFmdGVyIG1vdmVtZW50IGlmIHBsYXllciBpcyBvbiBhbiB1bm93bmVkIHByb3BlcnR5XG4gICAzODlcdCAgdXNlRWZmZWN0KCgpID0+IHtcbiAgIDM5MFx0ICAgIGlmICghY3VycmVudFBsYXllckRhdGEgfHwgIWN1cnJlbnRQbGF5ZXJEYXRhLnBvc2l0aW9uKSByZXR1cm47XG4gICAzOTFcdCAgICBjb25zdCBzcGFjZSA9IGdldFNwYWNlRGF0YUJ5UG9zaXRpb24oY3VycmVudFBsYXllckRhdGEucG9zaXRpb24pO1xuICAgMzkyXHRcbiAgIDM5M1x0ICAgIC8vIERlYnVnIGxvZyB0byBoZWxwIHRyb3VibGVzaG9vdCBwcm9wZXJ0eSBwdXJjaGFzZSBVSVxuICAgMzk0XHQgICAgY29uc29sZS5sb2coJ1tQUk9QRVJUWV9QVVJDSEFTRV0gQ2hlY2tpbmcgaWYgY2FuIGJ1eSBwcm9wZXJ0eTonLCB7XG4gICAzOTVcdCAgICAgIGN1cnJlbnRQb3NpdGlvbjogY3VycmVudFBsYXllckRhdGEucG9zaXRpb24sXG4gICAzOTZcdCAgICAgIHNwYWNlLFxuICAgMzk3XHQgICAgICBpc0xvY2FsUGxheWVyVHVybjogc29ja2V0U2VydmljZT8uaXNMb2NhbFBsYXllclR1cm4/LigpLFxuICAgMzk4XHQgICAgICBjdXJyZW50UGxheWVyOiBjdXJyZW50UGxheWVyLFxuICAgMzk5XHQgICAgICBsb2NhbFBsYXllcklkOiBzb2NrZXRTZXJ2aWNlPy5sb2NhbFBsYXllcklkXG4gICA0MDBcdCAgICB9KTtcblRvdGFsIGxpbmVzIGluIGZpbGU6IDE2NjRcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImRmNWYwNTQxLTc5YjgtNGFjNi04ZDQxLTVlYTI0N2EwMzJlYTt0b29sdV92cnR4XzAxQm9waFRYZUJqcXpnczVzV1JMUVBMaiI6eyJyZXF1ZXN0SWQiOiJkZjVmMDU0MS03OWI4LTRhYzYtOGQ0MS01ZWEyNDdhMDMyZWEiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxQm9waFRYZUJqcXpnczVzV1JMUVBMaiIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24ga2Vrb3BvbHktZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvZ2FtZS9HYW1lQm9hcmQuanN4OlxuICAgNDAwXHQgICAgfSk7XG4gICA0MDFcdFxuICAgNDAyXHQgICAgaWYgKGNhbkJ1eVByb3BlcnR5KGN1cnJlbnRQbGF5ZXJEYXRhLCBzcGFjZSwgY3VycmVudEJvYXJkU3RhdGUpKSB7XG4gICA0MDNcdCAgICAgIGNvbnNvbGUubG9nKCdbUFJPUEVSVFlfUFVSQ0hBU0VdIENhbiBidXkgcHJvcGVydHksIHNob3dpbmcgcHVyY2hhc2UgbW9kYWwnKTtcbiAgIDQwNFx0ICAgICAgc2V0UHVyY2hhc2VQcm9wZXJ0eShzcGFjZSk7XG4gICA0MDVcdCAgICAgIHNldFNob3dQdXJjaGFzZU1vZGFsKHRydWUpO1xuICAgNDA2XHQgICAgICBwdXJjaGFzZURpc2Nsb3N1cmUub25PcGVuKCk7XG4gICA0MDdcdCAgICB9IGVsc2Uge1xuICAgNDA4XHQgICAgICBjb25zb2xlLmxvZygnW1BST1BFUlRZX1BVUkNIQVNFXSBDYW5ub3QgYnV5IHByb3BlcnR5LCBoaWRpbmcgcHVyY2hhc2UgbW9kYWwnKTtcbiAgIDQwOVx0ICAgICAgc2V0U2hvd1B1cmNoYXNlTW9kYWwoZmFsc2UpO1xuICAgNDEwXHQgICAgICBzZXRQdXJjaGFzZVByb3BlcnR5KG51bGwpO1xuICAgNDExXHQgICAgICBwdXJjaGFzZURpc2Nsb3N1cmUub25DbG9zZSgpO1xuICAgNDEyXHQgICAgfVxuICAgNDEzXHQgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICA0MTRcdCAgfSwgW2N1cnJlbnRQbGF5ZXJEYXRhPy5wb3NpdGlvbiwgY3VycmVudEJvYXJkU3RhdGVdKTtcbiAgIDQxNVx0XG4gICA0MTZcdCAgLy8gSGFuZGxlcjogQnV5IHByb3BlcnR5XG4gICA0MTdcdCAgY29uc3QgaGFuZGxlQnV5UHJvcGVydHkgPSBhc3luYyAoKSA9PiB7XG4gICA0MThcdCAgICBpZiAoIXB1cmNoYXNlUHJvcGVydHkpIHJldHVybjtcbiAgIDQxOVx0ICAgIHNldElzQnV5aW5nKHRydWUpO1xuICAgNDIwXHQgICAgdHJ5IHtcbiAgIDQyMVx0ICAgICAgLy8gVXNlIHRoZSBsb2NhbCBSZWR1eCBhY3Rpb24gdG8gdXBkYXRlIHRoZSBVSSBpbW1lZGlhdGVseVxuICAgNDIyXHQgICAgICBkaXNwYXRjaChidXlQcm9wZXJ0eSh7XG4gICA0MjNcdCAgICAgICAgcGxheWVySWQ6IGN1cnJlbnRQbGF5ZXJEYXRhPy5pZCxcbiAgIDQyNFx0ICAgICAgICBwcm9wZXJ0eUlkOiBwdXJjaGFzZVByb3BlcnR5LnBvc2l0aW9uIC8vIFVzZSBwb3NpdGlvbiBhcyBwcm9wZXJ0eUlkIGZvciBib2FyZCBzcGFjZXNcbiAgIDQyNVx0ICAgICAgfSkpO1xuICAgNDI2XHRcbiAgIDQyN1x0ICAgICAgLy8gQWxzbyBzZW5kIHZpYSBXZWJTb2NrZXQgaWYgY29ubmVjdGVkXG4gICA0MjhcdCAgICAgIGlmIChzb2NrZXRTZXJ2aWNlICYmIHNvY2tldFNlcnZpY2Uuc29ja2V0ICYmIHNvY2tldFNlcnZpY2Uuc29ja2V0LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOKSB7XG4gICA0MjlcdCAgICAgICAgc29ja2V0U2VydmljZS5zZW5kTWVzc2FnZSgnYnV5X3Byb3BlcnR5Jywge1xuICAgNDMwXHQgICAgICAgICAgcHJvcGVydHlJZDogcHVyY2hhc2VQcm9wZXJ0eS5wcm9wZXJ0eUlkIHx8IHB1cmNoYXNlUHJvcGVydHkucG9zaXRpb24sXG4gICA0MzFcdCAgICAgICAgICBwbGF5ZXJJZDogY3VycmVudFBsYXllckRhdGE/LmlkXG4gICA0MzJcdCAgICAgICAgfSk7XG4gICA0MzNcdCAgICAgIH1cbiAgIDQzNFx0XG4gICA0MzVcdCAgICAgIHRvYXN0KHsgdGl0bGU6ICdQcm9wZXJ0eSBwdXJjaGFzZWQhJywgc3RhdHVzOiAnc3VjY2VzcycsIGR1cmF0aW9uOiAzMDAwLCBpc0Nsb3NhYmxlOiB0cnVlIH0pO1xuICAgNDM2XHQgICAgICBzZXRTaG93UHVyY2hhc2VNb2RhbChmYWxzZSk7XG4gICA0MzdcdCAgICAgIHNldFB1cmNoYXNlUHJvcGVydHkobnVsbCk7XG4gICA0MzhcdCAgICAgIHB1cmNoYXNlRGlzY2xvc3VyZS5vbkNsb3NlKCk7XG4gICA0MzlcdCAgICB9IGNhdGNoIChlcnIpIHtcbiAgIDQ0MFx0ICAgICAgdG9hc3QoeyB0aXRsZTogJ0Vycm9yJywgZGVzY3JpcHRpb246IGVyci5tZXNzYWdlLCBzdGF0dXM6ICdlcnJvcicsIGR1cmF0aW9uOiA0MDAwLCBpc0Nsb3NhYmxlOiB0cnVlIH0pO1xuICAgNDQxXHQgICAgfSBmaW5hbGx5IHtcbiAgIDQ0Mlx0ICAgICAgc2V0SXNCdXlpbmcoZmFsc2UpO1xuICAgNDQzXHQgICAgfVxuICAgNDQ0XHQgIH07XG4gICA0NDVcdFxuICAgNDQ2XHQgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICA0NDdcdCAgICBpZiAoXG4gICA0NDhcdCAgICAgIGdhbWVQbGF5ZXJzLmxlbmd0aCA9PT0gMCAmJlxuICAgNDQ5XHQgICAgICBPYmplY3Qua2V5cyhsb2JieVBsYXllcnMpLmxlbmd0aCA+IDAgJiZcbiAgIDQ1MFx0ICAgICAgZ2FtZVN0YXRlLmhvc3RJZFxuICAgNDUxXHQgICAgKSB7XG4gICA0NTJcdCAgICAgIC8vIFNvcnQgcGxheWVyczogaG9zdCBmaXJzdCwgdGhlbiBvdGhlcnNcbiAgIDQ1M1x0ICAgICAgY29uc3QgcGxheWVyc0FycmF5ID0gT2JqZWN0LnZhbHVlcyhsb2JieVBsYXllcnMpXG4gICA0NTRcdCAgICAgICAgLnNvcnQoKGEsIGIpID0+IChhLmlkID09PSBnYW1lU3RhdGUuaG9zdElkID8gLTEgOiBiLmlkID09PSBnYW1lU3RhdGUuaG9zdElkID8gMSA6IDApKVxuICAgNDU1XHQgICAgICAgIC5tYXAocCA9PiAoe1xuICAgNDU2XHQgICAgICAgICAgLi4ucCxcbiAgIDQ1N1x0ICAgICAgICAgIHBvc2l0aW9uOiBwLnBvc2l0aW9uIHx8IDEsIC8vIGRlZmF1bHQgdG8gU1RBUlRcbiAgIDQ1OFx0ICAgICAgICAgIGJhbGFuY2U6IHAuYmFsYW5jZSB8fCAxNTAwLFxuICAgNDU5XHQgICAgICAgICAgcHJvcGVydGllczogcC5wcm9wZXJ0aWVzIHx8IFtdLFxuICAgNDYwXHQgICAgICAgICAgaW5KYWlsOiBwLmluSmFpbCB8fCBmYWxzZSxcbiAgIDQ2MVx0ICAgICAgICAgIGphaWxUdXJuczogcC5qYWlsVHVybnMgfHwgMCxcbiAgIDQ2Mlx0ICAgICAgICAgIGlzUmVhZHk6IHAuaXNSZWFkeSB8fCBmYWxzZSxcbiAgIDQ2M1x0ICAgICAgICAgIGlzSG9zdDogcC5pc0hvc3QgfHwgZmFsc2UsXG4gICA0NjRcdCAgICAgICAgfSkpO1xuICAgNDY1XHQgICAgICBkaXNwYXRjaChzZXRQbGF5ZXJzKHBsYXllcnNBcnJheSkpO1xuICAgNDY2XHQgICAgICBpZiAoZ2FtZVN0YXRlLmhvc3RJZCkge1xuICAgNDY3XHQgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ2dhbWUvc2V0Q3VycmVudFBsYXllcicsIHBheWxvYWQ6IGdhbWVTdGF0ZS5ob3N0SWQgfSk7IC8vIEhvc3Qgc3RhcnRzXG4gICA0NjhcdCAgICAgIH1cbiAgIDQ2OVx0ICAgIH1cbiAgIDQ3MFx0ICB9LCBbbG9iYnlQbGF5ZXJzLCBnYW1lUGxheWVycywgZGlzcGF0Y2gsIGdhbWVTdGF0ZS5ob3N0SWRdKTtcbiAgIDQ3MVx0XG4gICA0NzJcdCAgLy8gSW5pdGlhbGl6ZSBzb2NrZXQgY29ubmVjdGlvblxuICAgNDczXHQgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICA0NzRcdCAgICAvLyBDaGVjayBpZiBzb2NrZXRTZXJ2aWNlIGV4aXN0cyBhbmQgaWYgc29ja2V0IGlzIGFscmVhZHkgY29ubmVjdGVkXG4gICA0NzVcdCAgICBpZiAoIXNvY2tldFNlcnZpY2UgfHwgIXNvY2tldFNlcnZpY2Uuc29ja2V0IHx8IHNvY2tldFNlcnZpY2Uuc29ja2V0LnJlYWR5U3RhdGUgIT09IFdlYlNvY2tldC5PUEVOKSB7XG4gICA0NzZcdCAgICAgIHRyeSB7XG4gICA0NzdcdCAgICAgICAgLy8gR2V0IGdhbWUgSUQgZnJvbSBVUkwgb3IgUmVkdXhcbiAgIDQ3OFx0ICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICAgNDc5XHQgICAgICAgIGNvbnN0IGdhbWVJZCA9IHVybFBhcmFtcy5nZXQoJ2dhbWVJZCcpIHx8IGN1cnJlbnRQbGF5ZXJEYXRhPy5nYW1lSWQ7XG4gICA0ODBcdCAgICAgICAgY29uc3QgcGxheWVySWQgPSBjdXJyZW50UGxheWVyRGF0YT8uaWQ7XG4gICA0ODFcdFxuICAgNDgyXHQgICAgICAgIGlmICghZ2FtZUlkIHx8ICFwbGF5ZXJJZCkge1xuICAgNDgzXHQgICAgICAgICAgcmV0dXJuOyAvLyBFeGl0IGVhcmx5IGlmIHdlIGRvbid0IGhhdmUgcmVxdWlyZWQgZGF0YVxuICAgNDg0XHQgICAgICAgIH1cbiAgIDQ4NVx0XG4gICA0ODZcdCAgICAgICAgY29uc29sZS5sb2coYENvbm5lY3RpbmcgdG8gZ2FtZTogJHtnYW1lSWR9IGFzIHBsYXllcjogJHtwbGF5ZXJJZH1gKTtcbiAgIDQ4N1x0XG4gICA0ODhcdCAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgc29ja2V0IHNlcnZpY2UgaWYgaXQgZXhpc3RzXG4gICA0ODlcdCAgICAgICAgaWYgKHNvY2tldFNlcnZpY2U/LmluaXRpYWxpemUpIHtcbiAgIDQ5MFx0ICAgICAgICAgIHNvY2tldFNlcnZpY2UuaW5pdGlhbGl6ZSgpO1xuICAgNDkxXHQgICAgICAgIH0gZWxzZSB7XG4gICA0OTJcdCAgICAgICAgICByZXR1cm47XG4gICA0OTNcdCAgICAgICAgfVxuICAgNDk0XHRcbiAgIDQ5NVx0ICAgICAgICAvLyBHZXQgYXV0aGVudGljYXRpb24gdG9rZW4gKGluIGEgcmVhbCBhcHAsIHRoaXMgd291bGQgY29tZSBmcm9tIGxvY2FsU3RvcmFnZSBvciBhdXRoZW50aWNhdGlvbiBzZXJ2aWNlKVxuICAgNDk2XHQgICAgICAgIGNvbnN0IGF1dGhUb2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGBrZWtvcG9seV90b2tlbl8ke2dhbWVJZH1gKSB8fCAndGVtcC10b2tlbic7XG4gICA0OTdcdFxuICAgNDk4XHQgICAgICAgIC8vIENvbm5lY3QgdG8gdGhlIHNvY2tldCB3aXRoIHByb3BlciBhdXRoZW50aWNhdGlvblxuICAgNDk5XHQgICAgICAgIGlmIChzb2NrZXRTZXJ2aWNlPy5jb25uZWN0KSB7XG4gICA1MDBcdCAgICAgICAgICBzb2NrZXRTZXJ2aWNlLmNvbm5lY3QoZ2FtZUlkLCBwbGF5ZXJJZCwgYXV0aFRva2VuKTtcblRvdGFsIGxpbmVzIGluIGZpbGU6IDE2NjRcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjkzYjk0ZWZiLWU4ODQtNGQ0OS05MjgwLTY3MGZhZGI4YjMyYTt0b29sdV92cnR4XzAxS2pmeW8zTmJ0NW55NjUxTWZrZnl6QSI6eyJyZXF1ZXN0SWQiOiI5M2I5NGVmYi1lODg0LTRkNDktOTI4MC02NzBmYWRiOGIzMmEiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxS2pmeW8zTmJ0NW55NjUxTWZrZnl6QSIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24ga2Vrb3BvbHktZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvZ2FtZS9HYW1lQm9hcmQuanN4OlxuICAgNzAwXHQgICAgICB9XG4gICA3MDFcdFxuICAgNzAyXHQgICAgICBjb25zdCBzcGFjZSA9IGdldFNwYWNlRGF0YUJ5UG9zaXRpb24ocG9zaXRpb24pO1xuICAgNzAzXHQgICAgICByZXR1cm4gc3BhY2U/Lm5hbWUgfHwgYFNwYWNlICR7cG9zaXRpb259YDtcbiAgIDcwNFx0ICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICA3MDVcdCAgICAgIHJldHVybiAnVW5rbm93bic7XG4gICA3MDZcdCAgICB9XG4gICA3MDdcdCAgfTtcbiAgIDcwOFx0XG4gICA3MDlcdCAgLy8gR2V0IHZpZXdwb3J0IHNpemUgZm9yIHJlc3BvbnNpdmUgYWRqdXN0bWVudHNcbiAgIDcxMFx0ICBjb25zdCBpc01vYmlsZSA9IHVzZUJyZWFrcG9pbnRWYWx1ZSh7IGJhc2U6IHRydWUsIG1kOiBmYWxzZSB9KTtcbiAgIDcxMVx0XG4gICA3MTJcdCAgLy8gRnVuY3Rpb24gdG8gYW5pbWF0ZSBwbGF5ZXIgbW92ZW1lbnQgc3RlcCBieSBzdGVwXG4gICA3MTNcdCAgY29uc3QgYW5pbWF0ZVBsYXllck1vdmVtZW50ID0gKHBsYXllcklkLCBzdGFydFBvc2l0aW9uLCBzdGVwcywgZGlyZWN0UG9zaXRpb24gPSBudWxsKSA9PiB7XG4gICA3MTRcdCAgICAvLyBEZWZhdWx0IHRvIHBvc2l0aW9uIDEgKFNUQVJUKSBpZiBzdGFydFBvc2l0aW9uIGlzIHVuZGVmaW5lZFxuICAgNzE1XHQgICAgY29uc3QgY3VycmVudFBvc2l0aW9uID0gc3RhcnRQb3NpdGlvbiB8fCAxO1xuICAgNzE2XHRcbiAgIDcxN1x0ICAgIC8vIENsZWFyIGFueSBleGlzdGluZyBhbmltYXRpb25cbiAgIDcxOFx0ICAgIHNldEFuaW1hdGlvblN0ZXAoMCk7XG4gICA3MTlcdFxuICAgNzIwXHQgICAgLy8gQ2FsY3VsYXRlIGFsbCBwb3NpdGlvbnMgdGhlIHBsYXllciB3aWxsIG1vdmUgdGhyb3VnaFxuICAgNzIxXHQgICAgY29uc3QgcGF0aCA9IFtdO1xuICAgNzIyXHRcbiAgIDcyM1x0ICAgIGlmIChkaXJlY3RQb3NpdGlvbiAhPT0gbnVsbCkge1xuICAgNzI0XHQgICAgICAvLyBEaXJlY3QgbW92ZW1lbnQgdG8gYSBzcGVjaWZpYyBwb3NpdGlvbiAoZS5nLiwgZ29pbmcgdG8gamFpbClcbiAgIDcyNVx0ICAgICAgcGF0aC5wdXNoKGRpcmVjdFBvc2l0aW9uKTtcbiAgIDcyNlx0ICAgIH0gZWxzZSB7XG4gICA3MjdcdCAgICAgIC8vIFdlIG5lZWQgdG8gaGFuZGxlIHRoZSBib2FyZCBsYXlvdXQgY29ycmVjdGx5XG4gICA3MjhcdCAgICAgIC8vIFRoZSBib2FyZCBwb3NpdGlvbnMgYXJlIGZyb20gMCB0byAyNSB3aXRoIHBvc2l0aW9uIDEgYmVpbmcgU1RBUlRcbiAgIDcyOVx0ICAgICAgbGV0IGN1cnJlbnRQb3MgPSBwYXJzZUludChjdXJyZW50UG9zaXRpb24pO1xuICAgNzMwXHRcbiAgIDczMVx0ICAgICAgLy8gR2VuZXJhdGUgdGhlIHBhdGggb2YgcG9zaXRpb25zXG4gICA3MzJcdCAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IHN0ZXBzOyBpKyspIHtcbiAgIDczM1x0ICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgNzM0XHQgICAgICAgICAgLy8gQWRkIGN1cnJlbnQgcG9zaXRpb24gYXMgZmlyc3Qgc3RlcFxuICAgNzM1XHQgICAgICAgICAgcGF0aC5wdXNoKGN1cnJlbnRQb3MpO1xuICAgNzM2XHQgICAgICAgICAgY29udGludWU7XG4gICA3MzdcdCAgICAgICAgfVxuICAgNzM4XHRcbiAgIDczOVx0ICAgICAgICAvLyBNb3ZlIHRvIG5leHQgcG9zaXRpb25cbiAgIDc0MFx0ICAgICAgICBjdXJyZW50UG9zICs9IDE7XG4gICA3NDFcdFxuICAgNzQyXHQgICAgICAgIC8vIElmIHdlIGdvIGJleW9uZCBwb3NpdGlvbiAyNSwgd3JhcCBiYWNrIHRvIHBvc2l0aW9uIDFcbiAgIDc0M1x0ICAgICAgICBpZiAoY3VycmVudFBvcyA+IDI1KSB7XG4gICA3NDRcdCAgICAgICAgICBjdXJyZW50UG9zID0gMTtcbiAgIDc0NVx0ICAgICAgICB9XG4gICA3NDZcdFxuICAgNzQ3XHQgICAgICAgIC8vIEFkZCB0aGlzIHBvc2l0aW9uIHRvIHRoZSBwYXRoXG4gICA3NDhcdCAgICAgICAgcGF0aC5wdXNoKGN1cnJlbnRQb3MpO1xuICAgNzQ5XHQgICAgICB9XG4gICA3NTBcdCAgICB9XG4gICA3NTFcdFxuICAgNzUyXHQgICAgLy8gU2V0IHRoZSBhbmltYXRpb24gZGF0YVxuICAgNzUzXHQgICAgc2V0QW5pbWF0aW5nUGxheWVyKHBsYXllcklkKTtcbiAgIDc1NFx0ICAgIHNldEFuaW1hdGlvblBhdGgocGF0aCk7XG4gICA3NTVcdFxuICAgNzU2XHQgICAgLy8gU3RhcnQgdGhlIGFuaW1hdGlvblxuICAgNzU3XHQgICAgY29uc3QgYW5pbWF0ZVN0ZXAgPSAoc3RlcCkgPT4ge1xuICAgNzU4XHQgICAgICBpZiAoc3RlcCA+PSBwYXRoLmxlbmd0aCkge1xuICAgNzU5XHQgICAgICAgIC8vIEFuaW1hdGlvbiBjb21wbGV0ZVxuICAgNzYwXHQgICAgICAgIHNldEFuaW1hdGluZ1BsYXllcihudWxsKTtcbiAgIDc2MVx0ICAgICAgICBzZXRBbmltYXRpb25QYXRoKFtdKTtcbiAgIDc2Mlx0XG4gICA3NjNcdCAgICAgICAgLy8gVXBkYXRlIHRoZSBwbGF5ZXIgcG9zaXRpb24gaW4gUmVkdXggYWZ0ZXIgYW5pbWF0aW9uIGNvbXBsZXRlc1xuICAgNzY0XHQgICAgICAgIGRpc3BhdGNoKG1vdmVQbGF5ZXIoe1xuICAgNzY1XHQgICAgICAgICAgcGxheWVySWQ6IHBsYXllcklkLFxuICAgNzY2XHQgICAgICAgICAgbmV3UG9zaXRpb246IHBhdGhbcGF0aC5sZW5ndGggLSAxXVxuICAgNzY3XHQgICAgICAgIH0pKTtcbiAgIDc2OFx0ICAgICAgICByZXR1cm47XG4gICA3NjlcdCAgICAgIH1cbiAgIDc3MFx0XG4gICA3NzFcdCAgICAgIC8vIFVwZGF0ZSB0aGUgcGxheWVyJ3MgdGVtcG9yYXJ5IHBvc2l0aW9uIGZvciBhbmltYXRpb25cbiAgIDc3Mlx0ICAgICAgc2V0QW5pbWF0aW9uU3RlcChzdGVwKTtcbiAgIDc3M1x0XG4gICA3NzRcdCAgICAgIC8vIE1vdmUgdG8gbmV4dCBzdGVwIGFmdGVyIGRlbGF5XG4gICA3NzVcdCAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgNzc2XHQgICAgICAgIGFuaW1hdGVTdGVwKHN0ZXAgKyAxKTtcbiAgIDc3N1x0ICAgICAgfSwgMzAwKTsgLy8gMzAwbXMgZGVsYXkgYmV0d2VlbiBzdGVwc1xuICAgNzc4XHQgICAgfTtcbiAgIDc3OVx0XG4gICA3ODBcdCAgICAvLyBTdGFydCBhbmltYXRpb24gd2l0aCBzdGVwIDBcbiAgIDc4MVx0ICAgIGFuaW1hdGVTdGVwKDApO1xuICAgNzgyXHQgIH07XG4gICA3ODNcdFxuICAgNzg0XHQgIC8vIEhhbmRsZSB0aGUgUm9sbCBEaWNlIGJ1dHRvbiBjbGlja1xuICAgNzg1XHQgIGNvbnN0IGhhbmRsZVJvbGxEaWNlID0gKCkgPT4ge1xuICAgNzg2XHQgICAgdHJ5IHtcbiAgIDc4N1x0ICAgICAgLy8gRmlyc3QgY2hlY2sgaWYgaXQncyB0aGUgbG9jYWwgcGxheWVyJ3MgdHVyblxuICAgNzg4XHQgICAgICBpZiAoIXNvY2tldFNlcnZpY2UuaXNMb2NhbFBsYXllclR1cm4oKSkge1xuICAgNzg5XHQgICAgICAgIHRvYXN0KHtcbiAgIDc5MFx0ICAgICAgICAgIHRpdGxlOiBcIk5vdCB5b3VyIHR1cm5cIixcbiAgIDc5MVx0ICAgICAgICAgIGRlc2NyaXB0aW9uOiBgSXQncyAke3BsYXllcnMuZmluZChwID0+IHAuaWQgPT09IGN1cnJlbnRQbGF5ZXIpPy5uYW1lIHx8IFwiYW5vdGhlciBwbGF5ZXJcIn0ncyB0dXJuYCxcbiAgIDc5Mlx0ICAgICAgICAgIHN0YXR1czogXCJ3YXJuaW5nXCIsXG4gICA3OTNcdCAgICAgICAgICBkdXJhdGlvbjogMzAwMCxcbiAgIDc5NFx0ICAgICAgICAgIGlzQ2xvc2FibGU6IHRydWUsXG4gICA3OTVcdCAgICAgICAgfSk7XG4gICA3OTZcdCAgICAgICAgZGlzcGF0Y2goc2V0SXNSb2xsaW5nKGZhbHNlKSk7XG4gICA3OTdcdCAgICAgICAgcmV0dXJuO1xuICAgNzk4XHQgICAgICB9XG4gICA3OTlcdFxuICAgODAwXHQgICAgICAvLyBDaGVjayBpZiBwbGF5ZXIgaXMgaW4gamFpbFxuVG90YWwgbGluZXMgaW4gZmlsZTogMTY2NFxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiOTVmZDZmNzgtNGZiZi00ZGFlLWExYzQtZTBhNWIxMGU5NGQwO3Rvb2x1X3ZydHhfMDEyUnZaWW04TEs3MnhGVkFEWHVmZDJRIjp7InJlcXVlc3RJZCI6Ijk1ZmQ2Zjc4LTRmYmYtNGRhZS1hMWM0LWUwYTViMTBlOTRkMCIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDEyUnZaWW04TEs3MnhGVkFEWHVmZDJRIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBrZWtvcG9seS1mcm9udGVuZC9zcmMvY29tcG9uZW50cy9nYW1lL0dhbWVCb2FyZC5qc3g6XG4gICA4MDBcdCAgICAgIC8vIENoZWNrIGlmIHBsYXllciBpcyBpbiBqYWlsXG4gICA4MDFcdCAgICAgIGlmIChjdXJyZW50UGxheWVyRGF0YT8uaW5KYWlsKSB7XG4gICA4MDJcdCAgICAgICAgdG9hc3Qoe1xuICAgODAzXHQgICAgICAgICAgdGl0bGU6IFwiWW91J3JlIGluIGphaWwhXCIsXG4gICA4MDRcdCAgICAgICAgICBkZXNjcmlwdGlvbjogYFlvdSBuZWVkIHRvIHJvbGwgZG91YmxlcyBvciB3YWl0ICR7Y3VycmVudFBsYXllckRhdGEuamFpbFR1cm5zfSBtb3JlIHR1cm5zLmAsXG4gICA4MDVcdCAgICAgICAgICBzdGF0dXM6IFwid2FybmluZ1wiLFxuICAgODA2XHQgICAgICAgICAgZHVyYXRpb246IDMwMDAsXG4gICA4MDdcdCAgICAgICAgICBpc0Nsb3NhYmxlOiB0cnVlLFxuICAgODA4XHQgICAgICAgIH0pO1xuICAgODA5XHQgICAgICAgIGRpc3BhdGNoKHNldElzUm9sbGluZyhmYWxzZSkpO1xuICAgODEwXHQgICAgICAgIHJldHVybjtcbiAgIDgxMVx0ICAgICAgfVxuICAgODEyXHRcbiAgIDgxM1x0ICAgICAgLy8gU2V0IHJvbGxpbmcgc3RhdGUgdG8gdHJ1ZVxuICAgODE0XHQgICAgICBkaXNwYXRjaChzZXRJc1JvbGxpbmcodHJ1ZSkpO1xuICAgODE1XHRcbiAgIDgxNlx0ICAgICAgLy8gQ2hlY2sgaWYgV2ViU29ja2V0IGlzIGNvbm5lY3RlZCBiZWZvcmUgdHJ5aW5nIHRvIHJvbGwgZGljZVxuICAgODE3XHQgICAgICBpZiAoc29ja2V0U2VydmljZS5zb2NrZXQgJiYgc29ja2V0U2VydmljZS5zb2NrZXQucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pIHtcbiAgIDgxOFx0ICAgICAgICBjb25zb2xlLmxvZygnW0RJQ0VdIFNlbmRpbmcgcm9sbF9kaWNlIHJlcXVlc3QgdG8gc2VydmVyJyk7XG4gICA4MTlcdCAgICAgICAgLy8gQ2FsbCB0aGUgc29ja2V0IHNlcnZpY2UgdG8gcm9sbCBkaWNlXG4gICA4MjBcdCAgICAgICAgc29ja2V0U2VydmljZS5yb2xsRGljZSgpO1xuICAgODIxXHRcbiAgIDgyMlx0ICAgICAgICAvLyBTZXQgdXAgYSB0aW1lb3V0IHRvIGhhbmRsZSBwb3RlbnRpYWwgV2ViU29ja2V0IGZhaWx1cmVzXG4gICA4MjNcdCAgICAgICAgY29uc3Qgd3NUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICA4MjRcdCAgICAgICAgICBpZiAoaXNSb2xsaW5nKSB7XG4gICA4MjVcdCAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbRElDRV0gV2ViU29ja2V0IHRpbWVvdXQsIGZhbGxpbmcgYmFjayB0byBsb2NhbCBkaWNlIHJvbGwnKTtcbiAgIDgyNlx0ICAgICAgICAgICAgaGFuZGxlTG9jYWxEaWNlUm9sbCgpO1xuICAgODI3XHQgICAgICAgICAgICBkaXNwYXRjaChzZXRJc1JvbGxpbmcoZmFsc2UpKTtcbiAgIDgyOFx0ICAgICAgICAgIH1cbiAgIDgyOVx0ICAgICAgICB9LCAzMDAwKTtcbiAgIDgzMFx0XG4gICA4MzFcdCAgICAgICAgLy8gQ2xlYW4gdXAgdGltZW91dCB3aGVuIGNvbXBvbmVudCB1bm1vdW50cyBvciByb2xsIGNvbXBsZXRlc1xuICAgODMyXHQgICAgICAgIHJldHVybiAoKSA9PiBjbGVhclRpbWVvdXQod3NUaW1lb3V0KTtcbiAgIDgzM1x0ICAgICAgfSBlbHNlIHtcbiAgIDgzNFx0ICAgICAgICBjb25zb2xlLmxvZygnW0RJQ0VdIFdlYlNvY2tldCBub3QgY29ubmVjdGVkLCB1c2luZyBsb2NhbCBkaWNlIHJvbGwnKTtcbiAgIDgzNVx0ICAgICAgICBoYW5kbGVMb2NhbERpY2VSb2xsKCk7XG4gICA4MzZcdCAgICAgICAgZGlzcGF0Y2goc2V0SXNSb2xsaW5nKGZhbHNlKSk7XG4gICA4MzdcdCAgICAgIH1cbiAgIDgzOFx0ICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICA4MzlcdCAgICAgIGNvbnNvbGUuZXJyb3IoJ1tESUNFXSBFcnJvciByb2xsaW5nIGRpY2U6JywgZXJyb3IpO1xuICAgODQwXHQgICAgICBkaXNwYXRjaChzZXRJc1JvbGxpbmcoZmFsc2UpKTtcbiAgIDg0MVx0XG4gICA4NDJcdCAgICAgIHRvYXN0KHtcbiAgIDg0M1x0ICAgICAgICB0aXRsZTogXCJFcnJvciByb2xsaW5nIGRpY2VcIixcbiAgIDg0NFx0ICAgICAgICBkZXNjcmlwdGlvbjogZXJyb3IubWVzc2FnZSB8fCBcIlRoZXJlIHdhcyBhIHByb2JsZW0gd2l0aCB0aGUgZ2FtZSBzZXJ2ZXJcIixcbiAgIDg0NVx0ICAgICAgICBzdGF0dXM6IFwiZXJyb3JcIixcbiAgIDg0Nlx0ICAgICAgICBkdXJhdGlvbjogMzAwMCxcbiAgIDg0N1x0ICAgICAgICBpc0Nsb3NhYmxlOiB0cnVlLFxuICAgODQ4XHQgICAgICB9KTtcbiAgIDg0OVx0ICAgIH1cbiAgIDg1MFx0ICB9O1xuICAgODUxXHRcbiAgIDg1Mlx0ICAvLyBIYW5kbGUgbG9jYWwgZGljZSByb2xsIHdoZW4gV2ViU29ja2V0IGlzIG5vdCBhdmFpbGFibGVcbiAgIDg1M1x0ICBjb25zdCBoYW5kbGVMb2NhbERpY2VSb2xsID0gKCkgPT4ge1xuICAgODU0XHQgICAgLy8gR2VuZXJhdGUgcmFuZG9tIGRpY2UgdmFsdWVzICgxLTYpXG4gICA4NTVcdCAgICBjb25zdCBkaWUxID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNikgKyAxO1xuICAgODU2XHQgICAgY29uc3QgZGllMiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDYpICsgMTtcbiAgIDg1N1x0ICAgIGNvbnN0IGRpY2VUb3RhbCA9IGRpZTEgKyBkaWUyO1xuICAgODU4XHQgICAgY29uc3QgaXNEb3VibGVzID0gZGllMSA9PT0gZGllMjtcbiAgIDg1OVx0XG4gICA4NjBcdCAgICAvLyBDYWxjdWxhdGUgbmV3IHBvc2l0aW9uXG4gICA4NjFcdCAgICBpZiAoY3VycmVudFBsYXllckRhdGEpIHtcbiAgIDg2Mlx0ICAgICAgLy8gR2V0IGN1cnJlbnQgcG9zaXRpb24gKGRlZmF1bHQgdG8gU1RBUlQvcG9zaXRpb24gMSBpZiB1bmRlZmluZWQpXG4gICA4NjNcdCAgICAgIGNvbnN0IGN1cnJlbnRQb3NpdGlvbiA9IGN1cnJlbnRQbGF5ZXJEYXRhLnBvc2l0aW9uIHx8IDE7XG4gICA4NjRcdFxuICAgODY1XHQgICAgICAvLyBVcGRhdGUgdGhlIGRpY2Ugcm9sbCBpbiBSZWR1eFxuICAgODY2XHQgICAgICBkaXNwYXRjaCh1cGRhdGVEaWNlUm9sbCh7XG4gICA4NjdcdCAgICAgICAgZGljZTogW2RpZTEsIGRpZTJdLFxuICAgODY4XHQgICAgICAgIGlzRG91YmxlcyxcbiAgIDg2OVx0ICAgICAgICBwbGF5ZXJJZDogY3VycmVudFBsYXllckRhdGEuaWRcbiAgIDg3MFx0ICAgICAgfSkpO1xuICAgODcxXHRcbiAgIDg3Mlx0ICAgICAgLy8gU2hvdyBub3RpZmljYXRpb24gZm9yIGRvdWJsZXNcbiAgIDg3M1x0ICAgICAgaWYgKGlzRG91Ymxlcykge1xuICAgODc0XHQgICAgICAgIGNvbnN0IGRvdWJsZXNDb3VudCA9IGNvbnNlY3V0aXZlRG91YmxlcyArIDE7XG4gICA4NzVcdCAgICAgICAgdG9hc3Qoe1xuICAgODc2XHQgICAgICAgICAgdGl0bGU6IFwiRE9VQkxFUyFcIixcbiAgIDg3N1x0ICAgICAgICAgIGRlc2NyaXB0aW9uOiBgWW91IHJvbGxlZCBkb3VibGVzICR7ZG91Ymxlc0NvdW50fSB0aW1lJHtkb3VibGVzQ291bnQgPiAxID8gJ3MnIDogJyd9IGluIGEgcm93ISAke2RvdWJsZXNDb3VudCA9PT0gMiA/ICdPbmUgbW9yZSBhbmQgeW91IGdvIHRvIGphaWwhJyA6ICcnfWAsXG4gICA4NzhcdCAgICAgICAgICBzdGF0dXM6IGRvdWJsZXNDb3VudCA8IDMgPyBcInN1Y2Nlc3NcIiA6IFwid2FybmluZ1wiLFxuICAgODc5XHQgICAgICAgICAgZHVyYXRpb246IDQwMDAsXG4gICA4ODBcdCAgICAgICAgICBpc0Nsb3NhYmxlOiB0cnVlLFxuICAgODgxXHQgICAgICAgICAgcG9zaXRpb246IFwidG9wXCJcbiAgIDg4Mlx0ICAgICAgICB9KTtcbiAgIDg4M1x0XG4gICA4ODRcdCAgICAgICAgLy8gQ2hlY2sgaWYgcGxheWVyIGdvZXMgdG8gamFpbCAoM3JkIGNvbnNlY3V0aXZlIGRvdWJsZXMpXG4gICA4ODVcdCAgICAgICAgaWYgKGRvdWJsZXNDb3VudCA+PSAzKSB7XG4gICA4ODZcdCAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgIDg4N1x0ICAgICAgICAgICAgYW5pbWF0ZVBsYXllck1vdmVtZW50KGN1cnJlbnRQbGF5ZXJEYXRhLmlkLCBjdXJyZW50UG9zaXRpb24sIDAsIDExKTtcbiAgIDg4OFx0ICAgICAgICAgICAgZGlzcGF0Y2goc2V0SXNSb2xsaW5nKGZhbHNlKSk7XG4gICA4ODlcdCAgICAgICAgICB9LCAxNTAwKTtcbiAgIDg5MFx0XG4gICA4OTFcdCAgICAgICAgICByZXR1cm47IC8vIFNraXAgbm9ybWFsIG1vdmVtZW50XG4gICA4OTJcdCAgICAgICAgfVxuICAgODkzXHQgICAgICB9XG4gICA4OTRcdFxuICAgODk1XHQgICAgICAvLyBJZiBwbGF5ZXIgaXMgaW4gamFpbCwgaGFuZGxlIGphaWwgbG9naWNcbiAgIDg5Nlx0ICAgICAgaWYgKGN1cnJlbnRQbGF5ZXJEYXRhLmluSmFpbCkge1xuICAgODk3XHQgICAgICAgIGlmIChpc0RvdWJsZXMpIHtcbiAgIDg5OFx0ICAgICAgICAgIC8vIFBsYXllciByb2xscyBkb3VibGVzLCBnZXRzIG91dCBvZiBqYWlsXG4gICA4OTlcdCAgICAgICAgICB0b2FzdCh7XG4gICA5MDBcdCAgICAgICAgICAgIHRpdGxlOiBcIllvdSdyZSBmcmVlIVwiLFxuVG90YWwgbGluZXMgaW4gZmlsZTogMTY2NFxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiYmRjOWNiMTUtOTA1NC00NDY4LTk5N2ItOGZhZjFlNzE5NjhlO3Rvb2x1X3ZydHhfMDFHZ3FiYVRSRmFEdnE4WHREdjloR0FzIjp7InJlcXVlc3RJZCI6ImJkYzljYjE1LTkwNTQtNDQ2OC05OTdiLThmYWYxZTcxOTY4ZSIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFHZ3FiYVRSRmFEdnE4WHREdjloR0FzIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBrZWtvcG9seS1mcm9udGVuZC9zcmMvc2VydmljZXMvc29ja2V0U2VydmljZS5qczpcbiAgICAgMVx0aW1wb3J0IHsgc3RvcmUgfSBmcm9tICcuLi9zdG9yZS9zdG9yZSc7XG4gICAgIDJcdGltcG9ydCB7XG4gICAgIDNcdCAgc2V0SG9zdCxcbiAgICAgNFx0ICBzZXRNYXhQbGF5ZXJzLFxuICAgICA1XHQgIHNldEdhbWVJbmZvLFxuICAgICA2XHQgIHNldEdhbWVTdGFydGVkLFxuICAgICA3XHQgIHNldEdhbWVQaGFzZSxcbiAgICAgOFx0ICBzeW5jR2FtZVN0YXR1cyxcbiAgICAgOVx0ICAvLyBBZGQgdGhlc2UgYWN0aW9ucyBmcm9tIHRoZSBtYWluIGdhbWVTbGljZVxuICAgIDEwXHQgIGFkZEdhbWVNZXNzYWdlLFxuICAgIDExXHQgIHNldFJvb21Db2RlLFxuICAgIDEyXHQgIHNldEN1cnJlbnRQbGF5ZXIsXG4gICAgMTNcdCAgc2V0SXNSb2xsaW5nLFxuICAgIDE0XHQgIHVwZGF0ZURpY2VSb2xsLFxuICAgIDE1XHQgIG1vdmVQbGF5ZXJcbiAgICAxNlx0fSBmcm9tICcuLi9zdG9yZS9nYW1lU2xpY2UnO1xuICAgIDE3XHRpbXBvcnQge1xuICAgIDE4XHQgIGFkZFBsYXllcixcbiAgICAxOVx0ICB1cGRhdGVQbGF5ZXIsXG4gICAgMjBcdCAgdXBkYXRlUGxheWVyUG9zaXRpb24sXG4gICAgMjFcdCAgdXBkYXRlUGxheWVyQmFsYW5jZSxcbiAgICAyMlx0ICBhZGRQbGF5ZXJDYXJkLFxuICAgIDIzXHQgIHJlbW92ZVBsYXllckNhcmQsXG4gICAgMjRcdCAgYWRkUGxheWVyUHJvcGVydHksXG4gICAgMjVcdCAgcmVtb3ZlUGxheWVyUHJvcGVydHksXG4gICAgMjZcdCAgcmVtb3ZlUGxheWVyLFxuICAgIDI3XHQgIHNldFBsYXllclJlYWR5XG4gICAgMjhcdH0gZnJvbSAnLi4vc3RvcmUvcGxheWVyU2xpY2UnO1xuICAgIDI5XHRpbXBvcnQge1xuICAgIDMwXHQgIHNldFNlbGVjdGVkUHJvcGVydHksXG4gICAgMzFcdCAgdXBkYXRlUHJvcGVydHlEZXRhaWxzLFxuICAgIDMyXHR9IGZyb20gJy4uL3N0b3JlL3Byb3BlcnR5U2xpY2UnO1xuICAgIDMzXHRpbXBvcnQge1xuICAgIDM0XHQgIHNldEN1cnJlbnRDYXJkLFxuICAgIDM1XHQgIHNodWZmbGVDYXJkcyxcbiAgICAzNlx0fSBmcm9tICcuLi9zdG9yZS9jYXJkU2xpY2UnO1xuICAgIDM3XHRcbiAgICAzOFx0Ly8gV2UnbGwgdXNlIGlubGluZSBXZWJTb2NrZXQgVVJMIGNvbnN0cnVjdGlvbiBpbnN0ZWFkIG9mIGEgY29uc3RhbnRcbiAgICAzOVx0Ly8gdG8gYXZvaWQgcHJvY2Vzcy5lbnYgaXNzdWVzXG4gICAgNDBcdFxuICAgIDQxXHRjbGFzcyBTb2NrZXRTZXJ2aWNlIHtcbiAgICA0Mlx0ICBzb2NrZXQgPSBudWxsO1xuICAgIDQzXHQgIGxvYmJ5U29ja2V0ID0gbnVsbDtcbiAgICA0NFx0ICBnYW1lSWQgPSBudWxsO1xuICAgIDQ1XHQgIHBsYXllcklkID0gbnVsbDtcbiAgICA0Nlx0ICBzZXNzaW9uSWQgPSBudWxsO1xuICAgIDQ3XHQgIHJlY29ubmVjdEF0dGVtcHRzID0gMDtcbiAgICA0OFx0ICBtYXhSZWNvbm5lY3RBdHRlbXB0cyA9IDU7XG4gICAgNDlcdCAgcmVjb25uZWN0SW50ZXJ2YWwgPSAxMDAwO1xuICAgIDUwXHQgIHJlY29ubmVjdFRpbWVyID0gbnVsbDtcblRvdGFsIGxpbmVzIGluIGZpbGU6IDI2ODJcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjFjNzVjODI2LTAwMTItNDAyMi1hZGIzLTVhOWVmM2Y4NTlmMDt0b29sdV92cnR4XzAxRkFSamE1TnRCNDNWaEFCOWlHZUs4OCI6eyJyZXF1ZXN0SWQiOiIxYzc1YzgyNi0wMDEyLTQwMjItYWRiMy01YTllZjNmODU5ZjAiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxRkFSamE1TnRCNDNWaEFCOWlHZUs4OCIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24ga2Vrb3BvbHktZnJvbnRlbmQvc3JjL3NlcnZpY2VzL3NvY2tldFNlcnZpY2UuanM6XG4gIDEwMDBcdFxuICAxMDAxXHQgIC8vIEhlbHBlciBtZXRob2QgdG8gZGV0ZXJtaW5lIGlmIHdlIG5lZWQgdG8gcmVxdWVzdCBhZGRpdGlvbmFsIGRhdGFcbiAgMTAwMlx0ICBzaG91bGRSZXF1ZXN0QWRkaXRpb25hbERhdGEgPSAoZ2FtZVN0YXRlKSA9PiB7XG4gIDEwMDNcdCAgICAvLyBDaGVjayBmb3IgbWlzc2luZyBjcml0aWNhbCBkYXRhXG4gIDEwMDRcdCAgICBjb25zdCBtaXNzaW5nUGxheWVycyA9ICFnYW1lU3RhdGUucGxheWVycyB8fCBnYW1lU3RhdGUucGxheWVycy5sZW5ndGggPT09IDA7XG4gIDEwMDVcdCAgICBjb25zdCBtaXNzaW5nQm9hcmRTdGF0ZSA9ICFnYW1lU3RhdGUuYm9hcmRTdGF0ZTtcbiAgMTAwNlx0ICAgIGNvbnN0IG1pc3NpbmdHYW1lSW5mbyA9ICFnYW1lU3RhdGUuZ2FtZUluZm87XG4gIDEwMDdcdFxuICAxMDA4XHQgICAgLy8gQ2hlY2sgaWYgd2UncmUgaW4gYW4gYWN0aXZlIGdhbWUgYnV0IG1pc3NpbmcgZGF0YVxuICAxMDA5XHQgICAgY29uc3QgaXNBY3RpdmVHYW1lID0gZ2FtZVN0YXRlLnN0YXR1cyA9PT0gJ0FDVElWRScgfHxcbiAgMTAxMFx0ICAgICAgICAgICAgICAgICAgICAgICAgKGdhbWVTdGF0ZS5nYW1lSW5mbyAmJiBnYW1lU3RhdGUuZ2FtZUluZm8uc3RhdHVzID09PSAnQUNUSVZFJyk7XG4gIDEwMTFcdFxuICAxMDEyXHQgICAgaWYgKGlzQWN0aXZlR2FtZSAmJiAobWlzc2luZ1BsYXllcnMgfHwgbWlzc2luZ0JvYXJkU3RhdGUpKSB7XG4gIDEwMTNcdCAgICAgIGNvbnNvbGUubG9nKCdbSEFORExFX0dBTUVfU1RBVEVdIEFjdGl2ZSBnYW1lIG1pc3NpbmcgY3JpdGljYWwgZGF0YSwgd2lsbCByZXF1ZXN0IGFkZGl0aW9uYWwgZGF0YScpO1xuICAxMDE0XHQgICAgICByZXR1cm4gdHJ1ZTtcbiAgMTAxNVx0ICAgIH1cbiAgMTAxNlx0XG4gIDEwMTdcdCAgICAvLyBDaGVjayBpZiB3ZSdyZSBtaXNzaW5nIGhvc3QgaW5mb3JtYXRpb25cbiAgMTAxOFx0ICAgIGNvbnN0IG1pc3NpbmdIb3N0SWQgPSAhZ2FtZVN0YXRlLmdhbWVJbmZvIHx8ICFnYW1lU3RhdGUuZ2FtZUluZm8uaG9zdElkO1xuICAxMDE5XHQgICAgaWYgKG1pc3NpbmdIb3N0SWQpIHtcbiAgMTAyMFx0ICAgICAgY29uc29sZS5sb2coJ1tIQU5ETEVfR0FNRV9TVEFURV0gTWlzc2luZyBob3N0IGluZm9ybWF0aW9uLCB3aWxsIHJlcXVlc3QgYWRkaXRpb25hbCBkYXRhJyk7XG4gIDEwMjFcdCAgICAgIHJldHVybiB0cnVlO1xuICAxMDIyXHQgICAgfVxuICAxMDIzXHRcbiAgMTAyNFx0ICAgIHJldHVybiBmYWxzZTtcbiAgMTAyNVx0ICB9O1xuICAxMDI2XHRcbiAgMTAyN1x0ICAvLyBSZXF1ZXN0IGFkZGl0aW9uYWwgZ2FtZSBkYXRhIHdoZW4gbmVlZGVkXG4gIDEwMjhcdCAgcmVxdWVzdEFkZGl0aW9uYWxHYW1lRGF0YSA9ICgpID0+IHtcbiAgMTAyOVx0ICAgIGNvbnNvbGUubG9nKCdbSEFORExFX0dBTUVfU1RBVEVdIFJlcXVlc3RpbmcgYWRkaXRpb25hbCBnYW1lIGRhdGEnKTtcbiAgMTAzMFx0XG4gIDEwMzFcdCAgICAvLyBPbmx5IHJlcXVlc3QgaWYgc29ja2V0IGlzIG9wZW5cbiAgMTAzMlx0ICAgIGlmICh0aGlzLnNvY2tldCAmJiB0aGlzLnNvY2tldC5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuT1BFTikge1xuICAxMDMzXHQgICAgICAvLyBSZXF1ZXN0IGZ1bGwgZ2FtZSBzdGF0ZVxuICAxMDM0XHQgICAgICB0aGlzLnNlbmRNZXNzYWdlKCdnZXRfZ2FtZV9zdGF0ZScsIHsgZnVsbDogdHJ1ZSB9KTtcbiAgMTAzNVx0XG4gIDEwMzZcdCAgICAgIC8vIEFsc28gcmVxdWVzdCBhY3RpdmUgcGxheWVycyBsaXN0XG4gIDEwMzdcdCAgICAgIHRoaXMuc2VuZE1lc3NhZ2UoJ2dldF9hY3RpdmVfcGxheWVycycsIHt9KTtcbiAgMTAzOFx0XG4gIDEwMzlcdCAgICAgIGNvbnNvbGUubG9nKCdbSEFORExFX0dBTUVfU1RBVEVdIEFkZGl0aW9uYWwgZGF0YSByZXF1ZXN0cyBzZW50Jyk7XG4gIDEwNDBcdCAgICB9IGVsc2Uge1xuICAxMDQxXHQgICAgICBjb25zb2xlLndhcm4oJ1tIQU5ETEVfR0FNRV9TVEFURV0gQ2Fubm90IHJlcXVlc3QgYWRkaXRpb25hbCBkYXRhOiBzb2NrZXQgbm90IG9wZW4nKTtcbiAgMTA0Mlx0ICAgIH1cbiAgMTA0M1x0ICB9O1xuICAxMDQ0XHRcbiAgMTA0NVx0ICAvLyBVcGRhdGUgYWxsIHBsYXllcnMnIGhvc3Qgc3RhdHVzIGJhc2VkIG9uIGhvc3RJZFxuICAxMDQ2XHQgIHVwZGF0ZVBsYXllcnNIb3N0U3RhdHVzID0gKGhvc3RJZCwgc2tpcEJyb2FkY2FzdCA9IGZhbHNlKSA9PiB7XG4gIDEwNDdcdCAgICBpZiAoIWhvc3RJZCkge1xuICAxMDQ4XHQgICAgICBjb25zb2xlLndhcm4oJ1tVUERBVEVfSE9TVF9TVEFUVVNdIE5vIGhvc3RJZCBwcm92aWRlZCcpO1xuICAxMDQ5XHQgICAgICByZXR1cm47XG4gIDEwNTBcdCAgICB9XG4gIDEwNTFcdFxuICAxMDUyXHQgICAgY29uc29sZS5sb2coJ1tVUERBVEVfSE9TVF9TVEFUVVNdIFVwZGF0aW5nIGFsbCBwbGF5ZXJzIGhvc3Qgc3RhdHVzIGJhc2VkIG9uIGhvc3RJZDonLCBob3N0SWQpO1xuICAxMDUzXHRcbiAgMTA1NFx0ICAgIC8vIEdldCBjdXJyZW50IHBsYXllciBsaXN0IGZyb20gdGhlIHN0b3JlXG4gIDEwNTVcdCAgICBjb25zdCBjdXJyZW50U3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAxMDU2XHQgICAgY29uc3QgZXhpc3RpbmdQbGF5ZXJzID0gY3VycmVudFN0YXRlLnBsYXllcnMucGxheWVycyB8fCB7fTtcbiAgMTA1N1x0ICAgIGNvbnN0IHsgZGlzcGF0Y2ggfSA9IHN0b3JlO1xuICAxMDU4XHRcbiAgMTA1OVx0ICAgIC8vIEZpcnN0LCBlbnN1cmUgdGhlIGhvc3RJZCBpcyBzZXQgaW4gdGhlIGdhbWUgc3RhdGVcbiAgMTA2MFx0ICAgIGlmIChjdXJyZW50U3RhdGUuZ2FtZS5ob3N0SWQgIT09IGhvc3RJZCkge1xuICAxMDYxXHQgICAgICBjb25zb2xlLmxvZyhgW1VQREFURV9IT1NUX1NUQVRVU10gVXBkYXRpbmcgZ2FtZSBzdGF0ZSBob3N0SWQ6ICR7Y3VycmVudFN0YXRlLmdhbWUuaG9zdElkfSDihpIgJHtob3N0SWR9YCk7XG4gIDEwNjJcdCAgICAgIGRpc3BhdGNoKHNldEhvc3QoaG9zdElkKSk7XG4gIDEwNjNcdCAgICB9XG4gIDEwNjRcdFxuICAxMDY1XHQgICAgLy8gVHJhY2sgaWYgYW55IHBsYXllcidzIGhvc3Qgc3RhdHVzIHdhcyBhY3R1YWxseSBjaGFuZ2VkXG4gIDEwNjZcdCAgICBsZXQgaG9zdFN0YXR1c0NoYW5nZWQgPSBmYWxzZTtcbiAgMTA2N1x0XG4gIDEwNjhcdCAgICAvLyBVcGRhdGUgaXNIb3N0IGZsYWcgZm9yIGFsbCBwbGF5ZXJzXG4gIDEwNjlcdCAgICBPYmplY3Qua2V5cyhleGlzdGluZ1BsYXllcnMpLmZvckVhY2gocGxheWVySWQgPT4ge1xuICAxMDcwXHQgICAgICBjb25zdCBpc1BsYXllckhvc3QgPSBwbGF5ZXJJZCA9PT0gaG9zdElkO1xuICAxMDcxXHQgICAgICBjb25zdCBwbGF5ZXIgPSBleGlzdGluZ1BsYXllcnNbcGxheWVySWRdO1xuICAxMDcyXHRcbiAgMTA3M1x0ICAgICAgLy8gT25seSB1cGRhdGUgaWYgdGhlIGhvc3Qgc3RhdHVzIGlzIGRpZmZlcmVudFxuICAxMDc0XHQgICAgICBpZiAocGxheWVyLmlzSG9zdCAhPT0gaXNQbGF5ZXJIb3N0KSB7XG4gIDEwNzVcdCAgICAgICAgY29uc29sZS5sb2coYFtVUERBVEVfSE9TVF9TVEFUVVNdIFVwZGF0aW5nIHBsYXllciAke3BsYXllcklkfSBob3N0IHN0YXR1czogJHtwbGF5ZXIuaXNIb3N0fSDihpIgJHtpc1BsYXllckhvc3R9YCk7XG4gIDEwNzZcdCAgICAgICAgaG9zdFN0YXR1c0NoYW5nZWQgPSB0cnVlO1xuICAxMDc3XHRcbiAgMTA3OFx0ICAgICAgICAvLyBQcmVzZXJ2ZSBvdGhlciBpbXBvcnRhbnQgcGxheWVyIHByb3BlcnRpZXMgd2hlbiB1cGRhdGluZyBob3N0IHN0YXR1c1xuICAxMDc5XHQgICAgICAgIGRpc3BhdGNoKHVwZGF0ZVBsYXllcih7XG4gIDEwODBcdCAgICAgICAgICBwbGF5ZXJJZCxcbiAgMTA4MVx0ICAgICAgICAgIHVwZGF0ZXM6IHtcbiAgMTA4Mlx0ICAgICAgICAgICAgaXNIb3N0OiBpc1BsYXllckhvc3QsXG4gIDEwODNcdCAgICAgICAgICAgIC8vIEV4cGxpY2l0bHkgcHJlc2VydmUgdGhlc2UgcHJvcGVydGllcyB0byBwcmV2ZW50IHRoZW0gZnJvbSBiZWluZyByZXNldFxuICAxMDg0XHQgICAgICAgICAgICBpc1JlYWR5OiBwbGF5ZXIuaXNSZWFkeSxcbiAgMTA4NVx0ICAgICAgICAgICAgbmFtZTogcGxheWVyLm5hbWUsXG4gIDEwODZcdCAgICAgICAgICAgIHRva2VuOiBwbGF5ZXIudG9rZW4sXG4gIDEwODdcdCAgICAgICAgICAgIGVtb2ppOiBwbGF5ZXIuZW1vamksXG4gIDEwODhcdCAgICAgICAgICAgIGNvbG9yOiBwbGF5ZXIuY29sb3JcbiAgMTA4OVx0ICAgICAgICAgIH1cbiAgMTA5MFx0ICAgICAgICB9KSk7XG4gIDEwOTFcdCAgICAgIH1cbiAgMTA5Mlx0ICAgIH0pO1xuICAxMDkzXHRcbiAgMTA5NFx0ICAgIC8vIE9ubHkgcmVxdWVzdCBhY3RpdmUgcGxheWVycyBsaXN0IGlmIGhvc3Qgc3RhdHVzIGFjdHVhbGx5IGNoYW5nZWQgYW5kIHdlJ3JlIG5vdCBza2lwcGluZyBicm9hZGNhc3RcbiAgMTA5NVx0ICAgIGlmIChob3N0U3RhdHVzQ2hhbmdlZCAmJiAhc2tpcEJyb2FkY2FzdCkge1xuICAxMDk2XHQgICAgICAvLyBSZXF1ZXN0IGFjdGl2ZSBwbGF5ZXJzIGxpc3QgZnJvbSBzZXJ2ZXIgdG8gZW5zdXJlIGFsbCBjbGllbnRzIGFyZSBpbiBzeW5jXG4gIDEwOTdcdCAgICAgIC8vIEJ1dCBhZGQgYSBzbWFsbCBkZWxheSB0byBwcmV2ZW50IG1lc3NhZ2UgZmxvb2RcbiAgMTA5OFx0ICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gIDEwOTlcdCAgICAgICAgaWYgKHRoaXMuc29ja2V0ICYmIHRoaXMuc29ja2V0LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOKSB7XG4gIDExMDBcdCAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlKCdnZXRfYWN0aXZlX3BsYXllcnMnLCB7fSk7XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAyNjgyXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCIyNTIxOWM3ZS0wNDg2LTQ3MzQtYjZiOC03MjEzNzRmM2NhY2U7dG9vbHVfdnJ0eF8wMVFramZVTEZHdzJtaWYxNkg0V0xhUUEiOnsicmVxdWVzdElkIjoiMjUyMTljN2UtMDQ4Ni00NzM0LWI2YjgtNzIxMzc0ZjNjYWNlIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMVFramZVTEZHdzJtaWYxNkg0V0xhUUEiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIGtla29wb2x5LWZyb250ZW5kL3NyYy9zZXJ2aWNlcy9zb2NrZXRTZXJ2aWNlLmpzOlxuICAxNTAwXHQgICAgY29uc3QgaG9zdElkID0gY3VycmVudFN0YXRlLmdhbWUuaG9zdElkO1xuICAxNTAxXHRcbiAgMTUwMlx0ICAgIC8vIEFkZCBhIGdhbWUgbWVzc2FnZSB0byBpbmRpY2F0ZSB0aGUgZ2FtZSBoYXMgc3RhcnRlZFxuICAxNTAzXHQgICAgZGlzcGF0Y2goYWRkR2FtZU1lc3NhZ2Uoe1xuICAxNTA0XHQgICAgICB0eXBlOiAnU1lTVEVNJyxcbiAgMTUwNVx0ICAgICAgY29udGVudDogJ0dhbWUgaGFzIHN0YXJ0ZWQhIE5hdmlnYXRpbmcgdG8gZ2FtZSBib2FyZC4uLicsXG4gIDE1MDZcdCAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKVxuICAxNTA3XHQgICAgfSkpO1xuICAxNTA4XHRcbiAgMTUwOVx0ICAgIGNvbnNvbGUubG9nKCdbR0FNRV9TVEFSVEVEXSBVcGRhdGVkIGdhbWVTbGljZSBzdGF0ZSB0byBwbGF5aW5nIHBoYXNlJyk7XG4gIDE1MTBcdFxuICAxNTExXHQgICAgLy8gU2V0IHVwIHJldHJ5IG1lY2hhbmlzbSB0byBlbnN1cmUgZ2FtZSBib2FyZCBhcHBlYXJzXG4gIDE1MTJcdCAgICB0aGlzLnNldHVwR2FtZVN0YXJ0UmV0cnlDaGVjaygpO1xuICAxNTEzXHRcbiAgMTUxNFx0ICAgIC8vIEVuc3VyZSB0aGUgaG9zdCBnZXRzIHRoZSBmaXJzdCB0dXJuXG4gIDE1MTVcdCAgICBpZiAoaG9zdElkKSB7XG4gIDE1MTZcdCAgICAgIGNvbnNvbGUubG9nKGBbVFVSTl9NQU5BR0VNRU5UXSBTZXR0aW5nIGluaXRpYWwgdHVybiB0byBob3N0IHBsYXllcjogJHtob3N0SWR9YCk7XG4gIDE1MTdcdCAgICAgIGRpc3BhdGNoKHNldEN1cnJlbnRQbGF5ZXIoaG9zdElkKSk7XG4gIDE1MThcdFxuICAxNTE5XHQgICAgICAvLyBTZW5kIGEgbWVzc2FnZSB0byB0aGUgc2VydmVyIHRvIHNldCB0aGUgaW5pdGlhbCB0dXJuXG4gIDE1MjBcdCAgICAgIGlmICh0aGlzLnNvY2tldCAmJiB0aGlzLnNvY2tldC5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuT1BFTikge1xuICAxNTIxXHQgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2UoJ3NldF9jdXJyZW50X3R1cm4nLCB7XG4gIDE1MjJcdCAgICAgICAgICBwbGF5ZXJJZDogaG9zdElkLFxuICAxNTIzXHQgICAgICAgICAgZ2FtZUlkOiB0aGlzLmdhbWVJZFxuICAxNTI0XHQgICAgICAgIH0pO1xuICAxNTI1XHQgICAgICB9XG4gIDE1MjZcdCAgICB9IGVsc2Uge1xuICAxNTI3XHQgICAgICBjb25zb2xlLndhcm4oJ1tUVVJOX01BTkFHRU1FTlRdIE5vIGhvc3QgSUQgZm91bmQgd2hlbiBzdGFydGluZyBnYW1lLCBjYW5ub3Qgc2V0IGluaXRpYWwgdHVybicpO1xuICAxNTI4XHQgICAgfVxuICAxNTI5XHRcbiAgMTUzMFx0ICAgIC8vIExvZyB0aGUgY3VycmVudCBnYW1lIHN0YXRlIGFmdGVyIHVwZGF0ZVxuICAxNTMxXHQgICAgY29uc29sZS5sb2coJ1tHQU1FX1NUQVJURURdIEdhbWUgc3RhdGUgYWZ0ZXIgdXBkYXRlOicsIHtcbiAgMTUzMlx0ICAgICAgZ2FtZVN0YXJ0ZWQ6IGN1cnJlbnRTdGF0ZS5nYW1lLmdhbWVTdGFydGVkLFxuICAxNTMzXHQgICAgICBnYW1lUGhhc2U6IGN1cnJlbnRTdGF0ZS5nYW1lLmdhbWVQaGFzZSxcbiAgMTUzNFx0ICAgICAgaG9zdElkOiBob3N0SWQsXG4gIDE1MzVcdCAgICAgIGN1cnJlbnRQbGF5ZXI6IGN1cnJlbnRTdGF0ZS5nYW1lLmN1cnJlbnRQbGF5ZXIsXG4gIDE1MzZcdCAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gIDE1MzdcdCAgICB9KTtcbiAgMTUzOFx0XG4gIDE1MzlcdCAgICAvLyBTdG9yZSBpbiBsb2NhbFN0b3JhZ2UgYXMgYSBiYWNrdXAgbWVjaGFuaXNtXG4gIDE1NDBcdCAgICB0cnkge1xuICAxNTQxXHQgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgna2Vrb3BvbHlfZ2FtZV9zdGFydGVkJywgJ3RydWUnKTtcbiAgMTU0Mlx0ICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2tla29wb2x5X2dhbWVfaWQnLCB0aGlzLmdhbWVJZCk7XG4gIDE1NDNcdCAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdrZWtvcG9seV9uYXZpZ2F0aW9uX3RpbWVzdGFtcCcsIERhdGUubm93KCkudG9TdHJpbmcoKSk7XG4gIDE1NDRcdCAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdrZWtvcG9seV9nYW1lX3BoYXNlJywgJ3BsYXlpbmcnKTtcbiAgMTU0NVx0ICAgIH0gY2F0Y2ggKGUpIHtcbiAgMTU0Nlx0ICAgICAgY29uc29sZS53YXJuKCdbR0FNRV9TVEFSVEVEXSBDb3VsZCBub3QgdXNlIGxvY2FsU3RvcmFnZTonLCBlKTtcbiAgMTU0N1x0ICAgIH1cbiAgMTU0OFx0XG4gIDE1NDlcdCAgICAvLyBCcm9hZGNhc3QgdG8gYWxsIGNsaWVudHMgdGhhdCB0aGUgZ2FtZSBoYXMgc3RhcnRlZFxuICAxNTUwXHQgICAgaWYgKHRoaXMuc29ja2V0ICYmIHRoaXMuc29ja2V0LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOKSB7XG4gIDE1NTFcdCAgICAgIGNvbnNvbGUubG9nKCdbR0FNRV9TVEFSVEVEXSBCcm9hZGNhc3RpbmcgZ2FtZSBzdGFydGVkIHRvIGFsbCBjbGllbnRzJyk7XG4gIDE1NTJcdCAgICAgIHRoaXMuc2VuZE1lc3NhZ2UoJ2Jyb2FkY2FzdF9nYW1lX3N0YXJ0ZWQnLCB7XG4gIDE1NTNcdCAgICAgICAgZ2FtZUlkOiB0aGlzLmdhbWVJZCxcbiAgMTU1NFx0ICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcbiAgMTU1NVx0ICAgICAgfSk7XG4gIDE1NTZcdCAgICB9XG4gIDE1NTdcdFxuICAxNTU4XHQgICAgLy8gUmVxdWVzdCB1cGRhdGVkIGdhbWUgc3RhdGUgYW5kIHBsYXllciBsaXN0XG4gIDE1NTlcdCAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgMTU2MFx0ICAgICAgaWYgKHRoaXMuc29ja2V0ICYmIHRoaXMuc29ja2V0LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOKSB7XG4gIDE1NjFcdCAgICAgICAgY29uc29sZS5sb2coJ1tHQU1FX1NUQVJURURdIFJlcXVlc3RpbmcgdXBkYXRlZCBnYW1lIHN0YXRlIGFuZCBwbGF5ZXIgbGlzdCcpO1xuICAxNTYyXHQgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2UoJ2dldF9nYW1lX3N0YXRlJywge30pO1xuICAxNTYzXHQgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2UoJ2dldF9hY3RpdmVfcGxheWVycycsIHt9KTtcbiAgMTU2NFx0ICAgICAgfVxuICAxNTY1XHQgICAgfSwgNTAwKTtcbiAgMTU2Nlx0XG4gIDE1NjdcdCAgICAvLyBGb3JjZSBuYXZpZ2F0aW9uIHRvIGdhbWUgYm9hcmQgYWZ0ZXIgYSBzaG9ydCBkZWxheVxuICAxNTY4XHQgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gIDE1NjlcdCAgICAgIGNvbnN0IGN1cnJlbnRMb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcbiAgMTU3MFx0ICAgICAgaWYgKCFjdXJyZW50TG9jYXRpb24uaW5jbHVkZXMoJy9nYW1lLycpKSB7XG4gIDE1NzFcdCAgICAgICAgY29uc29sZS5sb2coJ1tHQU1FX1NUQVJURURdIEZvcmNpbmcgbmF2aWdhdGlvbiB0byBnYW1lIGJvYXJkJyk7XG4gIDE1NzJcdFxuICAxNTczXHQgICAgICAgIC8vIFRyeSB0byB1c2UgdGhlIG5hdmlnYXRlVG9HYW1lIGZ1bmN0aW9uIGlmIGF2YWlsYWJsZVxuICAxNTc0XHQgICAgICAgIGlmICh3aW5kb3cubmF2aWdhdGVUb0dhbWUgJiYgdHlwZW9mIHdpbmRvdy5uYXZpZ2F0ZVRvR2FtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAxNTc1XHQgICAgICAgICAgY29uc29sZS5sb2coJ1tHQU1FX1NUQVJURURdIFVzaW5nIG5hdmlnYXRlVG9HYW1lIGZ1bmN0aW9uJyk7XG4gIDE1NzZcdCAgICAgICAgICB3aW5kb3cubmF2aWdhdGVUb0dhbWUodGhpcy5nYW1lSWQpO1xuICAxNTc3XHQgICAgICAgIH0gZWxzZSB7XG4gIDE1NzhcdCAgICAgICAgICAvLyBGYWxsYmFjayB0byBkaXJlY3QgbG9jYXRpb24gY2hhbmdlXG4gIDE1NzlcdCAgICAgICAgICB0cnkge1xuICAxNTgwXHQgICAgICAgICAgICBjb25zb2xlLmxvZygnW0dBTUVfU1RBUlRFRF0gVXNpbmcgZGlyZWN0IGxvY2F0aW9uIGNoYW5nZScpO1xuICAxNTgxXHQgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGAvZ2FtZS8ke3RoaXMuZ2FtZUlkfWA7XG4gIDE1ODJcdCAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gIDE1ODNcdCAgICAgICAgICAgIGNvbnNvbGUud2FybignW0dBTUVfU1RBUlRFRF0gTmF2aWdhdGlvbiBmYWlsZWQ6JywgZSk7XG4gIDE1ODRcdCAgICAgICAgICB9XG4gIDE1ODVcdCAgICAgICAgfVxuICAxNTg2XHQgICAgICB9IGVsc2Uge1xuICAxNTg3XHQgICAgICAgIGNvbnNvbGUubG9nKCdbR0FNRV9TVEFSVEVEXSBBbHJlYWR5IG9uIGdhbWUgYm9hcmQsIG5vIG5hdmlnYXRpb24gbmVlZGVkJyk7XG4gIDE1ODhcdCAgICAgIH1cbiAgMTU4OVx0ICAgIH0sIDUwMCk7XG4gIDE1OTBcdFxuICAxNTkxXHQgICAgLy8gU2V0IHVwIGEgc2Vjb25kIG5hdmlnYXRpb24gYXR0ZW1wdCBhcyBhIGJhY2t1cFxuICAxNTkyXHQgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gIDE1OTNcdCAgICAgIGNvbnN0IGN1cnJlbnRMb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcbiAgMTU5NFx0ICAgICAgaWYgKCFjdXJyZW50TG9jYXRpb24uaW5jbHVkZXMoJy9nYW1lLycpKSB7XG4gIDE1OTVcdCAgICAgICAgY29uc29sZS5sb2coJ1tHQU1FX1NUQVJURURdIFNlY29uZCBhdHRlbXB0IGF0IGZvcmNpbmcgbmF2aWdhdGlvbiB0byBnYW1lIGJvYXJkJyk7XG4gIDE1OTZcdCAgICAgICAgdHJ5IHtcbiAgMTU5N1x0ICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYC9nYW1lLyR7dGhpcy5nYW1lSWR9YDtcbiAgMTU5OFx0ICAgICAgICB9IGNhdGNoIChlKSB7XG4gIDE1OTlcdCAgICAgICAgICBjb25zb2xlLndhcm4oJ1tHQU1FX1NUQVJURURdIFNlY29uZCBuYXZpZ2F0aW9uIGF0dGVtcHQgZmFpbGVkOicsIGUpO1xuICAxNjAwXHQgICAgICAgIH1cblRvdGFsIGxpbmVzIGluIGZpbGU6IDI2ODJcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjU3MDdjYWU0LTk0NzEtNDE0Ny04MTcwLWI0NjVmZGQ5ZWRjYTt0b29sdV92cnR4XzAxNGlhWkZrZ1JTeHpCMlJMOGY1S2hKWCI6eyJyZXF1ZXN0SWQiOiI1NzA3Y2FlNC05NDcxLTQxNDctODE3MC1iNDY1ZmRkOWVkY2EiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxNGlhWkZrZ1JTeHpCMlJMOGY1S2hKWCIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24ga2Vrb3BvbHktZnJvbnRlbmQvc3JjL3NlcnZpY2VzL3NvY2tldFNlcnZpY2UuanM6XG4gIDIwMDBcdCAgICBjb25zb2xlLmxvZyhgW0dBTUVfU1RBUlRfUkVUUlldIENoZWNrICMke3RoaXMuZ2FtZVN0YXJ0UmV0cnlDb3VudCArIDF9OiBDdXJyZW50IGxvY2F0aW9uOiAke2N1cnJlbnRMb2NhdGlvbn0sIEdhbWUgc3RhdGU6YCwge1xuICAyMDAxXHQgICAgICBnYW1lU3RhcnRlZDogZ2FtZVN0YXRlLmdhbWVTdGFydGVkLFxuICAyMDAyXHQgICAgICBnYW1lUGhhc2U6IGdhbWVTdGF0ZS5nYW1lUGhhc2UsXG4gIDIwMDNcdCAgICAgIHBsYXllcklkOiB0aGlzLnBsYXllcklkLFxuICAyMDA0XHQgICAgICBpc0hvc3Q6IHRoaXMucGxheWVySWQgPT09IGdhbWVTdGF0ZS5ob3N0SWQsXG4gIDIwMDVcdCAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gIDIwMDZcdCAgICB9KTtcbiAgMjAwN1x0XG4gIDIwMDhcdCAgICAvLyBDaGVjayBpZiB3ZSdyZSBhbHJlYWR5IG9uIHRoZSBnYW1lIGJvYXJkIHBhZ2VcbiAgMjAwOVx0ICAgIGNvbnN0IGlzT25HYW1lQm9hcmQgPSBjdXJyZW50TG9jYXRpb24uaW5jbHVkZXMoJy9nYW1lLycpO1xuICAyMDEwXHRcbiAgMjAxMVx0ICAgIC8vIEVYVFJFTUVMWSBhZ2dyZXNzaXZlIHRyYW5zaXRpb24gbG9naWMgLSB0cmFuc2l0aW9uIGlmIEFOWSBvZiB0aGVzZSBjb25kaXRpb25zIGFyZSBtZXQ6XG4gIDIwMTJcdCAgICAvLyAxLiBnYW1lU3RhcnRlZCBpcyB0cnVlIChyZWdhcmRsZXNzIG9mIHBoYXNlKVxuICAyMDEzXHQgICAgLy8gMi4gZ2FtZVBoYXNlIGlzICdwbGF5aW5nJyAocmVnYXJkbGVzcyBvZiBnYW1lU3RhcnRlZClcbiAgMjAxNFx0ICAgIC8vIDMuIFdlIGhhdmUgbG9jYWxTdG9yYWdlIGZsYWcgKHJlZ2FyZGxlc3Mgb2YgdGltZXN0YW1wKVxuICAyMDE1XHQgICAgLy8gNC4gQW55IG90aGVyIHBsYXllciBoYXMgc3RhcnRlZCB0aGUgZ2FtZSAoY2hlY2sgdmlhIGxvY2FsU3RvcmFnZSlcbiAgMjAxNlx0ICAgIGNvbnN0IHNob3VsZFRyYW5zaXRpb25Ub0dhbWUgPVxuICAyMDE3XHQgICAgICBnYW1lU3RhdGUuZ2FtZVN0YXJ0ZWQgfHxcbiAgMjAxOFx0ICAgICAgZ2FtZVN0YXRlLmdhbWVQaGFzZSA9PT0gJ3BsYXlpbmcnIHx8XG4gIDIwMTlcdCAgICAgIGhhc1N0b3JhZ2VGbGFnIHx8XG4gIDIwMjBcdCAgICAgIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdrZWtvcG9seV9nYW1lX3N0YXJ0ZWQnKSA9PT0gJ3RydWUnO1xuICAyMDIxXHRcbiAgMjAyMlx0ICAgIC8vIExvZyB0aGUgcm91dGluZyBjb25kaXRpb25zXG4gIDIwMjNcdCAgICBjb25zb2xlLmxvZyhgW0dBTUVfU1RBUlRfUkVUUlldIFJvdXRpbmcgY29uZGl0aW9uczogaXNPbkdhbWVCb2FyZD0ke2lzT25HYW1lQm9hcmR9LCBnYW1lU3RhcnRlZD0ke2dhbWVTdGF0ZS5nYW1lU3RhcnRlZH0sIGdhbWVQaGFzZT0ke2dhbWVTdGF0ZS5nYW1lUGhhc2V9LCBoYXNTdG9yYWdlRmxhZz0ke2hhc1N0b3JhZ2VGbGFnfSwgc2hvdWxkVHJhbnNpdGlvblRvR2FtZT0ke3Nob3VsZFRyYW5zaXRpb25Ub0dhbWV9YCk7XG4gIDIwMjRcdFxuICAyMDI1XHQgICAgLy8gSWYgd2UncmUgbm90IG9uIHRoZSBnYW1lIGJvYXJkLCBmb3JjZSBuYXZpZ2F0aW9uIHJlZ2FyZGxlc3Mgb2YgY29uZGl0aW9uc1xuICAyMDI2XHQgICAgLy8gVGhpcyBlbnN1cmVzIGFsbCBwbGF5ZXJzIHdpbGwgZXZlbnR1YWxseSBuYXZpZ2F0ZSB0byB0aGUgZ2FtZSBib2FyZFxuICAyMDI3XHQgICAgaWYgKCFpc09uR2FtZUJvYXJkICYmIHRoaXMuZ2FtZVN0YXJ0UmV0cnlDb3VudCA8IHRoaXMubWF4R2FtZVN0YXJ0UmV0cmllcykge1xuICAyMDI4XHQgICAgICAvLyBGb3JjZSB0aGUgZ2FtZSBzdGF0ZSB0byBiZSBpbiBwbGF5aW5nIG1vZGVcbiAgMjAyOVx0ICAgICAgc3RvcmUuZGlzcGF0Y2goc2V0R2FtZVN0YXJ0ZWQodHJ1ZSkpO1xuICAyMDMwXHQgICAgICBzdG9yZS5kaXNwYXRjaChzZXRHYW1lUGhhc2UoJ3BsYXlpbmcnKSk7XG4gIDIwMzFcdCAgICAgIHN0b3JlLmRpc3BhdGNoKHN5bmNHYW1lU3RhdHVzKCdQTEFZSU5HJykpO1xuICAyMDMyXHRcbiAgMjAzM1x0ICAgICAgLy8gRm9yY2UgbG9jYWxTdG9yYWdlIGZsYWdzXG4gIDIwMzRcdCAgICAgIHRyeSB7XG4gIDIwMzVcdCAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2tla29wb2x5X2dhbWVfc3RhcnRlZCcsICd0cnVlJyk7XG4gIDIwMzZcdCAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2tla29wb2x5X2dhbWVfaWQnLCBnYW1lSWQgfHwgdGhpcy5nYW1lSWQpO1xuICAyMDM3XHQgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdrZWtvcG9seV9uYXZpZ2F0aW9uX3RpbWVzdGFtcCcsIERhdGUubm93KCkudG9TdHJpbmcoKSk7XG4gIDIwMzhcdCAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2tla29wb2x5X2dhbWVfcGhhc2UnLCAncGxheWluZycpO1xuICAyMDM5XHQgICAgICB9IGNhdGNoIChlKSB7XG4gIDIwNDBcdCAgICAgICAgY29uc29sZS53YXJuKCdbR0FNRV9TVEFSVF9SRVRSWV0gQ291bGQgbm90IHVzZSBsb2NhbFN0b3JhZ2U6JywgZSk7XG4gIDIwNDFcdCAgICAgIH1cbiAgMjA0Mlx0ICAgICAgY29uc29sZS5sb2coYFtHQU1FX1NUQVJUX1JFVFJZXSBHYW1lIGJvYXJkIG5vdCB2aXNpYmxlIHlldCwgcmUtZGlzcGF0Y2hpbmcgZ2FtZSBzdGF0ZSBhY3Rpb25zIChhdHRlbXB0ICR7dGhpcy5nYW1lU3RhcnRSZXRyeUNvdW50ICsgMX0vJHt0aGlzLm1heEdhbWVTdGFydFJldHJpZXN9KWApO1xuICAyMDQzXHQgICAgICBjb25zb2xlLmxvZyhgW0dBTUVfU1RBUlRfUkVUUlldIFBsYXllciAke3RoaXMucGxheWVySWR9IGF0dGVtcHRpbmcgdG8gdHJhbnNpdGlvbiB0byBnYW1lIGJvYXJkYCk7XG4gIDIwNDRcdFxuICAyMDQ1XHQgICAgICAvLyBVc2UgdGhlIHN5bmNocm9uaXphdGlvbiBmdW5jdGlvbiB0byBlbnN1cmUgY29uc2lzdGVudCBzdGF0ZVxuICAyMDQ2XHQgICAgICAvLyBVc2UgJ1BMQVlJTkcnIHN0YXR1cyB0byBpbmRpY2F0ZSB3ZSdyZSB0cmFuc2l0aW9uaW5nIHRvIHRoZSBnYW1lIGJvYXJkXG4gIDIwNDdcdCAgICAgIHRoaXMuc3luY0dhbWVTdGF0ZUFjcm9zc1NsaWNlcygnUExBWUlORycpO1xuICAyMDQ4XHRcbiAgMjA0OVx0ICAgICAgLy8gVHJ5IG5hdmlnYXRpb24gd2l0aCBtdWx0aXBsZSBtZXRob2RzIGluIHNlcXVlbmNlXG4gIDIwNTBcdCAgICAgIGNvbnN0IG5hdmlnYXRlVG9HYW1lQm9hcmQgPSAoKSA9PiB7XG4gIDIwNTFcdCAgICAgICAgY29uc29sZS5sb2coYFtHQU1FX1NUQVJUX1JFVFJZXSBBdHRlbXB0aW5nIG5hdmlnYXRpb24gZm9yIHBsYXllciAke3RoaXMucGxheWVySWR9YCk7XG4gIDIwNTJcdFxuICAyMDUzXHQgICAgICAgIC8vIFNldCB0aGUgbmF2aWdhdGlvbiBmbGFncyB0byBwcmVzZXJ2ZSBjb25uZWN0aW9uXG4gIDIwNTRcdCAgICAgICAgdGhpcy5pc05hdmlnYXRpbmcgPSB0cnVlO1xuICAyMDU1XHQgICAgICAgIHRoaXMucHJlc2VydmVDb25uZWN0aW9uID0gdHJ1ZTtcbiAgMjA1Nlx0ICAgICAgICBjb25zb2xlLmxvZygnW0dBTUVfU1RBUlRfUkVUUlldIFNldCBjb25uZWN0aW9uIHByZXNlcnZhdGlvbiBmbGFncyBmb3IgbmF2aWdhdGlvbicpO1xuICAyMDU3XHRcbiAgMjA1OFx0ICAgICAgICAvLyAxLiBUcnkgUmVhY3QgUm91dGVyIG5hdmlnYXRpb24gdmlhIHdpbmRvdyBmdW5jdGlvblxuICAyMDU5XHQgICAgICAgIGlmICh3aW5kb3cubmF2aWdhdGVUb0dhbWUgJiYgdHlwZW9mIHdpbmRvdy5uYXZpZ2F0ZVRvR2FtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAyMDYwXHQgICAgICAgICAgY29uc29sZS5sb2coJ1tHQU1FX1NUQVJUX1JFVFJZXSBVc2luZyBuYXZpZ2F0ZVRvR2FtZSBmdW5jdGlvbicpO1xuICAyMDYxXHQgICAgICAgICAgd2luZG93Lm5hdmlnYXRlVG9HYW1lKGdhbWVJZCB8fCB0aGlzLmdhbWVJZCk7XG4gIDIwNjJcdCAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgMjA2M1x0ICAgICAgICB9XG4gIDIwNjRcdFxuICAyMDY1XHQgICAgICAgIC8vIDIuIFRyeSBkaXJlY3QgbG9jYXRpb24gY2hhbmdlXG4gIDIwNjZcdCAgICAgICAgdHJ5IHtcbiAgMjA2N1x0ICAgICAgICAgIGNvbnN0IG5hdlRhcmdldCA9IGAvZ2FtZS8ke2dhbWVJZCB8fCB0aGlzLmdhbWVJZH1gO1xuICAyMDY4XHQgICAgICAgICAgY29uc29sZS5sb2coYFtHQU1FX1NUQVJUX1JFVFJZXSBVc2luZyBkaXJlY3QgbG9jYXRpb24gY2hhbmdlIHRvICR7bmF2VGFyZ2V0fWApO1xuICAyMDY5XHQgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBuYXZUYXJnZXQ7XG4gIDIwNzBcdCAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgMjA3MVx0ICAgICAgICB9IGNhdGNoIChlKSB7XG4gIDIwNzJcdCAgICAgICAgICBjb25zb2xlLndhcm4oJ1tHQU1FX1NUQVJUX1JFVFJZXSBOYXZpZ2F0aW9uIGZhaWxlZDonLCBlKTtcbiAgMjA3M1x0ICAgICAgICB9XG4gIDIwNzRcdFxuICAyMDc1XHQgICAgICAgIHJldHVybiBmYWxzZTtcbiAgMjA3Nlx0ICAgICAgfTtcbiAgMjA3N1x0XG4gIDIwNzhcdCAgICAgIC8vIEV4ZWN1dGUgbmF2aWdhdGlvblxuICAyMDc5XHQgICAgICBjb25zdCBuYXZpZ2F0aW9uU3VjY2Vzc2Z1bCA9IG5hdmlnYXRlVG9HYW1lQm9hcmQoKTtcbiAgMjA4MFx0XG4gIDIwODFcdCAgICAgIC8vIFJlcXVlc3QgdXBkYXRlZCBnYW1lIHN0YXRlIGZyb20gc2VydmVyXG4gIDIwODJcdCAgICAgIGlmICh0aGlzLnNvY2tldCAmJiB0aGlzLnNvY2tldC5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuT1BFTikge1xuICAyMDgzXHQgICAgICAgIGNvbnNvbGUubG9nKCdbR0FNRV9TVEFSVF9SRVRSWV0gUmVxdWVzdGluZyB1cGRhdGVkIGdhbWUgc3RhdGUgZnJvbSBzZXJ2ZXInKTtcbiAgMjA4NFx0ICAgICAgICB0aGlzLnNlbmRNZXNzYWdlKCdnZXRfZ2FtZV9zdGF0ZScsIHsgZnVsbDogdHJ1ZSB9KTtcbiAgMjA4NVx0ICAgICAgICB0aGlzLnNlbmRNZXNzYWdlKCdjaGVja19nYW1lX3N0YXJ0ZWQnLCB7IGdhbWVJZDogdGhpcy5nYW1lSWQgfSk7XG4gIDIwODZcdCAgICAgIH1cbiAgMjA4N1x0XG4gIDIwODhcdCAgICAgIC8vIEluY3JlbWVudCByZXRyeSBjb3VudGVyXG4gIDIwODlcdCAgICAgIHRoaXMuZ2FtZVN0YXJ0UmV0cnlDb3VudCsrO1xuICAyMDkwXHRcbiAgMjA5MVx0ICAgICAgLy8gSWYgbmF2aWdhdGlvbiB3YXMgc3VjY2Vzc2Z1bCwgd2UnbGwgdHJ5IGZld2VyIGFkZGl0aW9uYWwgcmV0cmllc1xuICAyMDkyXHQgICAgICBpZiAobmF2aWdhdGlvblN1Y2Nlc3NmdWwpIHtcbiAgMjA5M1x0ICAgICAgICBjb25zb2xlLmxvZygnW0dBTUVfU1RBUlRfUkVUUlldIE5hdmlnYXRpb24gYXBwZWFycyBzdWNjZXNzZnVsLCByZWR1Y2luZyByZW1haW5pbmcgcmV0cmllcycpO1xuICAyMDk0XHQgICAgICAgIHRoaXMuZ2FtZVN0YXJ0UmV0cnlDb3VudCA9IE1hdGgubWF4KHRoaXMuZ2FtZVN0YXJ0UmV0cnlDb3VudCwgTWF0aC5mbG9vcih0aGlzLm1heEdhbWVTdGFydFJldHJpZXMgKiAwLjcpKTtcbiAgMjA5NVx0ICAgICAgfVxuICAyMDk2XHRcbiAgMjA5N1x0ICAgICAgLy8gU2NoZWR1bGUgbmV4dCByZXRyeSB3aXRoIGluY3JlYXNpbmcgZGVsYXkgYnV0IGNhcCB0aGUgbWF4aW11bSBkZWxheVxuICAyMDk4XHQgICAgICBjb25zdCBiYXNlRGVsYXkgPSA1MDA7XG4gIDIwOTlcdCAgICAgIGNvbnN0IG1heERlbGF5ID0gMjAwMDsgLy8gQ2FwIGF0IDIgc2Vjb25kcyBmb3IgZmFzdGVyIHJldHJpZXNcbiAgMjEwMFx0ICAgICAgY29uc3QgbmV4dERlbGF5ID0gTWF0aC5taW4oYmFzZURlbGF5ICogTWF0aC5wb3coMS4zLCB0aGlzLmdhbWVTdGFydFJldHJ5Q291bnQpLCBtYXhEZWxheSk7XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAyNjgyXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI0YWE0MzNmMi1iZWU4LTQyZTMtOWFkZS03MWYwMWJkM2I5MDI7dG9vbHVfdnJ0eF8wMVFZdjV4TEpGeEtDZkJrUWlOTGhzSDkiOnsicmVxdWVzdElkIjoiNGFhNDMzZjItYmVlOC00MmUzLTlhZGUtNzFmMDFiZDNiOTAyIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMVFZdjV4TEpGeEtDZkJrUWlOTGhzSDkiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIGtla29wb2x5LWZyb250ZW5kL3NyYy9zZXJ2aWNlcy9zb2NrZXRTZXJ2aWNlLmpzOlxuICAyMjAwXHQgICAgICB9IGNhdGNoIChlKSB7XG4gIDIyMDFcdCAgICAgICAgY29uc29sZS53YXJuKCdbR0FNRV9TVEFURV9QT0xMSU5HXSBFcnJvciBhY2Nlc3NpbmcgbG9jYWxTdG9yYWdlOicsIGUpO1xuICAyMjAyXHQgICAgICB9XG4gIDIyMDNcdFxuICAyMjA0XHQgICAgICAvLyBJZiBnYW1lIGlzIHN0YXJ0ZWQgaW4gUmVkdXgsIHVwZGF0ZSBvdXIgaW50ZXJuYWwgc3RhdGUgYW5kIG5hdmlnYXRlXG4gIDIyMDVcdCAgICAgIGlmIChnYW1lU3RhcnRlZCkge1xuICAyMjA2XHQgICAgICAgIGNvbnNvbGUubG9nKCdbR0FNRV9TVEFURV9QT0xMSU5HXSBHYW1lIGFscmVhZHkgc3RhcnRlZCwgc3RvcHBpbmcgcG9sbGluZycpO1xuICAyMjA3XHRcbiAgMjIwOFx0ICAgICAgICAvLyBSZXF1ZXN0IHVwZGF0ZWQgZ2FtZSBzdGF0ZSBmcm9tIHNlcnZlclxuICAyMjA5XHQgICAgICAgIGlmICh0aGlzLnNvY2tldCAmJiB0aGlzLnNvY2tldC5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuT1BFTikge1xuICAyMjEwXHQgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZSgnZ2V0X2dhbWVfc3RhdGUnLCB7IGZ1bGw6IHRydWUgfSk7XG4gIDIyMTFcdCAgICAgICAgfVxuICAyMjEyXHRcbiAgMjIxM1x0ICAgICAgICAvLyBOYXZpZ2F0ZSB0byBnYW1lIGJvYXJkXG4gIDIyMTRcdCAgICAgICAgdGhpcy5uYXZpZ2F0ZVRvR2FtZUJvYXJkKHRoaXMuZ2FtZUlkKTtcbiAgMjIxNVx0XG4gIDIyMTZcdCAgICAgICAgLy8gU3RvcCBwb2xsaW5nXG4gIDIyMTdcdCAgICAgICAgaWYgKHRoaXMuZ2FtZVN0YXRlUG9sbGluZ1RpbWVyKSB7XG4gIDIyMThcdCAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuZ2FtZVN0YXRlUG9sbGluZ1RpbWVyKTtcbiAgMjIxOVx0ICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlUG9sbGluZ1RpbWVyID0gbnVsbDtcbiAgMjIyMFx0ICAgICAgICB9XG4gIDIyMjFcdFxuICAyMjIyXHQgICAgICAgIHJldHVybiB0cnVlO1xuICAyMjIzXHQgICAgICB9XG4gIDIyMjRcdFxuICAyMjI1XHQgICAgICAvLyBSZXF1ZXN0IHVwZGF0ZWQgZ2FtZSBzdGF0ZSBmcm9tIHNlcnZlclxuICAyMjI2XHQgICAgICBpZiAodGhpcy5zb2NrZXQgJiYgdGhpcy5zb2NrZXQucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pIHtcbiAgMjIyN1x0ICAgICAgICB0aGlzLnNlbmRNZXNzYWdlKCdnZXRfZ2FtZV9zdGF0ZScsIHt9KTtcbiAgMjIyOFx0XG4gIDIyMjlcdCAgICAgICAgLy8gQWxzbyByZXF1ZXN0IGFjdGl2ZSBwbGF5ZXJzIGluIGNhc2UgaG9zdCBpbmZvcm1hdGlvbiBoYXMgY2hhbmdlZFxuICAyMjMwXHQgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2UoJ2dldF9hY3RpdmVfcGxheWVycycsIHt9KTtcbiAgMjIzMVx0ICAgICAgfVxuICAyMjMyXHRcbiAgMjIzM1x0ICAgICAgcmV0dXJuIGZhbHNlO1xuICAyMjM0XHQgICAgfTtcbiAgMjIzNVx0XG4gIDIyMzZcdCAgICAvLyBSdW4gaW5pdGlhbCBjaGVja1xuICAyMjM3XHQgICAgY29uc3QgZ2FtZVN0YXJ0ZWQgPSBjaGVja0dhbWVTdGF0ZSgpO1xuICAyMjM4XHRcbiAgMjIzOVx0ICAgIC8vIElmIGdhbWUgYWxyZWFkeSBzdGFydGVkLCBubyBuZWVkIHRvIHNldCB1cCBwb2xsaW5nXG4gIDIyNDBcdCAgICBpZiAoIWdhbWVTdGFydGVkKSB7XG4gIDIyNDFcdCAgICAgICAvLyBTZXQgdXAgcG9sbGluZyBhdCAzLXNlY29uZCBpbnRlcnZhbHNcbiAgMjI0Mlx0ICAgICAgIC8qIC0tLSBUZW1wb3JhcmlseSBkaXNhYmxlIHBvbGxpbmcgaW50ZXJ2YWwgdG8gcmVkdWNlIGxvZyBzcGFtIC0tLVxuICAyMjQzXHQgICAgICAgdGhpcy5nYW1lU3RhdGVQb2xsaW5nVGltZXIgPSBzZXRJbnRlcnZhbChjaGVja0dhbWVTdGF0ZSwgMzAwMDApOyAvLyBJbmNyZWFzZSBpbnRlcnZhbCBzaWduaWZpY2FudGx5IGlmIHJlLWVuYWJsZWRcbiAgMjI0NFx0ICAgICAgICovXG4gIDIyNDVcdCAgICAgICBjb25zb2xlLmxvZygnW0dBTUVfU1RBVEVfUE9MTElOR10gUG9sbGluZyBpbnRlcnZhbCBjdXJyZW50bHkgZGlzYWJsZWQuJyk7XG4gIDIyNDZcdCAgICAgICAvLyAtLS0tLS0tLS1cbiAgMjI0N1x0ICAgIH1cbiAgMjI0OFx0ICB9O1xuICAyMjQ5XHRcbiAgMjI1MFx0ICAvLyBIZWxwZXIgbWV0aG9kIHRvIG5hdmlnYXRlIHRvIHRoZSBnYW1lIGJvYXJkXG4gIDIyNTFcdCAgbmF2aWdhdGVUb0dhbWVCb2FyZCA9IChnYW1lSWQpID0+IHtcbiAgMjI1Mlx0ICAgIGlmICghZ2FtZUlkKSB7XG4gIDIyNTNcdCAgICAgIGNvbnNvbGUud2FybignW05BVklHQVRJT05dIENhbm5vdCBuYXZpZ2F0ZSB0byBnYW1lIGJvYXJkOiBubyBnYW1lSWQgcHJvdmlkZWQnKTtcbiAgMjI1NFx0ICAgICAgcmV0dXJuIGZhbHNlO1xuICAyMjU1XHQgICAgfVxuICAyMjU2XHRcbiAgMjI1N1x0ICAgIGNvbnNvbGUubG9nKGBbTkFWSUdBVElPTl0gQXR0ZW1wdGluZyB0byBuYXZpZ2F0ZSB0byBnYW1lIGJvYXJkIGZvciBnYW1lICR7Z2FtZUlkfWApO1xuICAyMjU4XHRcbiAgMjI1OVx0ICAgIC8vIFNldCB0aGUgbmF2aWdhdGlvbiBmbGFncyB0byBwcmVzZXJ2ZSBjb25uZWN0aW9uXG4gIDIyNjBcdCAgICB0aGlzLmlzTmF2aWdhdGluZyA9IHRydWU7XG4gIDIyNjFcdCAgICB0aGlzLnByZXNlcnZlQ29ubmVjdGlvbiA9IHRydWU7XG4gIDIyNjJcdCAgICBjb25zb2xlLmxvZygnW05BVklHQVRJT05dIFNldCBjb25uZWN0aW9uIHByZXNlcnZhdGlvbiBmbGFncyBmb3IgbmF2aWdhdGlvbicpO1xuICAyMjYzXHRcbiAgMjI2NFx0ICAgIC8vIFRyeSBtdWx0aXBsZSBhcHByb2FjaGVzIGluIHNlcXVlbmNlXG4gIDIyNjVcdFxuICAyMjY2XHQgICAgLy8gQXBwcm9hY2ggMTogVXNlIFJlYWN0IFJvdXRlciB2aWEgZXhwb3NlZCB3aW5kb3cgZnVuY3Rpb25cbiAgMjI2N1x0ICAgIGlmICh3aW5kb3cubmF2aWdhdGVUb0dhbWUgJiYgdHlwZW9mIHdpbmRvdy5uYXZpZ2F0ZVRvR2FtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAyMjY4XHQgICAgICBjb25zb2xlLmxvZygnW05BVklHQVRJT05dIFVzaW5nIG5hdmlnYXRlVG9HYW1lIHdpbmRvdyBmdW5jdGlvbicpO1xuICAyMjY5XHQgICAgICB3aW5kb3cubmF2aWdhdGVUb0dhbWUoZ2FtZUlkKTtcbiAgMjI3MFx0ICAgICAgcmV0dXJuIHRydWU7XG4gIDIyNzFcdCAgICB9XG4gIDIyNzJcdFxuICAyMjczXHQgICAgLy8gQXBwcm9hY2ggMjogVXNlIGRpcmVjdCBsb2NhdGlvbiBjaGFuZ2VcbiAgMjI3NFx0ICAgIGlmICghd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLmluY2x1ZGVzKGAvZ2FtZS8ke2dhbWVJZH1gKSkge1xuICAyMjc1XHQgICAgICB0cnkge1xuICAyMjc2XHQgICAgICAgIGNvbnNvbGUubG9nKGBbTkFWSUdBVElPTl0gVXNpbmcgZGlyZWN0IGxvY2F0aW9uIGNoYW5nZSB0byAvZ2FtZS8ke2dhbWVJZH1gKTtcbiAgMjI3N1x0ICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGAvZ2FtZS8ke2dhbWVJZH1gO1xuICAyMjc4XHQgICAgICAgIHJldHVybiB0cnVlO1xuICAyMjc5XHQgICAgICB9IGNhdGNoIChlKSB7XG4gIDIyODBcdCAgICAgICAgY29uc29sZS53YXJuKCdbTkFWSUdBVElPTl0gRGlyZWN0IG5hdmlnYXRpb24gZmFpbGVkOicsIGUpO1xuICAyMjgxXHQgICAgICB9XG4gIDIyODJcdCAgICB9IGVsc2Uge1xuICAyMjgzXHQgICAgICBjb25zb2xlLmxvZyhgW05BVklHQVRJT05dIEFscmVhZHkgb24gZ2FtZSBib2FyZCBhdCAke3dpbmRvdy5sb2NhdGlvbi5wYXRobmFtZX1gKTtcbiAgMjI4NFx0ICAgICAgcmV0dXJuIHRydWU7XG4gIDIyODVcdCAgICB9XG4gIDIyODZcdFxuICAyMjg3XHQgICAgcmV0dXJuIGZhbHNlO1xuICAyMjg4XHQgIH07XG4gIDIyODlcdFxuICAyMjkwXHQgIC8vIEhhbmRsZSBzeW5jaHJvbml6YXRpb24gZXJyb3JzXG4gIDIyOTFcdCAgaGFuZGxlU3luY0Vycm9yID0gKGVycm9yVHlwZSwgZXJyb3IsIGRhdGEgPSBudWxsKSA9PiB7XG4gIDIyOTJcdCAgICBjb25zb2xlLmVycm9yKGBbU1lOQ19FUlJPUl0gJHtlcnJvclR5cGV9IGVycm9yOmAsIGVycm9yKTtcbiAgMjI5M1x0XG4gIDIyOTRcdCAgICAvLyBMb2cgZGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgc3RhdGVcbiAgMjI5NVx0ICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gIDIyOTZcdCAgICBjb25zb2xlLmxvZygnW1NZTkNfRVJST1JdIEN1cnJlbnQgZ2FtZSBzdGF0ZTonLCB7XG4gIDIyOTdcdCAgICAgIGdhbWVTdGFydGVkOiBjdXJyZW50U3RhdGUuZ2FtZS5nYW1lU3RhcnRlZCxcbiAgMjI5OFx0ICAgICAgZ2FtZVBoYXNlOiBjdXJyZW50U3RhdGUuZ2FtZS5nYW1lUGhhc2UsXG4gIDIyOTlcdCAgICAgIGhvc3RJZDogY3VycmVudFN0YXRlLmdhbWUuaG9zdElkLFxuICAyMzAwXHQgICAgICBwbGF5ZXJDb3VudDogT2JqZWN0LmtleXMoY3VycmVudFN0YXRlLnBsYXllcnMucGxheWVycyB8fCB7fSkubGVuZ3RoLFxuVG90YWwgbGluZXMgaW4gZmlsZTogMjY4MlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiY2Q4YmZlYjItMmVmYS00MmIyLTlhYTctOGMyZDJkMGM2MTlhO3Rvb2x1X3ZydHhfMDFHdnF1VHF5YjRMNmIxcW5ZUDlMOEpXIjp7InJlcXVlc3RJZCI6ImNkOGJmZWIyLTJlZmEtNDJiMi05YWE3LThjMmQyZDBjNjE5YSIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFHdnF1VHF5YjRMNmIxcW5ZUDlMOEpXIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBrZWtvcG9seS1mcm9udGVuZC9zcmMvc2VydmljZXMvc29ja2V0U2VydmljZS5qczpcbiAgMTIwMFx0ICAgICAgICBuZWVkc1VwZGF0ZSA9IHRydWU7XG4gIDEyMDFcdCAgICAgIH1cbiAgMTIwMlx0ICAgICAgaWYgKHBsYXllci5pc1JlYWR5ICE9PSB1bmRlZmluZWQgJiYgZXhpc3RpbmdQbGF5ZXIuaXNSZWFkeSAhPT0gcGxheWVyLmlzUmVhZHkpIHtcbiAgMTIwM1x0ICAgICAgICB1cGRhdGVzLmlzUmVhZHkgPSBwbGF5ZXIuaXNSZWFkeTtcbiAgMTIwNFx0ICAgICAgICBuZWVkc1VwZGF0ZSA9IHRydWU7XG4gIDEyMDVcdCAgICAgIH1cbiAgMTIwNlx0ICAgICAgIC8vIEFkZCBvdGhlciBmaWVsZHMgaGVyZSBpZiBwbGF5ZXJfam9pbmVkIHNwZWNpZmljYWxseSBwcm92aWRlcyB1bmlxdWUgdXBkYXRlc1xuICAxMjA3XHRcbiAgMTIwOFx0ICAgICAgaWYgKG5lZWRzVXBkYXRlKSB7XG4gIDEyMDlcdCAgICAgICAgIGNvbnNvbGUubG9nKGBbUExBWUVSX0RJU1BMQVldIFVwZGF0aW5nIGV4aXN0aW5nIHBsYXllciAke3BsYXllci5pZH0gd2l0aDpgLCB1cGRhdGVzKTtcbiAgMTIxMFx0ICAgICAgICAgZGlzcGF0Y2godXBkYXRlUGxheWVyKHtcbiAgMTIxMVx0ICAgICAgICAgICAgIHBsYXllcklkOiBwbGF5ZXIuaWQsXG4gIDEyMTJcdCAgICAgICAgICAgICB1cGRhdGVzOiB1cGRhdGVzXG4gIDEyMTNcdCAgICAgICAgIH0pKTtcbiAgMTIxNFx0ICAgICAgICAgLy8gSWYgaG9zdCBzdGF0dXMgY2hhbmdlZCwgZW5zdXJlIGNvbnNpc3RlbmN5IGFjcm9zcyBhbGwgcGxheWVyc1xuICAxMjE1XHQgICAgICAgICBpZiAodXBkYXRlcy5pc0hvc3QgIT09IHVuZGVmaW5lZCkge1xuICAxMjE2XHQgICAgICAgICAgICB0aGlzLnVwZGF0ZVBsYXllcnNIb3N0U3RhdHVzKGhvc3RJZCwgdHJ1ZSk7IC8vIFNraXAgYnJvYWRjYXN0IGZyb20gaGVyZVxuICAxMjE3XHQgICAgICAgICB9XG4gIDEyMThcdCAgICAgIH0gZWxzZSB7XG4gIDEyMTlcdCAgICAgICAgIGNvbnNvbGUubG9nKGBbUExBWUVSX0RJU1BMQVldIE5vIG5lY2Vzc2FyeSB1cGRhdGVzIGZvciBleGlzdGluZyBwbGF5ZXIgJHtwbGF5ZXIuaWR9IGZyb20gam9pbiBtZXNzYWdlLmApO1xuICAxMjIwXHQgICAgICB9XG4gIDEyMjFcdFxuICAxMjIyXHQgICAgICAvLyBFeGl0IGVhcmx5LCBsZXQgaGFuZGxlQWN0aXZlUGxheWVycyBtYW5hZ2UgdGhlIGZ1bGwgc3RhdGUgc3luY1xuICAxMjIzXHQgICAgICByZXR1cm47XG4gIDEyMjRcdCAgICB9XG4gIDEyMjVcdFxuICAxMjI2XHQgICAgLy8gLS0tIFBsYXllciBkb2VzIE5PVCBleGlzdCwgcHJvY2VlZCB3aXRoIGFkZGluZyAtLS1cbiAgMTIyN1x0ICAgIGNvbnNvbGUubG9nKGBbUExBWUVSX0RJU1BMQVldIFBsYXllciAke3BsYXllci5pZH0gZG9lcyBub3QgZXhpc3QuIEFkZGluZyBuZXcgcGxheWVyLmApO1xuICAxMjI4XHRcbiAgMTIyOVx0ICAgIC8vIERldGVybWluZSBpZiB0aGlzIHBsYXllciBzaG91bGQgYmUgdGhlIGhvc3QgdXNpbmcgZW5oYW5jZWQgbG9naWNcbiAgMTIzMFx0ICAgIGxldCBpc1BsYXllckhvc3QgPSBmYWxzZTtcbiAgMTIzMVx0XG4gIDEyMzJcdCAgICAvLyBDYXNlIDE6IFBsYXllciBpcyBleHBsaWNpdGx5IG1hcmtlZCBhcyBob3N0IGluIHRoZSBtZXNzYWdlXG4gIDEyMzNcdCAgICBpZiAocGxheWVyLmlzSG9zdCA9PT0gdHJ1ZSkge1xuICAxMjM0XHQgICAgICBpc1BsYXllckhvc3QgPSB0cnVlO1xuICAxMjM1XHQgICAgICAvLyBVcGRhdGUgZ2FtZSBzdGF0ZSBob3N0SWQgdG8gbWF0Y2ggdGhpcyBwbGF5ZXJcbiAgMTIzNlx0ICAgICAgY29uc29sZS5sb2coYFtIT1NUX01BTkFHRU1FTlRdIFBsYXllciAke3BsYXllci5pZH0gaXMgbWFya2VkIGFzIGhvc3QgaW4gbWVzc2FnZSwgc2V0dGluZyBhcyBob3N0LmApO1xuICAxMjM3XHQgICAgICBkaXNwYXRjaChzZXRIb3N0KHBsYXllci5pZCkpO1xuICAxMjM4XHQgICAgICBob3N0SWQgPSBwbGF5ZXIuaWQ7IC8vIFVwZGF0ZSBsb2NhbCBob3N0SWRcbiAgMTIzOVx0ICAgIH1cbiAgMTI0MFx0ICAgIC8vIENhc2UgMjogUGxheWVyIElEIG1hdGNoZXMgdGhlIGhvc3RJZCBpbiBnYW1lIHN0YXRlIChzaG91bGQgYmUgcmFyZSBpZiBwbGF5ZXIgZG9lc24ndCBleGlzdCwgYnV0IHBvc3NpYmxlIHJhY2UpXG4gIDEyNDFcdCAgICBlbHNlIGlmIChwbGF5ZXIuaWQgPT09IGhvc3RJZCkge1xuICAxMjQyXHQgICAgICBpc1BsYXllckhvc3QgPSB0cnVlO1xuICAxMjQzXHQgICAgICBjb25zb2xlLmxvZyhgW0hPU1RfTUFOQUdFTUVOVF0gUGxheWVyICR7cGxheWVyLmlkfSBtYXRjaGVzIGV4aXN0aW5nIGhvc3RJZCAke2hvc3RJZH0uYCk7XG4gIDEyNDRcdCAgICB9XG4gIDEyNDVcdCAgICAvLyBDYXNlIDM6IE5vIGhvc3RJZCBpcyBzZXQgYW5kIG5vIHBsYXllcnMgZXhpc3QgeWV0XG4gIDEyNDZcdCAgICBlbHNlIGlmICghaG9zdElkICYmIE9iamVjdC5rZXlzKGV4aXN0aW5nUGxheWVycykubGVuZ3RoID09PSAwKSB7XG4gIDEyNDdcdCAgICAgIGlzUGxheWVySG9zdCA9IHRydWU7XG4gIDEyNDhcdCAgICAgIGNvbnNvbGUubG9nKGBbSE9TVF9NQU5BR0VNRU5UXSBObyBob3N0IHNldCBhbmQgbm8gZXhpc3RpbmcgcGxheWVycywgc2V0dGluZyAke3BsYXllci5pZH0gYXMgaG9zdC5gKTtcbiAgMTI0OVx0ICAgICAgZGlzcGF0Y2goc2V0SG9zdChwbGF5ZXIuaWQpKTtcbiAgMTI1MFx0ICAgICAgaG9zdElkID0gcGxheWVyLmlkOyAvLyBVcGRhdGUgbG9jYWwgaG9zdElkXG4gIDEyNTFcdCAgICB9XG4gIDEyNTJcdFxuICAxMjUzXHQgICAgY29uc29sZS5sb2coYFtIT1NUX01BTkFHRU1FTlRdIERldGVybWluZWQgaG9zdCBzdGF0dXMgZm9yIG5ldyBwbGF5ZXIgJHtwbGF5ZXIuaWR9OiAke2lzUGxheWVySG9zdH1gKTtcbiAgMTI1NFx0XG4gIDEyNTVcdCAgICAvLyBNYWtlIHN1cmUgcGxheWVyIGhhcyBhbGwgcmVxdWlyZWQgZmllbGRzXG4gIDEyNTZcdCAgICBjb25zdCBwbGF5ZXJEYXRhID0ge1xuICAxMjU3XHQgICAgICAvLyBEZWZhdWx0IHZhbHVlcyBmb3IgbWlzc2luZyBmaWVsZHNcbiAgMTI1OFx0ICAgICAgaWQ6IHBsYXllci5pZCxcbiAgMTI1OVx0ICAgICAgcG9zaXRpb246IDAsXG4gIDEyNjBcdCAgICAgIGJhbGFuY2U6IDE1MDAsXG4gIDEyNjFcdCAgICAgIHByb3BlcnRpZXM6IFtdLFxuICAxMjYyXHQgICAgICBzdGF0dXM6ICdBQ1RJVkUnLFxuICAxMjYzXHRcbiAgMTI2NFx0ICAgICAgLy8gUHJpb3JpdGl6ZSBuZXcgZGF0YSBmcm9tIHRoZSBtZXNzYWdlIGZvciBkaXNwbGF5IHByb3BlcnRpZXNcbiAgMTI2NVx0ICAgICAgbmFtZTogcGxheWVyLm5hbWUgfHwgYFBsYXllciAke3BsYXllci5pZC5zdWJzdHJpbmcoMCwgNCl9YCxcbiAgMTI2Nlx0ICAgICAgdG9rZW46IHBsYXllci50b2tlbiB8fCAnJyxcbiAgMTI2N1x0ICAgICAgZW1vamk6IHBsYXllci5lbW9qaSB8fCAn8J+RpCcsXG4gIDEyNjhcdCAgICAgIGNvbG9yOiBwbGF5ZXIuY29sb3IgfHwgJ2dyYXkuNTAwJyxcbiAgMTI2OVx0XG4gIDEyNzBcdCAgICAgIC8vIEhhbmRsZSByZWFkeSBzdGF0ZVxuICAxMjcxXHQgICAgICBpc1JlYWR5OiBwbGF5ZXIuaXNSZWFkeSAhPT0gdW5kZWZpbmVkID8gcGxheWVyLmlzUmVhZHkgOiBmYWxzZSxcbiAgMTI3Mlx0XG4gIDEyNzNcdCAgICAgIC8vIEFsd2F5cyBlbnN1cmUgaXNIb3N0IGlzIHNldCBjb3JyZWN0bHkgYmFzZWQgb24gYWJvdmUgbG9naWNcbiAgMTI3NFx0ICAgICAgaXNIb3N0OiBpc1BsYXllckhvc3RcbiAgMTI3NVx0ICAgIH07XG4gIDEyNzZcdFxuICAxMjc3XHQgICAgLy8gRW5zdXJlIHByb3BlcnRpZXMgaXMgYW4gYXJyYXlcbiAgMTI3OFx0ICAgIGlmICghQXJyYXkuaXNBcnJheShwbGF5ZXJEYXRhLnByb3BlcnRpZXMpKSB7XG4gIDEyNzlcdCAgICAgIHBsYXllckRhdGEucHJvcGVydGllcyA9IFtdO1xuICAxMjgwXHQgICAgfVxuICAxMjgxXHRcbiAgMTI4Mlx0ICAgIC8vIExvZyB0aGUgcGxheWVyIGJlaW5nIGFkZGVkXG4gIDEyODNcdCAgICBjb25zb2xlLmxvZyhgW1BMQVlFUl9ESVNQTEFZXSBBZGRpbmcgbmV3IHBsYXllcjpgLCBwbGF5ZXJEYXRhKTtcbiAgMTI4NFx0XG4gIDEyODVcdCAgICAvLyBBZGQgdGhlIHBsYXllciB0byB0aGUgc3RvcmVcbiAgMTI4Nlx0ICAgIGRpc3BhdGNoKGFkZFBsYXllcih7XG4gIDEyODdcdCAgICAgIHBsYXllcklkOiBwbGF5ZXIuaWQsXG4gIDEyODhcdCAgICAgIHBsYXllckRhdGE6IHBsYXllckRhdGFcbiAgMTI4OVx0ICAgIH0pKTtcbiAgMTI5MFx0XG4gIDEyOTFcdCAgICAvLyBJZiB0aGlzIG5ldyBwbGF5ZXIgd2FzIHNldCBhcyBob3N0LCB1cGRhdGUgYWxsIHBsYXllcnMnIHN0YXR1c1xuICAxMjkyXHQgICAgLy8gQXZvaWQgYnJvYWRjYXN0IGFzIHRoaXMgY2xpZW50IGluaXRpYXRlZCB0aGUgdXBkYXRlIGltcGxpY2l0bHlcbiAgMTI5M1x0ICAgIGlmIChpc1BsYXllckhvc3QpIHtcbiAgMTI5NFx0ICAgICAgIHRoaXMudXBkYXRlUGxheWVyc0hvc3RTdGF0dXMoaG9zdElkLCB0cnVlKTtcbiAgMTI5NVx0ICAgIH1cbiAgMTI5Nlx0ICB9O1xuICAxMjk3XHRcbiAgMTI5OFx0ICBoYW5kbGVQbGF5ZXJVcGRhdGVkID0gKHsgcGxheWVySWQsIHVwZGF0ZXMgfSkgPT4ge1xuICAxMjk5XHQgICAgc3RvcmUuZGlzcGF0Y2godXBkYXRlUGxheWVyKHsgcGxheWVySWQsIHVwZGF0ZXMgfSkpO1xuICAxMzAwXHQgIH07XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAyNjgyXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJiNWExNTVhYy1kMGE4LTRhZDgtOTAwMy1jZDdiMjZmMzRmYzQ7dG9vbHVfdnJ0eF8wMTNrRG9nTW1YWUdENmk4dFFhWDlReUQiOnsicmVxdWVzdElkIjoiYjVhMTU1YWMtZDBhOC00YWQ4LTkwMDMtY2Q3YjI2ZjM0ZmM0IiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMTNrRG9nTW1YWUdENmk4dFFhWDlReUQiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIGtla29wb2x5LWZyb250ZW5kL3NyYy9zZXJ2aWNlcy9zb2NrZXRTZXJ2aWNlLmpzOlxuICAgODAwXHRcbiAgIDgwMVx0ICAgICAgICAgICAgLy8gRGlyZWN0bHkgdXBkYXRlIHRoZSBnYW1lIHN0YXRlIHdpdGggZnVsZmlsbGVkIGFjdGlvblxuICAgODAyXHQgICAgICAgICAgICBkaXNwYXRjaCh7XG4gICA4MDNcdCAgICAgICAgICAgICAgdHlwZTogJ2dhbWUvc3RhcnRHYW1lQXN5bmMvZnVsZmlsbGVkJyxcbiAgIDgwNFx0ICAgICAgICAgICAgICBwYXlsb2FkOiB0cnVlLFxuICAgODA1XHQgICAgICAgICAgICAgIG1ldGE6IHsgcmVxdWVzdElkOiBkYXRhLnR5cGUsIGFyZzogdW5kZWZpbmVkIH1cbiAgIDgwNlx0ICAgICAgICAgICAgfSk7XG4gICA4MDdcdFxuICAgODA4XHQgICAgICAgICAgICAvLyBTdG9yZSBpbiBsb2NhbFN0b3JhZ2UgYXMgYSBiYWNrdXAgbWVjaGFuaXNtXG4gICA4MDlcdCAgICAgICAgICAgIHRyeSB7XG4gICA4MTBcdCAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2tla29wb2x5X2dhbWVfc3RhcnRlZCcsICd0cnVlJyk7XG4gICA4MTFcdCAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2tla29wb2x5X2dhbWVfaWQnLCB0aGlzLmdhbWVJZCk7XG4gICA4MTJcdCAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2tla29wb2x5X25hdmlnYXRpb25fdGltZXN0YW1wJywgRGF0ZS5ub3coKS50b1N0cmluZygpKTtcbiAgIDgxM1x0ICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgna2Vrb3BvbHlfZ2FtZV9zdGF0dXMnLCAnQUNUSVZFJyk7XG4gICA4MTRcdCAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgIDgxNVx0ICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tSRUNPVkVSRURdIENvdWxkIG5vdCB1c2UgbG9jYWxTdG9yYWdlOicsIGUpO1xuICAgODE2XHQgICAgICAgICAgICB9XG4gICA4MTdcdFxuICAgODE4XHQgICAgICAgICAgICAvLyBTZXQgdXAgcmV0cnkgbWVjaGFuaXNtIHRvIGVuc3VyZSBnYW1lIGJvYXJkIGFwcGVhcnNcbiAgIDgxOVx0ICAgICAgICAgICAgdGhpcy5zZXR1cEdhbWVTdGFydFJldHJ5Q2hlY2soKTtcbiAgIDgyMFx0XG4gICA4MjFcdCAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbUkVDT1ZFUkVEXSBHYW1lIHN0YXRlIHVwZGF0ZWQgdG8gQUNUSVZFIGZyb20gcmVjb3ZlcmVkICR7ZGF0YS50eXBlfSBtZXNzYWdlYCk7XG4gICA4MjJcdCAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbUkVDT1ZFUkVEXSBQbGF5ZXIgJHt0aGlzLnBsYXllcklkfSBwcm9jZXNzZWQgcmVjb3ZlcmVkICR7ZGF0YS50eXBlfSBldmVudC4gQ3VycmVudCBnYW1lIHN0YXRlOmAsIHtcbiAgIDgyM1x0ICAgICAgICAgICAgICBnYW1lU3RhcnRlZDogc3RvcmUuZ2V0U3RhdGUoKS5nYW1lLmdhbWVTdGFydGVkLFxuICAgODI0XHQgICAgICAgICAgICAgIGdhbWVQaGFzZTogc3RvcmUuZ2V0U3RhdGUoKS5nYW1lLmdhbWVQaGFzZSxcbiAgIDgyNVx0ICAgICAgICAgICAgICBzdGF0dXM6IHN0b3JlLmdldFN0YXRlKCkuZ2FtZS5zdGF0dXNcbiAgIDgyNlx0ICAgICAgICAgICAgfSk7XG4gICA4MjdcdFxuICAgODI4XHQgICAgICAgICAgICAvLyBSZXF1ZXN0IHVwZGF0ZWQgZ2FtZSBzdGF0ZSBhbmQgcGxheWVyIGxpc3RcbiAgIDgyOVx0ICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICA4MzBcdCAgICAgICAgICAgICAgaWYgKHRoaXMuc29ja2V0ICYmIHRoaXMuc29ja2V0LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOKSB7XG4gICA4MzFcdCAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW1JFQ09WRVJFRF0gUmVxdWVzdGluZyB1cGRhdGVkIGdhbWUgc3RhdGUgYW5kIHBsYXllciBsaXN0Jyk7XG4gICA4MzJcdCAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlKCdnZXRfZ2FtZV9zdGF0ZScsIHsgZnVsbDogdHJ1ZSB9KTtcbiAgIDgzM1x0ICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2UoJ2dldF9hY3RpdmVfcGxheWVycycsIHt9KTtcbiAgIDgzNFx0ICAgICAgICAgICAgICB9XG4gICA4MzVcdCAgICAgICAgICAgIH0sIDUwMCk7XG4gICA4MzZcdCAgICAgICAgICB9XG4gICA4MzdcdCAgICAgICAgICBicmVhaztcbiAgIDgzOFx0XG4gICA4MzlcdCAgICAgICAgY2FzZSAnaG9zdF92ZXJpZmljYXRpb25fc3VjY2Vzcyc6XG4gICA4NDBcdCAgICAgICAgICBjb25zb2xlLmxvZygnW1JFQ09WRVJFRF0gSG9zdCB2ZXJpZmljYXRpb24gc3VjY2VzcyBtZXNzYWdlIHJlY292ZXJlZCcpO1xuICAgODQxXHQgICAgICAgICAgLy8gVGhlIGhvc3Qgd2FzIHZlcmlmaWVkLCBub3cgd2UgY2FuIHByb2NlZWQgd2l0aCBnYW1lIHN0YXJ0IGxvZ2ljXG4gICA4NDJcdCAgICAgICAgICAvLyBUaGlzIGlzIGhhbmRsZWQgYXV0b21hdGljYWxseSBzaW5jZSB0aGUgZ2FtZTpzdGFydCBtZXNzYWdlIHNob3VsZCBmb2xsb3dcbiAgIDg0M1x0ICAgICAgICAgIGJyZWFrO1xuICAgODQ0XHRcbiAgIDg0NVx0ICAgICAgICBkZWZhdWx0OlxuICAgODQ2XHQgICAgICAgICAgY29uc29sZS5sb2coJ1VuaGFuZGxlZCByZWNvdmVyZWQgbWVzc2FnZSB0eXBlOicsIGRhdGEudHlwZSk7XG4gICA4NDdcdCAgICAgIH1cbiAgIDg0OFx0ICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICA4NDlcdCAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHByb2Nlc3NpbmcgcmVjb3ZlcmVkIG1lc3NhZ2U6JywgZXJyb3IpO1xuICAgODUwXHQgICAgfVxuICAgODUxXHQgIH07XG4gICA4NTJcdFxuICAgODUzXHQgIC8vIEVuaGFuY2VkIGdhbWUgc3RhdGUgaGFuZGxlciB3aXRoIHBhcnRpYWwgdXBkYXRlIHN1cHBvcnQgYW5kIHJldHJ5IG1lY2hhbmlzbVxuICAgODU0XHQgIGhhbmRsZUdhbWVTdGF0ZSA9IChnYW1lU3RhdGUpID0+IHtcbiAgIDg1NVx0ICAgIGNvbnN0IHsgZGlzcGF0Y2ggfSA9IHN0b3JlO1xuICAgODU2XHQgICAgY29uc29sZS5sb2coJ1tIQU5ETEVfR0FNRV9TVEFURV0gUHJvY2Vzc2luZyBnYW1lIHN0YXRlOicsIGdhbWVTdGF0ZSk7XG4gICA4NTdcdFxuICAgODU4XHQgICAgLy8gVHJhY2sgaWYgdGhpcyBpcyBhIHBhcnRpYWwgdXBkYXRlXG4gICA4NTlcdCAgICBjb25zdCBpc1BhcnRpYWxVcGRhdGUgPSBnYW1lU3RhdGUucGFydGlhbCA9PT0gdHJ1ZTtcbiAgIDg2MFx0ICAgIGNvbnNvbGUubG9nKGBbSEFORExFX0dBTUVfU1RBVEVdIFVwZGF0ZSB0eXBlOiAke2lzUGFydGlhbFVwZGF0ZSA/ICdQYXJ0aWFsJyA6ICdGdWxsJ31gKTtcbiAgIDg2MVx0XG4gICA4NjJcdCAgICAvLyBQcm9jZXNzIGJhc2ljIGdhbWUgc3RhdGUgcHJvcGVydGllc1xuICAgODYzXHQgICAgLy8gV2Ugbm8gbG9uZ2VyIG5lZWQgdG8gdXBkYXRlIHRoZSBzbGljZXMvZ2FtZVNsaWNlIHByb3BlcnRpZXNcbiAgIDg2NFx0ICAgIC8vIEluc3RlYWQsIHVwZGF0ZSB0aGUgbWFpbiBnYW1lU2xpY2Ugd2l0aCBlcXVpdmFsZW50IGluZm9ybWF0aW9uXG4gICA4NjVcdCAgICBpZiAoZ2FtZVN0YXRlLmdhbWVJZCkge1xuICAgODY2XHQgICAgICBkaXNwYXRjaChzZXRSb29tQ29kZShnYW1lU3RhdGUuZ2FtZUlkKSk7XG4gICA4NjdcdCAgICB9XG4gICA4NjhcdCAgICBpZiAoZ2FtZVN0YXRlLnN0YXR1cykge1xuICAgODY5XHQgICAgICAvLyBNYXAgdGhlIHN0YXR1cyB0byB0aGUgYXBwcm9wcmlhdGUgZ2FtZVBoYXNlXG4gICA4NzBcdCAgICAgIGlmIChnYW1lU3RhdGUuc3RhdHVzID09PSAnQUNUSVZFJykge1xuICAgODcxXHQgICAgICAgIGRpc3BhdGNoKHN5bmNHYW1lU3RhdHVzKCdBQ1RJVkUnKSk7XG4gICA4NzJcdCAgICAgIH0gZWxzZSBpZiAoZ2FtZVN0YXRlLnN0YXR1cyA9PT0gJ0NPTVBMRVRFRCcpIHtcbiAgIDg3M1x0ICAgICAgICBkaXNwYXRjaChzZXRHYW1lUGhhc2UoJ2VuZGVkJykpO1xuICAgODc0XHQgICAgICB9XG4gICA4NzVcdCAgICB9XG4gICA4NzZcdCAgICBpZiAoZ2FtZVN0YXRlLmN1cnJlbnRUdXJuKSB7XG4gICA4NzdcdCAgICAgIGRpc3BhdGNoKHNldEN1cnJlbnRQbGF5ZXIoZ2FtZVN0YXRlLmN1cnJlbnRUdXJuKSk7XG4gICA4NzhcdCAgICB9XG4gICA4NzlcdFxuICAgODgwXHQgICAgLy8gUHJvY2VzcyBnYW1lSW5mbyBpZiBhdmFpbGFibGVcbiAgIDg4MVx0ICAgIGlmIChnYW1lU3RhdGUuZ2FtZUluZm8pIHtcbiAgIDg4Mlx0ICAgICAgY29uc29sZS5sb2coJ1tIQU5ETEVfR0FNRV9TVEFURV0gUHJvY2Vzc2luZyBnYW1lSW5mbzonLCBnYW1lU3RhdGUuZ2FtZUluZm8pO1xuICAgODgzXHQgICAgICBkaXNwYXRjaChzZXRHYW1lSW5mbyhnYW1lU3RhdGUuZ2FtZUluZm8pKTtcbiAgIDg4NFx0XG4gICA4ODVcdCAgICAgIC8vIFVwZGF0ZSBob3N0IElEIGlmIHByZXNlbnQgaW4gZ2FtZUluZm8gLSBzZXJ2ZXIgaXMgdGhlIHNvdXJjZSBvZiB0cnV0aFxuICAgODg2XHQgICAgICBpZiAoZ2FtZVN0YXRlLmdhbWVJbmZvLmhvc3RJZCkge1xuICAgODg3XHQgICAgICAgIGNvbnNvbGUubG9nKCdbSEFORExFX0dBTUVfU1RBVEVdIFNldHRpbmcgaG9zdCBJRCBmcm9tIGdhbWVJbmZvOicsIGdhbWVTdGF0ZS5nYW1lSW5mby5ob3N0SWQpO1xuICAgODg4XHQgICAgICAgIGRpc3BhdGNoKHNldEhvc3QoZ2FtZVN0YXRlLmdhbWVJbmZvLmhvc3RJZCkpO1xuICAgODg5XHRcbiAgIDg5MFx0ICAgICAgICAvLyBVcGRhdGUgaXNIb3N0IGZsYWcgZm9yIGFsbCBwbGF5ZXJzIGJhc2VkIG9uIGhvc3RJZFxuICAgODkxXHQgICAgICAgIHRoaXMudXBkYXRlUGxheWVyc0hvc3RTdGF0dXMoZ2FtZVN0YXRlLmdhbWVJbmZvLmhvc3RJZCk7XG4gICA4OTJcdCAgICAgIH1cbiAgIDg5M1x0ICAgIH1cbiAgIDg5NFx0XG4gICA4OTVcdCAgICAvLyBDaGVjayBpZiBnYW1lIHN0YXRlIGluZGljYXRlcyB0aGUgZ2FtZSBoYXMgc3RhcnRlZFxuICAgODk2XHQgICAgaWYgKGdhbWVTdGF0ZS5zdGF0dXMgPT09ICdBQ1RJVkUnIHx8XG4gICA4OTdcdCAgICAgICAgKGdhbWVTdGF0ZS5nYW1lSW5mbyAmJiBnYW1lU3RhdGUuZ2FtZUluZm8uZ2FtZVN0YXJ0ZWQgPT09IHRydWUpIHx8XG4gICA4OThcdCAgICAgICAgKGdhbWVTdGF0ZS5nYW1lSW5mbyAmJiBnYW1lU3RhdGUuZ2FtZUluZm8uc3RhdHVzID09PSAnQUNUSVZFJykgfHxcbiAgIDg5OVx0ICAgICAgICAoZ2FtZVN0YXRlLmdhbWVTdGFydGVkID09PSB0cnVlKSB8fFxuICAgOTAwXHQgICAgICAgIChnYW1lU3RhdGUuZ2FtZVBoYXNlID09PSAncGxheWluZycpKSB7XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAyNjgyXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCIwZWEwNzdiZS1jYzE5LTQwMWItOGYwNy1jNjYzMGQzZGM3ZjA7dG9vbHVfdnJ0eF8wMVBKVWt1NFdOY3c5ZkpHdWhncHRzQXciOnsicmVxdWVzdElkIjoiMGVhMDc3YmUtY2MxOS00MDFiLThmMDctYzY2MzBkM2RjN2YwIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMVBKVWt1NFdOY3c5ZkpHdWhncHRzQXciLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIGtla29wb2x5LWZyb250ZW5kL3NyYy9zZXJ2aWNlcy9zb2NrZXRTZXJ2aWNlLmpzOlxuICAxMzAwXHQgIH07XG4gIDEzMDFcdFxuICAxMzAyXHQgIGhhbmRsZVBsYXllck1vdmVkID0gKHsgcGxheWVySWQsIHBvc2l0aW9uIH0pID0+IHtcbiAgMTMwM1x0ICAgIHN0b3JlLmRpc3BhdGNoKHVwZGF0ZVBsYXllclBvc2l0aW9uKHsgcGxheWVySWQsIHBvc2l0aW9uIH0pKTtcbiAgMTMwNFx0ICB9O1xuICAxMzA1XHRcbiAgMTMwNlx0ICBoYW5kbGVQbGF5ZXJCYWxhbmNlID0gKHsgcGxheWVySWQsIGFtb3VudCwgb3BlcmF0aW9uIH0pID0+IHtcbiAgMTMwN1x0ICAgIHN0b3JlLmRpc3BhdGNoKHVwZGF0ZVBsYXllckJhbGFuY2UoeyBwbGF5ZXJJZCwgYW1vdW50LCBvcGVyYXRpb24gfSkpO1xuICAxMzA4XHQgIH07XG4gIDEzMDlcdFxuICAxMzEwXHQgIGhhbmRsZVByb3BlcnR5T3duZXIgPSAoeyBwcm9wZXJ0eUlkLCBvd25lcklkLCBwcmV2aW91c093bmVySWQgfSkgPT4ge1xuICAxMzExXHQgICAgY29uc3QgeyBkaXNwYXRjaCB9ID0gc3RvcmU7XG4gIDEzMTJcdCAgICBjb25zb2xlLmxvZyhgW1BST1BFUlRZXSBQcm9wZXJ0eSAke3Byb3BlcnR5SWR9IG93bmVyc2hpcCBjaGFuZ2VkIGZyb20gJHtwcmV2aW91c093bmVySWR9IHRvICR7b3duZXJJZH1gKTtcbiAgMTMxM1x0XG4gIDEzMTRcdCAgICAvLyBHZXQgcHJvcGVydHkgbmFtZSBmcm9tIGJvYXJkQ29uZmlnXG4gIDEzMTVcdCAgICBjb25zdCB7IGNvbmZpZ0JvYXJkU3BhY2VzIH0gPSByZXF1aXJlKCcuLi9jb3JlL21vZGVscy9ib2FyZENvbmZpZycpO1xuICAxMzE2XHQgICAgY29uc3QgcHJvcGVydHlTcGFjZSA9IGNvbmZpZ0JvYXJkU3BhY2VzLmZpbmQocyA9PiBzLmlkID09PSBwcm9wZXJ0eUlkKTtcbiAgMTMxN1x0ICAgIGNvbnN0IHByb3BlcnR5TmFtZSA9IHByb3BlcnR5U3BhY2UgPyBwcm9wZXJ0eVNwYWNlLm5hbWUgOiBgUHJvcGVydHkgJHtwcm9wZXJ0eUlkfWA7XG4gIDEzMThcdFxuICAxMzE5XHQgICAgLy8gVXBkYXRlIHByb3BlcnR5IG93bmVyIGluIHRoZSBzdG9yZVxuICAxMzIwXHQgICAgZGlzcGF0Y2goYnV5UHJvcGVydHkoe1xuICAxMzIxXHQgICAgICBwbGF5ZXJJZDogb3duZXJJZCxcbiAgMTMyMlx0ICAgICAgcHJvcGVydHlJZDogcHJvcGVydHlJZFxuICAxMzIzXHQgICAgfSkpO1xuICAxMzI0XHRcbiAgMTMyNVx0ICAgIC8vIEFkZCBhIGdhbWUgbWVzc2FnZSBhYm91dCB0aGUgcHJvcGVydHkgcHVyY2hhc2VcbiAgMTMyNlx0ICAgIGlmIChvd25lcklkKSB7XG4gIDEzMjdcdCAgICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gIDEzMjhcdCAgICAgIGNvbnN0IHBsYXllciA9IGN1cnJlbnRTdGF0ZS5wbGF5ZXJzLnBsYXllcnNbb3duZXJJZF07XG4gIDEzMjlcdCAgICAgIGNvbnN0IHBsYXllck5hbWUgPSBwbGF5ZXIgPyBwbGF5ZXIubmFtZSA6IGBQbGF5ZXIgJHtvd25lcklkfWA7XG4gIDEzMzBcdFxuICAxMzMxXHQgICAgICBkaXNwYXRjaChhZGRHYW1lTWVzc2FnZSh7XG4gIDEzMzJcdCAgICAgICAgdHlwZTogJ1BST1BFUlRZJyxcbiAgMTMzM1x0ICAgICAgICBwbGF5ZXJJZDogb3duZXJJZCxcbiAgMTMzNFx0ICAgICAgICBjb250ZW50OiBgJHtwbGF5ZXJOYW1lfSBwdXJjaGFzZWQgJHtwcm9wZXJ0eU5hbWV9YCxcbiAgMTMzNVx0ICAgICAgICBkYXRhOiB7XG4gIDEzMzZcdCAgICAgICAgICBwcm9wZXJ0eUlkLFxuICAxMzM3XHQgICAgICAgICAgcHJvcGVydHlOYW1lLFxuICAxMzM4XHQgICAgICAgICAgcHJldmlvdXNPd25lcklkXG4gIDEzMzlcdCAgICAgICAgfSxcbiAgMTM0MFx0ICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcbiAgMTM0MVx0ICAgICAgfSkpO1xuICAxMzQyXHQgICAgfVxuICAxMzQzXHQgIH07XG4gIDEzNDRcdFxuICAxMzQ1XHQgIGhhbmRsZVBsYXllckNhcmQgPSAoeyBwbGF5ZXJJZCwgY2FyZCwgYWN0aW9uIH0pID0+IHtcbiAgMTM0Nlx0ICAgIGNvbnN0IHsgZGlzcGF0Y2ggfSA9IHN0b3JlO1xuICAxMzQ3XHQgICAgaWYgKGFjdGlvbiA9PT0gJ2FkZCcpIHtcbiAgMTM0OFx0ICAgICAgZGlzcGF0Y2goYWRkUGxheWVyQ2FyZCh7IHBsYXllcklkLCBjYXJkIH0pKTtcbiAgMTM0OVx0ICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSAncmVtb3ZlJykge1xuICAxMzUwXHQgICAgICBkaXNwYXRjaChyZW1vdmVQbGF5ZXJDYXJkKHsgcGxheWVySWQsIGNhcmRJZDogY2FyZC5jYXJkSWQgfSkpO1xuICAxMzUxXHQgICAgfVxuICAxMzUyXHQgIH07XG4gIDEzNTNcdFxuICAxMzU0XHQgIGhhbmRsZVBsYXllclByb3BlcnR5ID0gKHsgcGxheWVySWQsIHByb3BlcnR5SWQsIGFjdGlvbiB9KSA9PiB7XG4gIDEzNTVcdCAgICBjb25zdCB7IGRpc3BhdGNoIH0gPSBzdG9yZTtcbiAgMTM1Nlx0ICAgIGlmIChhY3Rpb24gPT09ICdhZGQnKSB7XG4gIDEzNTdcdCAgICAgIGRpc3BhdGNoKGFkZFBsYXllclByb3BlcnR5KHsgcGxheWVySWQsIHByb3BlcnR5SWQgfSkpO1xuICAxMzU4XHQgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09ICdyZW1vdmUnKSB7XG4gIDEzNTlcdCAgICAgIGRpc3BhdGNoKHJlbW92ZVBsYXllclByb3BlcnR5KHsgcGxheWVySWQsIHByb3BlcnR5SWQgfSkpO1xuICAxMzYwXHQgICAgfVxuICAxMzYxXHQgIH07XG4gIDEzNjJcdFxuICAxMzYzXHQgIGhhbmRsZVByb3BlcnR5VXBkYXRlZCA9ICh7IHByb3BlcnR5SWQsIHVwZGF0ZXMgfSkgPT4ge1xuICAxMzY0XHQgICAgc3RvcmUuZGlzcGF0Y2godXBkYXRlUHJvcGVydHkoeyBwcm9wZXJ0eUlkLCB1cGRhdGVzIH0pKTtcbiAgMTM2NVx0ICB9O1xuICAxMzY2XHRcbiAgMTM2N1x0ICAvLyBUaGlzIGZ1bmN0aW9uIGlzIGEgZHVwbGljYXRlIG9mIHRoZSBvbmUgYWJvdmUgYW5kIGhhcyBiZWVuIG1lcmdlZFxuICAxMzY4XHRcbiAgMTM2OVx0ICBoYW5kbGVQcm9wZXJ0eUVuZ2FnZW1lbnRzID0gKHsgcHJvcGVydHlJZCwgYWN0aW9uIH0pID0+IHtcbiAgMTM3MFx0ICAgIGNvbnN0IHsgZGlzcGF0Y2ggfSA9IHN0b3JlO1xuICAxMzcxXHQgICAgaWYgKGFjdGlvbiA9PT0gJ2FkZCcpIHtcbiAgMTM3Mlx0ICAgICAgZGlzcGF0Y2goYWRkRW5nYWdlbWVudCh7IHByb3BlcnR5SWQgfSkpO1xuICAxMzczXHQgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09ICdyZW1vdmUnKSB7XG4gIDEzNzRcdCAgICAgIGRpc3BhdGNoKHJlbW92ZUVuZ2FnZW1lbnQoeyBwcm9wZXJ0eUlkIH0pKTtcbiAgMTM3NVx0ICAgIH1cbiAgMTM3Nlx0ICB9O1xuICAxMzc3XHRcbiAgMTM3OFx0ICBoYW5kbGVQcm9wZXJ0eUNoZWNrbWFyayA9ICh7IHByb3BlcnR5SWQgfSkgPT4ge1xuICAxMzc5XHQgICAgc3RvcmUuZGlzcGF0Y2godG9nZ2xlQmx1ZUNoZWNrbWFyayh7IHByb3BlcnR5SWQgfSkpO1xuICAxMzgwXHQgIH07XG4gIDEzODFcdFxuICAxMzgyXHQgIGhhbmRsZVByb3BlcnR5TW9ydGdhZ2UgPSAoeyBwcm9wZXJ0eUlkIH0pID0+IHtcbiAgMTM4M1x0ICAgIHN0b3JlLmRpc3BhdGNoKHRvZ2dsZU1vcnRnYWdlKHsgcHJvcGVydHlJZCB9KSk7XG4gIDEzODRcdCAgfTtcbiAgMTM4NVx0XG4gIDEzODZcdCAgaGFuZGxlUHJvcGVydHlFZmZlY3QgPSAoeyBwcm9wZXJ0eUlkLCBlZmZlY3QgfSkgPT4ge1xuICAxMzg3XHQgICAgc3RvcmUuZGlzcGF0Y2goYWRkU3BlY2lhbEVmZmVjdCh7IHByb3BlcnR5SWQsIGVmZmVjdCB9KSk7XG4gIDEzODhcdCAgfTtcbiAgMTM4OVx0XG4gIDEzOTBcdCAgaGFuZGxlRGljZVJvbGxlZCA9IChkYXRhKSA9PiB7XG4gIDEzOTFcdCAgICBjb25zdCB7IGRpc3BhdGNoIH0gPSBzdG9yZTtcbiAgMTM5Mlx0XG4gIDEzOTNcdCAgICAvLyBBbHdheXMgZ2V0IGRpY2UgdmFsdWVzIGFzIGFuIGFycmF5IGFuZCBlbnN1cmUgdGhleSBhcmUgdmFsaWQgbnVtYmVyc1xuICAxMzk0XHQgICAgbGV0IGRpY2UgPSBBcnJheS5pc0FycmF5KGRhdGEuZGljZSkgPyBkYXRhLmRpY2UgOiBbZGF0YS5kaWNlMSwgZGF0YS5kaWNlMl07XG4gIDEzOTVcdFxuICAxMzk2XHQgICAgLy8gVmFsaWRhdGUgZGljZSB2YWx1ZXMgLSBlbnN1cmUgdGhleSBhcmUgbnVtYmVycyBiZXR3ZWVuIDEtNlxuICAxMzk3XHQgICAgZGljZSA9IGRpY2UubWFwKHZhbHVlID0+IHtcbiAgMTM5OFx0ICAgICAgLy8gQ29udmVydCB0byBudW1iZXIgaWYgaXQncyBhIHN0cmluZ1xuICAxMzk5XHQgICAgICBjb25zdCBudW1WYWx1ZSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBwYXJzZUludCh2YWx1ZSwgMTApIDogdmFsdWU7XG4gIDE0MDBcdFxuVG90YWwgbGluZXMgaW4gZmlsZTogMjY4MlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fX0sImRyYWZ0RXhjaGFuZ2UiOnsicmVxdWVzdF9tZXNzYWdlIjoiIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCJ9XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0YXR1cyI6ImRyYWZ0In0sInJlcXVlc3RJZHMiOltdLCJpc1Bpbm5lZCI6ZmFsc2UsImlzU2hhcmVhYmxlIjp0cnVlLCJleHRyYURhdGEiOnsiaXNBZ2VudENvbnZlcnNhdGlvbiI6dHJ1ZSwiaGFzQWdlbnRPbmJvYXJkZWQiOnRydWUsImhhc0RpcnR5RWRpdHMiOmZhbHNlfSwicGVyc29uYVR5cGUiOjB9fSwiYWdlbnRFeGVjdXRpb25Nb2RlIjoibWFudWFsIiwiaXNBZ2VudEVkaXRzQ29sbGFwc2VkIjp0cnVlfQ==" />
      </map>
    </option>
  </component>
</project>